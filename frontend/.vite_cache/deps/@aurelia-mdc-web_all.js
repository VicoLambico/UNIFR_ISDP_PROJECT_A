import __buffer_polyfill from 'vite-plugin-node-polyfills/shims/buffer'
globalThis.Buffer = globalThis.Buffer || __buffer_polyfill
import __global_polyfill from 'vite-plugin-node-polyfills/shims/global'
globalThis.global = globalThis.global || __global_polyfill
import __process_polyfill from 'vite-plugin-node-polyfills/shims/process'
globalThis.process = globalThis.process || __process_polyfill

import {
  FocusTrap,
  KEY,
  MDCDismissibleDrawerFoundation,
  MDCList,
  MDCListFoundation,
  MDCModalDrawerFoundation,
  cssClasses,
  cssClasses2,
  isNavigationEvent,
  normalizeKey,
  numbers,
  strings,
  strings2
} from "./chunk-R5MIPIJ4.js";
import {
  MDCFixedTopAppBarFoundation,
  MDCRipple,
  MDCRippleFoundation,
  MDCShortTopAppBarFoundation,
  MDCTopAppBarFoundation,
  applyPassive,
  cssClasses as cssClasses3,
  strings as strings3,
  util_exports
} from "./chunk-GBUJPVKB.js";
import {
  MDCComponent,
  MDCFoundation,
  __assign,
  __awaiter,
  __esDecorate,
  __extends,
  __generator,
  __read,
  __runInitializers,
  __setFunctionName,
  __spreadArray,
  __values,
  closest,
  estimateScrollWidth,
  matches
} from "./chunk-2KH6P6Y5.js";
import "./chunk-X76FEG47.js";
import {
  AccessorType,
  AppTask,
  BindingMode,
  CheckedObserver,
  CustomAttribute,
  CustomElement,
  IAttrMapper,
  IAurelia,
  IContainer,
  IPlatform,
  NodeObserverLocator,
  bindable,
  customAttribute,
  customElement,
  inject,
  processContent,
  resolve,
  slotted,
  subscriberCollection,
  templateCompilerHooks
} from "./chunk-S7YNWOLH.js";
import {
  __export,
  __toESM,
  require_dist,
  require_dist2,
  require_dist3
} from "./chunk-OFI5MVGH.js";

// node_modules/@aurelia-mdc-web/all/dist/index.js
var import_dist1933 = __toESM(require_dist());
var import_dist1934 = __toESM(require_dist2());
var import_dist1935 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/dist/index.js
var import_dist73 = __toESM(require_dist());
var import_dist74 = __toESM(require_dist2());
var import_dist75 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/dist/mdc-banner.js
var import_dist37 = __toESM(require_dist());
var import_dist38 = __toESM(require_dist2());
var import_dist39 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist19 = __toESM(require_dist());
var import_dist20 = __toESM(require_dist2());
var import_dist21 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist4 = __toESM(require_dist());
var import_dist5 = __toESM(require_dist2());
var import_dist6 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist = __toESM(require_dist());
var import_dist2 = __toESM(require_dist2());
var import_dist3 = __toESM(require_dist3());
function booleanAttr(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist7 = __toESM(require_dist());
var import_dist8 = __toESM(require_dist2());
var import_dist9 = __toESM(require_dist3());
var MdcPromisifyReference = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist10 = __toESM(require_dist());
var import_dist11 = __toESM(require_dist2());
var import_dist12 = __toESM(require_dist3());
var MdcComponent = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist13 = __toESM(require_dist());
var import_dist14 = __toESM(require_dist2());
var import_dist15 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/banner/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist16 = __toESM(require_dist());
var import_dist17 = __toESM(require_dist2());
var import_dist18 = __toESM(require_dist3());

// node_modules/@material/banner/index.js
var import_dist34 = __toESM(require_dist());
var import_dist35 = __toESM(require_dist2());
var import_dist36 = __toESM(require_dist3());

// node_modules/@material/banner/adapter.js
var import_dist22 = __toESM(require_dist());
var import_dist23 = __toESM(require_dist2());
var import_dist24 = __toESM(require_dist3());

// node_modules/@material/banner/component.js
var import_dist31 = __toESM(require_dist());
var import_dist32 = __toESM(require_dist2());
var import_dist33 = __toESM(require_dist3());

// node_modules/@material/banner/constants.js
var import_dist25 = __toESM(require_dist());
var import_dist26 = __toESM(require_dist2());
var import_dist27 = __toESM(require_dist3());
var cssClasses4 = {
  CLOSING: "mdc-banner--closing",
  OPEN: "mdc-banner--open",
  OPENING: "mdc-banner--opening"
};
var numbers2 = {
  BANNER_ANIMATION_CLOSE_TIME_MS: 250,
  BANNER_ANIMATION_OPEN_TIME_MS: 300
};
var events = {
  CLOSED: "MDCBanner:closed",
  CLOSING: "MDCBanner:closing",
  OPENED: "MDCBanner:opened",
  OPENING: "MDCBanner:opening",
  ACTION_CLICKED: "MDCBanner:actionClicked"
};
var selectors = {
  CONTENT: ".mdc-banner__content",
  PRIMARY_ACTION: ".mdc-banner__primary-action",
  SECONDARY_ACTION: ".mdc-banner__secondary-action",
  TEXT: ".mdc-banner__text"
};
var CloseReason;
(function(CloseReason2) {
  CloseReason2[CloseReason2["PRIMARY"] = 0] = "PRIMARY";
  CloseReason2[CloseReason2["SECONDARY"] = 1] = "SECONDARY";
  CloseReason2[CloseReason2["UNSPECIFIED"] = 2] = "UNSPECIFIED";
})(CloseReason || (CloseReason = {}));
var Action;
(function(Action2) {
  Action2[Action2["PRIMARY"] = 0] = "PRIMARY";
  Action2[Action2["SECONDARY"] = 1] = "SECONDARY";
  Action2[Action2["UNKNOWN"] = 2] = "UNKNOWN";
})(Action || (Action = {}));

// node_modules/@material/banner/foundation.js
var import_dist28 = __toESM(require_dist());
var import_dist29 = __toESM(require_dist2());
var import_dist30 = __toESM(require_dist3());
var OPENING = cssClasses4.OPENING;
var OPEN = cssClasses4.OPEN;
var CLOSING = cssClasses4.CLOSING;
var MDCBannerFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCBannerFoundation2, _super);
    function MDCBannerFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCBannerFoundation2.defaultAdapter), adapter)) || this;
      _this.isOpened = false;
      _this.animationFrame = 0;
      _this.animationTimer = 0;
      return _this;
    }
    Object.defineProperty(MDCBannerFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          getContentHeight: function() {
            return 0;
          },
          notifyClosed: function() {
            return void 0;
          },
          notifyClosing: function() {
            return void 0;
          },
          notifyOpened: function() {
            return void 0;
          },
          notifyOpening: function() {
            return void 0;
          },
          notifyActionClicked: function() {
            return void 0;
          },
          releaseFocus: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setStyleProperty: function() {
            return void 0;
          },
          trapFocus: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCBannerFoundation2.prototype.destroy = function() {
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = 0;
      clearTimeout(this.animationTimer);
      this.animationTimer = 0;
    };
    MDCBannerFoundation2.prototype.open = function() {
      var _this = this;
      this.isOpened = true;
      this.adapter.notifyOpening();
      this.adapter.removeClass(CLOSING);
      this.adapter.addClass(OPENING);
      var contentHeight = this.adapter.getContentHeight();
      this.animationFrame = requestAnimationFrame(function() {
        _this.adapter.addClass(OPEN);
        _this.adapter.setStyleProperty("height", contentHeight + "px");
        _this.animationTimer = setTimeout(function() {
          _this.handleAnimationTimerEnd();
          _this.adapter.trapFocus();
          _this.adapter.notifyOpened();
        }, numbers2.BANNER_ANIMATION_OPEN_TIME_MS);
      });
    };
    MDCBannerFoundation2.prototype.close = function(reason) {
      var _this = this;
      if (!this.isOpened) {
        return;
      }
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = 0;
      this.isOpened = false;
      this.adapter.notifyClosing(reason);
      this.adapter.addClass(CLOSING);
      this.adapter.setStyleProperty("height", "0");
      this.adapter.removeClass(OPEN);
      this.adapter.removeClass(OPENING);
      clearTimeout(this.animationTimer);
      this.animationTimer = setTimeout(function() {
        _this.adapter.releaseFocus();
        _this.handleAnimationTimerEnd();
        _this.adapter.notifyClosed(reason);
      }, numbers2.BANNER_ANIMATION_CLOSE_TIME_MS);
    };
    MDCBannerFoundation2.prototype.isOpen = function() {
      return this.isOpened;
    };
    MDCBannerFoundation2.prototype.handlePrimaryActionClick = function(disableAutoClose) {
      if (disableAutoClose === void 0) {
        disableAutoClose = false;
      }
      if (disableAutoClose) {
        this.adapter.notifyActionClicked(
          0
          /* PRIMARY */
        );
      } else {
        this.close(CloseReason.PRIMARY);
      }
    };
    MDCBannerFoundation2.prototype.handleSecondaryActionClick = function(disableAutoClose) {
      if (disableAutoClose === void 0) {
        disableAutoClose = false;
      }
      if (disableAutoClose) {
        this.adapter.notifyActionClicked(
          1
          /* SECONDARY */
        );
      } else {
        this.close(CloseReason.SECONDARY);
      }
    };
    MDCBannerFoundation2.prototype.layout = function() {
      var contentHeight = this.adapter.getContentHeight();
      this.adapter.setStyleProperty("height", contentHeight + "px");
    };
    MDCBannerFoundation2.prototype.handleAnimationTimerEnd = function() {
      this.animationTimer = 0;
      this.adapter.removeClass(OPENING);
      this.adapter.removeClass(CLOSING);
    };
    return MDCBannerFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/banner/component.js
var MDCBanner = (
  /** @class */
  function(_super) {
    __extends(MDCBanner2, _super);
    function MDCBanner2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCBanner2.attachTo = function(root) {
      return new MDCBanner2(root);
    };
    MDCBanner2.prototype.initialize = function(focusTrapFactory) {
      var _this = this;
      if (focusTrapFactory === void 0) {
        focusTrapFactory = function(el, focusOptions) {
          return new FocusTrap(el, focusOptions);
        };
      }
      this.contentEl = this.root.querySelector(selectors.CONTENT);
      this.textEl = this.root.querySelector(selectors.TEXT);
      this.primaryActionEl = this.root.querySelector(selectors.PRIMARY_ACTION);
      this.secondaryActionEl = this.root.querySelector(selectors.SECONDARY_ACTION);
      this.focusTrapFactory = focusTrapFactory;
      this.handleContentClick = function(evt) {
        var target = evt.target;
        if (closest(target, selectors.PRIMARY_ACTION)) {
          _this.foundation.handlePrimaryActionClick();
        } else if (closest(target, selectors.SECONDARY_ACTION)) {
          _this.foundation.handleSecondaryActionClick();
        }
      };
    };
    MDCBanner2.prototype.initialSyncWithDOM = function() {
      this.registerContentClickHandler(this.handleContentClick);
      this.focusTrap = this.focusTrapFactory(this.root, { initialFocusEl: this.primaryActionEl });
    };
    MDCBanner2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.deregisterContentClickHandler(this.handleContentClick);
    };
    MDCBanner2.prototype.layout = function() {
      this.foundation.layout();
    };
    MDCBanner2.prototype.open = function() {
      this.foundation.open();
    };
    MDCBanner2.prototype.close = function(reason) {
      this.foundation.close(reason);
    };
    MDCBanner2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        getContentHeight: function() {
          return _this.contentEl.offsetHeight;
        },
        notifyClosed: function(reason) {
          _this.emit(events.CLOSED, { reason });
        },
        notifyClosing: function(reason) {
          _this.emit(events.CLOSING, { reason });
        },
        notifyOpened: function() {
          _this.emit(events.OPENED, {});
        },
        notifyOpening: function() {
          _this.emit(events.OPENING, {});
        },
        notifyActionClicked: function(action) {
          _this.emit(events.ACTION_CLICKED, { action });
        },
        releaseFocus: function() {
          _this.focusTrap.releaseFocus();
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        setStyleProperty: function(propertyName, value) {
          _this.root.style.setProperty(propertyName, value);
        },
        trapFocus: function() {
          _this.focusTrap.trapFocus();
        }
      };
      return new MDCBannerFoundation(adapter);
    };
    Object.defineProperty(MDCBanner2.prototype, "isOpen", {
      get: function() {
        return this.foundation.isOpen();
      },
      enumerable: false,
      configurable: true
    });
    MDCBanner2.prototype.getText = function() {
      return this.textEl.textContent || "";
    };
    MDCBanner2.prototype.setText = function(text) {
      this.textEl.textContent = text;
    };
    MDCBanner2.prototype.getPrimaryActionText = function() {
      return this.primaryActionEl.textContent || "";
    };
    MDCBanner2.prototype.setPrimaryActionText = function(actionButtonText) {
      this.primaryActionEl.textContent = actionButtonText;
    };
    MDCBanner2.prototype.getSecondaryActionText = function() {
      return this.secondaryActionEl ? this.secondaryActionEl.textContent || "" : null;
    };
    MDCBanner2.prototype.setSecondaryActionText = function(actionButtonText) {
      if (this.secondaryActionEl) {
        this.secondaryActionEl.textContent = actionButtonText;
      }
    };
    MDCBanner2.prototype.registerContentClickHandler = function(handler) {
      this.contentEl.addEventListener("click", handler);
    };
    MDCBanner2.prototype.deregisterContentClickHandler = function(handler) {
      this.contentEl.removeEventListener("click", handler);
    };
    return MDCBanner2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/banner/dist/mdc-banner.html?raw
var mdc_banner_default = `<template class="mdc-banner \${centered ? 'mdc-banner--centered' : ''}" role="banner"
  mdc-focus-trap="initial-focus-el.bind: primaryActionEl" mdc-focus-trap.ref="mdcFocusTrap">
  <div class="\${fixed ? 'mdc-banner__fixed' : ''}">
    <div class="mdc-banner__content" role="alertdialog" aria-live="assertive" ref="contentEl">
      <div class="mdc-banner__graphic-text-wrapper">
        <div class="mdc-banner__graphic" role="img" alt="" if.bind="icon">
          <i class="material-icons mdc-banner__icon">\${icon}</i>
        </div>
        <div class="mdc-banner__text">
          <au-slot></au-slot>
        </div>
      </div>
      <div class="mdc-banner__actions">
        <button mdc-button class="mdc-banner__secondary-action" if.bind="secondaryAction"
          click.trigger="handleSecondaryActionClick()">\${secondaryAction}</button>
        <button mdc-button class="mdc-banner__primary-action" if.bind="primaryAction"
          click.trigger="handlePrimaryActionClick()" ref="primaryActionEl">\${primaryAction}</button>
      </div>
    </div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/banner/dist/mdc-banner.js
events.CLOSED = events.CLOSED.toLowerCase();
events.CLOSING = events.CLOSING.toLowerCase();
events.OPENED = events.OPENED.toLowerCase();
events.OPENING = events.OPENING.toLowerCase();
var MdcBanner = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-banner", template: mdc_banner_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent;
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _centered_decorators;
  let _centered_initializers = [];
  let _centered_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _primaryAction_decorators;
  let _primaryAction_initializers = [];
  let _primaryAction_extraInitializers = [];
  let _secondaryAction_decorators;
  let _secondaryAction_initializers = [];
  let _secondaryAction_extraInitializers = [];
  let _disablePrimaryAutoClose_decorators;
  let _disablePrimaryAutoClose_initializers = [];
  let _disablePrimaryAutoClose_extraInitializers = [];
  let _disableSecondaryAutoClose_decorators;
  let _disableSecondaryAutoClose_initializers = [];
  let _disableSecondaryAutoClose_extraInitializers = [];
  var MdcBanner2 = _classThis = class extends _classSuper {
    handlePrimaryActionClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handlePrimaryActionClick(this.disablePrimaryAutoClose);
    }
    handleSecondaryActionClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleSecondaryActionClick(this.disableSecondaryAutoClose);
    }
    /**
     * Opens the banner and fires events.OPENING to indicate the beginning of its
     * opening animation and then events.OPENED once the animation finishes.
     */
    open() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.open();
    }
    /**
     * Closes the banner and fires events.CLOSING to indicate the beginning of its
     * closing animation and then events.CLOSED once the animation finishes.
     * @param reason Why the banner was closed. Value will be passed to
     *     events.CLOSING and events.CLOSED via the `event.detail.reason`
     *     property. Standard values are CloseReason.PRIMARY and
     *     CloseReason.SECONDARY, but CloseReason.UNSPECIFIED is provided for
     *     custom handling of programmatic closing of the banner.
     */
    close(reason) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.close(reason);
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => {
          this.root.classList.add(className);
        },
        getContentHeight: () => {
          return this.contentEl.offsetHeight;
        },
        notifyClosed: (reason) => {
          this.emit(events.CLOSED, { reason });
        },
        notifyClosing: (reason) => {
          this.emit(events.CLOSING, { reason });
        },
        notifyOpened: () => {
          this.emit(events.OPENED, {});
        },
        notifyOpening: () => {
          this.emit(events.OPENING, {});
        },
        notifyActionClicked: (action) => {
          this.emit(events.ACTION_CLICKED, { action });
        },
        releaseFocus: () => {
          var _a2;
          (_a2 = this.mdcFocusTrap) == null ? void 0 : _a2.releaseFocus();
        },
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        setStyleProperty: (propertyName, value) => {
          this.root.style.setProperty(propertyName, value);
        },
        trapFocus: () => {
          var _a2;
          (_a2 = this.mdcFocusTrap) == null ? void 0 : _a2.trapFocus();
        }
      };
      return new MDCBannerFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.fixed = __runInitializers(this, _fixed_initializers, void 0);
      this.centered = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _centered_initializers, void 0));
      this.icon = (__runInitializers(this, _centered_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.primaryAction = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _primaryAction_initializers, void 0));
      this.secondaryAction = (__runInitializers(this, _primaryAction_extraInitializers), __runInitializers(this, _secondaryAction_initializers, void 0));
      this.disablePrimaryAutoClose = (__runInitializers(this, _secondaryAction_extraInitializers), __runInitializers(this, _disablePrimaryAutoClose_initializers, void 0));
      this.disableSecondaryAutoClose = (__runInitializers(this, _disablePrimaryAutoClose_extraInitializers), __runInitializers(this, _disableSecondaryAutoClose_initializers, void 0));
      __runInitializers(this, _disableSecondaryAutoClose_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcBanner");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _fixed_decorators = [bindable({ set: booleanAttr })];
    _centered_decorators = [bindable({ set: booleanAttr })];
    _icon_decorators = [bindable()];
    _primaryAction_decorators = [bindable()];
    _secondaryAction_decorators = [bindable()];
    _disablePrimaryAutoClose_decorators = [bindable({ set: booleanAttr })];
    _disableSecondaryAutoClose_decorators = [bindable({ set: booleanAttr })];
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _centered_decorators, { kind: "field", name: "centered", static: false, private: false, access: { has: (obj) => "centered" in obj, get: (obj) => obj.centered, set: (obj, value) => {
      obj.centered = value;
    } }, metadata: _metadata }, _centered_initializers, _centered_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _primaryAction_decorators, { kind: "field", name: "primaryAction", static: false, private: false, access: { has: (obj) => "primaryAction" in obj, get: (obj) => obj.primaryAction, set: (obj, value) => {
      obj.primaryAction = value;
    } }, metadata: _metadata }, _primaryAction_initializers, _primaryAction_extraInitializers);
    __esDecorate(null, null, _secondaryAction_decorators, { kind: "field", name: "secondaryAction", static: false, private: false, access: { has: (obj) => "secondaryAction" in obj, get: (obj) => obj.secondaryAction, set: (obj, value) => {
      obj.secondaryAction = value;
    } }, metadata: _metadata }, _secondaryAction_initializers, _secondaryAction_extraInitializers);
    __esDecorate(null, null, _disablePrimaryAutoClose_decorators, { kind: "field", name: "disablePrimaryAutoClose", static: false, private: false, access: { has: (obj) => "disablePrimaryAutoClose" in obj, get: (obj) => obj.disablePrimaryAutoClose, set: (obj, value) => {
      obj.disablePrimaryAutoClose = value;
    } }, metadata: _metadata }, _disablePrimaryAutoClose_initializers, _disablePrimaryAutoClose_extraInitializers);
    __esDecorate(null, null, _disableSecondaryAutoClose_decorators, { kind: "field", name: "disableSecondaryAutoClose", static: false, private: false, access: { has: (obj) => "disableSecondaryAutoClose" in obj, get: (obj) => obj.disableSecondaryAutoClose, set: (obj, value) => {
      obj.disableSecondaryAutoClose = value;
    } }, metadata: _metadata }, _disableSecondaryAutoClose_initializers, _disableSecondaryAutoClose_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcBanner2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcBanner2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/dist/index.js
var import_dist70 = __toESM(require_dist());
var import_dist71 = __toESM(require_dist2());
var import_dist72 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/dist/mdc-button.js
var import_dist61 = __toESM(require_dist());
var import_dist62 = __toESM(require_dist2());
var import_dist63 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist58 = __toESM(require_dist());
var import_dist59 = __toESM(require_dist2());
var import_dist60 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist43 = __toESM(require_dist());
var import_dist44 = __toESM(require_dist2());
var import_dist45 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist40 = __toESM(require_dist());
var import_dist41 = __toESM(require_dist2());
var import_dist42 = __toESM(require_dist3());
function booleanAttr2(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap2 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr2 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr2 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr2 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist46 = __toESM(require_dist());
var import_dist47 = __toESM(require_dist2());
var import_dist48 = __toESM(require_dist3());
var MdcPromisifyReference2 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist49 = __toESM(require_dist());
var import_dist50 = __toESM(require_dist2());
var import_dist51 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist52 = __toESM(require_dist());
var import_dist53 = __toESM(require_dist2());
var import_dist54 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist55 = __toESM(require_dist());
var import_dist56 = __toESM(require_dist2());
var import_dist57 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/button/dist/mdc-button.html?raw
var mdc_button_default = `<template class="
    mdc-button
    \${touch ? 'mdc-button--touch' : ''}
    \${raised ? 'mdc-button--raised' : ''}
    \${unelevated ? 'mdc-button--unelevated' : ''}
    \${outlined ? 'mdc-button--outlined' : ''}
  " tabindex.bind="disabled ? -1 : 0" mdc-ripple="no-class.bind: true">
  <div class="mdc-button__ripple"></div>
  <span class="mdc-button__label" if.bind="label">\${label}</span>
  <div class="mdc-button__touch" if.bind="touch"></div>
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/button/dist/mdc-button.js
var MdcButton = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-button", template: mdc_button_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  let _raised_decorators;
  let _raised_initializers = [];
  let _raised_extraInitializers = [];
  let _unelevated_decorators;
  let _unelevated_initializers = [];
  let _unelevated_extraInitializers = [];
  let _outlined_decorators;
  let _outlined_initializers = [];
  let _outlined_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  var MdcButton2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.label = __runInitializers(this, _label_initializers, void 0);
      this.touch = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _touch_initializers, void 0));
      this.raised = (__runInitializers(this, _touch_extraInitializers), __runInitializers(this, _raised_initializers, void 0));
      this.unelevated = (__runInitializers(this, _raised_extraInitializers), __runInitializers(this, _unelevated_initializers, void 0));
      this.outlined = (__runInitializers(this, _unelevated_extraInitializers), __runInitializers(this, _outlined_initializers, void 0));
      this.disabled = (__runInitializers(this, _outlined_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      __runInitializers(this, _disabled_extraInitializers);
      this.root = root;
    }
    disabledChanged() {
      if (this.disabled) {
        this.root.setAttribute("disabled", "");
      } else {
        this.root.removeAttribute("disabled");
      }
    }
    attached() {
      const icons = this.root.querySelectorAll("mdc-icon");
      Array.from(icons).forEach((x) => x.classList.add("mdc-button__icon"));
    }
  };
  __setFunctionName(_classThis, "MdcButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _label_decorators = [bindable()];
    _touch_decorators = [bindable({ set: booleanAttr2 })];
    _raised_decorators = [bindable({ set: booleanAttr2 })];
    _unelevated_decorators = [bindable({ set: booleanAttr2 })];
    _outlined_decorators = [bindable({ set: booleanAttr2 })];
    _disabled_decorators = [bindable({ set: booleanAttr2 })];
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, null, _raised_decorators, { kind: "field", name: "raised", static: false, private: false, access: { has: (obj) => "raised" in obj, get: (obj) => obj.raised, set: (obj, value) => {
      obj.raised = value;
    } }, metadata: _metadata }, _raised_initializers, _raised_extraInitializers);
    __esDecorate(null, null, _unelevated_decorators, { kind: "field", name: "unelevated", static: false, private: false, access: { has: (obj) => "unelevated" in obj, get: (obj) => obj.unelevated, set: (obj, value) => {
      obj.unelevated = value;
    } }, metadata: _metadata }, _unelevated_initializers, _unelevated_extraInitializers);
    __esDecorate(null, null, _outlined_decorators, { kind: "field", name: "outlined", static: false, private: false, access: { has: (obj) => "outlined" in obj, get: (obj) => obj.outlined, set: (obj, value) => {
      obj.outlined = value;
    } }, metadata: _metadata }, _outlined_initializers, _outlined_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcButton2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/dist/mdc-button-label.js
var import_dist64 = __toESM(require_dist());
var import_dist65 = __toESM(require_dist2());
var import_dist66 = __toESM(require_dist3());
var MdcButtonLabel = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-button-label")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcButtonLabel2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-button__label");
    }
  };
  __setFunctionName(_classThis, "MdcButtonLabel");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcButtonLabel2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcButtonLabel2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/dist/enhance-mdc-button.js
var import_dist67 = __toESM(require_dist());
var import_dist68 = __toESM(require_dist2());
var import_dist69 = __toESM(require_dist3());
var EnhanceMdcButton = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcButton2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-button=""', 'as-element="mdc-button"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcButton2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/button/dist/index.js
var registered = false;
var ButtonConfiguration = {
  register(container) {
    if (registered) {
      return container;
    } else {
      registered = true;
      return container.register(MdcButton, MdcButtonLabel, EnhanceMdcButton);
    }
  }
};

// node_modules/@aurelia-mdc-web/banner/dist/index.js
var registered2 = false;
var BannerConfiguration = {
  register(container) {
    if (registered2) {
      return container;
    } else {
      registered2 = true;
      return container.register(MdcBanner, ButtonConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/card/dist/index.js
var import_dist115 = __toESM(require_dist());
var import_dist116 = __toESM(require_dist2());
var import_dist117 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-actions/mdc-card-actions.js
var import_dist97 = __toESM(require_dist());
var import_dist98 = __toESM(require_dist2());
var import_dist99 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist94 = __toESM(require_dist());
var import_dist95 = __toESM(require_dist2());
var import_dist96 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist79 = __toESM(require_dist());
var import_dist80 = __toESM(require_dist2());
var import_dist81 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist76 = __toESM(require_dist());
var import_dist77 = __toESM(require_dist2());
var import_dist78 = __toESM(require_dist3());
function booleanAttr3(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap3 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr3 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr3 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr3 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist82 = __toESM(require_dist());
var import_dist83 = __toESM(require_dist2());
var import_dist84 = __toESM(require_dist3());
var MdcPromisifyReference3 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist85 = __toESM(require_dist());
var import_dist86 = __toESM(require_dist2());
var import_dist87 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist88 = __toESM(require_dist());
var import_dist89 = __toESM(require_dist2());
var import_dist90 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist91 = __toESM(require_dist());
var import_dist92 = __toESM(require_dist2());
var import_dist93 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-actions/mdc-card-actions.html?raw
var mdc_card_actions_default = `<template class="mdc-card__actions \${fullBleed ? 'mdc-card__actions--full-bleed' : ''}">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-actions/mdc-card-actions.js
var MdcCardActions = (() => {
  let _classDecorators = [customElement({ name: "mdc-card-actions", template: mdc_card_actions_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _fullBleed_decorators;
  let _fullBleed_initializers = [];
  let _fullBleed_extraInitializers = [];
  var MdcCardActions2 = _classThis = class {
    constructor() {
      this.fullBleed = __runInitializers(this, _fullBleed_initializers, void 0);
      __runInitializers(this, _fullBleed_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcCardActions");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _fullBleed_decorators = [bindable({ set: booleanAttr3 })];
    __esDecorate(null, null, _fullBleed_decorators, { kind: "field", name: "fullBleed", static: false, private: false, access: { has: (obj) => "fullBleed" in obj, get: (obj) => obj.fullBleed, set: (obj, value) => {
      obj.fullBleed = value;
    } }, metadata: _metadata }, _fullBleed_initializers, _fullBleed_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCardActions2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCardActions2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-media/mdc-card-media.js
var import_dist100 = __toESM(require_dist());
var import_dist101 = __toESM(require_dist2());
var import_dist102 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-media/mdc-card-media.html?raw
var mdc_card_media_default = `<template class="mdc-card__media \${square ? 'mdc-card__media--square' : ''} \${wide ? 'mdc-card__media--16-9' : ''}">
  <div class="mdc-card__media-content">
    <au-slot></au-slot>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-media/mdc-card-media.js
var MdcCardMedia = (() => {
  let _classDecorators = [customElement({ name: "mdc-card-media", template: mdc_card_media_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _square_decorators;
  let _square_initializers = [];
  let _square_extraInitializers = [];
  let _wide_decorators;
  let _wide_initializers = [];
  let _wide_extraInitializers = [];
  var MdcCardMedia2 = _classThis = class {
    constructor() {
      this.square = __runInitializers(this, _square_initializers, void 0);
      this.wide = (__runInitializers(this, _square_extraInitializers), __runInitializers(this, _wide_initializers, void 0));
      __runInitializers(this, _wide_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcCardMedia");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _square_decorators = [bindable({ set: booleanAttr3 })];
    _wide_decorators = [bindable({ set: booleanAttr3 })];
    __esDecorate(null, null, _square_decorators, { kind: "field", name: "square", static: false, private: false, access: { has: (obj) => "square" in obj, get: (obj) => obj.square, set: (obj, value) => {
      obj.square = value;
    } }, metadata: _metadata }, _square_initializers, _square_extraInitializers);
    __esDecorate(null, null, _wide_decorators, { kind: "field", name: "wide", static: false, private: false, access: { has: (obj) => "wide" in obj, get: (obj) => obj.wide, set: (obj, value) => {
      obj.wide = value;
    } }, metadata: _metadata }, _wide_initializers, _wide_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCardMedia2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCardMedia2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-action-buttons.js
var import_dist103 = __toESM(require_dist());
var import_dist104 = __toESM(require_dist2());
var import_dist105 = __toESM(require_dist3());
var MdcCardActionButtons = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-card-action-buttons", template: '<template class="mdc-card__action-buttons"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcCardActionButtons2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      const children = this.root.querySelectorAll(".mdc-button");
      for (let i = 0; i < children.length; ++i) {
        const child = children[i];
        child.classList.add("mdc-card__action", "mdc-card__action--button");
      }
    }
  };
  __setFunctionName(_classThis, "MdcCardActionButtons");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCardActionButtons2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCardActionButtons2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-primary-action.js
var import_dist106 = __toESM(require_dist());
var import_dist107 = __toESM(require_dist2());
var import_dist108 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-primary-action.html?raw
var mdc_card_primary_action_default = '<template class="mdc-card__primary-action" tabindex=0\n  mdc-ripple="disabled.bind: disableRipple; surface.bind: rippleElement">\n  <div class="mdc-card__ripple" ref="rippleElement"></div>\n  <au-slot></au-slot>\n</template>\n';

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-primary-action.js
var MdcCardPrimaryAction = (() => {
  let _classDecorators = [customElement({ name: "mdc-card-primary-action", template: mdc_card_primary_action_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _disableRipple_decorators;
  let _disableRipple_initializers = [];
  let _disableRipple_extraInitializers = [];
  var MdcCardPrimaryAction2 = _classThis = class {
    constructor() {
      this.disableRipple = __runInitializers(this, _disableRipple_initializers, void 0);
      __runInitializers(this, _disableRipple_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcCardPrimaryAction");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _disableRipple_decorators = [bindable({ set: booleanAttr3 })];
    __esDecorate(null, null, _disableRipple_decorators, { kind: "field", name: "disableRipple", static: false, private: false, access: { has: (obj) => "disableRipple" in obj, get: (obj) => obj.disableRipple, set: (obj, value) => {
      obj.disableRipple = value;
    } }, metadata: _metadata }, _disableRipple_initializers, _disableRipple_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCardPrimaryAction2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCardPrimaryAction2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/mdc-card-action-icons.js
var import_dist109 = __toESM(require_dist());
var import_dist110 = __toESM(require_dist2());
var import_dist111 = __toESM(require_dist3());
var MdcCardActionIcons = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-card-action-icons", template: '<template class="mdc-card__action-icons"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcCardActionIcons2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      const children = this.root.querySelectorAll(".mdc-icon-button");
      for (let i = 0; i < children.length; ++i) {
        const child = children[i];
        child.classList.add("mdc-card__action", "mdc-card__action--icon");
      }
    }
  };
  __setFunctionName(_classThis, "MdcCardActionIcons");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCardActionIcons2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCardActionIcons2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/mdc-card.js
var import_dist112 = __toESM(require_dist());
var import_dist113 = __toESM(require_dist2());
var import_dist114 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/card/dist/mdc-card.html?raw
var mdc_card_default = `<template class="mdc-card \${outlined ? 'mdc-card--outlined' : ''}">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/card/dist/mdc-card.js
var MdcCard = (() => {
  let _classDecorators = [customElement({ name: "mdc-card", template: mdc_card_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _outlined_decorators;
  let _outlined_initializers = [];
  let _outlined_extraInitializers = [];
  var MdcCard2 = _classThis = class {
    constructor() {
      this.outlined = __runInitializers(this, _outlined_initializers, void 0);
      __runInitializers(this, _outlined_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcCard");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _outlined_decorators = [bindable({ set: booleanAttr3 })];
    __esDecorate(null, null, _outlined_decorators, { kind: "field", name: "outlined", static: false, private: false, access: { has: (obj) => "outlined" in obj, get: (obj) => obj.outlined, set: (obj, value) => {
      obj.outlined = value;
    } }, metadata: _metadata }, _outlined_initializers, _outlined_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCard2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCard2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/card/dist/index.js
var registered3 = false;
var CardConfiguration = {
  register(container) {
    if (registered3) {
      return container;
    } else {
      registered3 = true;
      return container.register(MdcCard, MdcCardActions, MdcCardMedia, MdcCardActionButtons, MdcCardPrimaryAction, MdcCardActionIcons);
    }
  }
};

// node_modules/@aurelia-mdc-web/checkbox/dist/index.js
var import_dist196 = __toESM(require_dist());
var import_dist197 = __toESM(require_dist2());
var import_dist198 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/checkbox/dist/mdc-checkbox.js
var import_dist157 = __toESM(require_dist());
var import_dist158 = __toESM(require_dist2());
var import_dist159 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist136 = __toESM(require_dist());
var import_dist137 = __toESM(require_dist2());
var import_dist138 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist121 = __toESM(require_dist());
var import_dist122 = __toESM(require_dist2());
var import_dist123 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist118 = __toESM(require_dist());
var import_dist119 = __toESM(require_dist2());
var import_dist120 = __toESM(require_dist3());
function booleanAttr4(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap4 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr4 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr4 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr4 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist124 = __toESM(require_dist());
var import_dist125 = __toESM(require_dist2());
var import_dist126 = __toESM(require_dist3());
var MdcPromisifyReference4 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist127 = __toESM(require_dist());
var import_dist128 = __toESM(require_dist2());
var import_dist129 = __toESM(require_dist3());
var MdcComponent4 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist130 = __toESM(require_dist());
var import_dist131 = __toESM(require_dist2());
var import_dist132 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/checkbox/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist133 = __toESM(require_dist());
var import_dist134 = __toESM(require_dist2());
var import_dist135 = __toESM(require_dist3());

// node_modules/@material/checkbox/index.js
var import_dist154 = __toESM(require_dist());
var import_dist155 = __toESM(require_dist2());
var import_dist156 = __toESM(require_dist3());

// node_modules/@material/checkbox/adapter.js
var import_dist139 = __toESM(require_dist());
var import_dist140 = __toESM(require_dist2());
var import_dist141 = __toESM(require_dist3());

// node_modules/@material/checkbox/component.js
var import_dist151 = __toESM(require_dist());
var import_dist152 = __toESM(require_dist2());
var import_dist153 = __toESM(require_dist3());

// node_modules/@material/animation/util.js
var import_dist142 = __toESM(require_dist());
var import_dist143 = __toESM(require_dist2());
var import_dist144 = __toESM(require_dist3());
var cssPropertyNameMap = {
  animation: {
    prefixed: "-webkit-animation",
    standard: "animation"
  },
  transform: {
    prefixed: "-webkit-transform",
    standard: "transform"
  },
  transition: {
    prefixed: "-webkit-transition",
    standard: "transition"
  }
};
var jsEventTypeMap = {
  animationend: {
    cssProperty: "animation",
    prefixed: "webkitAnimationEnd",
    standard: "animationend"
  },
  animationiteration: {
    cssProperty: "animation",
    prefixed: "webkitAnimationIteration",
    standard: "animationiteration"
  },
  animationstart: {
    cssProperty: "animation",
    prefixed: "webkitAnimationStart",
    standard: "animationstart"
  },
  transitionend: {
    cssProperty: "transition",
    prefixed: "webkitTransitionEnd",
    standard: "transitionend"
  }
};
function isWindow(windowObj) {
  return Boolean(windowObj.document) && typeof windowObj.document.createElement === "function";
}
function getCorrectPropertyName(windowObj, cssProperty) {
  if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {
    var el = windowObj.document.createElement("div");
    var _a2 = cssPropertyNameMap[cssProperty], standard = _a2.standard, prefixed = _a2.prefixed;
    var isStandard = standard in el.style;
    return isStandard ? standard : prefixed;
  }
  return cssProperty;
}
function getCorrectEventName(windowObj, eventType) {
  if (isWindow(windowObj) && eventType in jsEventTypeMap) {
    var el = windowObj.document.createElement("div");
    var _a2 = jsEventTypeMap[eventType], standard = _a2.standard, prefixed = _a2.prefixed, cssProperty = _a2.cssProperty;
    var isStandard = cssProperty in el.style;
    return isStandard ? standard : prefixed;
  }
  return eventType;
}

// node_modules/@material/checkbox/constants.js
var import_dist145 = __toESM(require_dist());
var import_dist146 = __toESM(require_dist2());
var import_dist147 = __toESM(require_dist3());
var cssClasses5 = {
  ANIM_CHECKED_INDETERMINATE: "mdc-checkbox--anim-checked-indeterminate",
  ANIM_CHECKED_UNCHECKED: "mdc-checkbox--anim-checked-unchecked",
  ANIM_INDETERMINATE_CHECKED: "mdc-checkbox--anim-indeterminate-checked",
  ANIM_INDETERMINATE_UNCHECKED: "mdc-checkbox--anim-indeterminate-unchecked",
  ANIM_UNCHECKED_CHECKED: "mdc-checkbox--anim-unchecked-checked",
  ANIM_UNCHECKED_INDETERMINATE: "mdc-checkbox--anim-unchecked-indeterminate",
  BACKGROUND: "mdc-checkbox__background",
  CHECKED: "mdc-checkbox--checked",
  CHECKMARK: "mdc-checkbox__checkmark",
  CHECKMARK_PATH: "mdc-checkbox__checkmark-path",
  DISABLED: "mdc-checkbox--disabled",
  INDETERMINATE: "mdc-checkbox--indeterminate",
  MIXEDMARK: "mdc-checkbox__mixedmark",
  NATIVE_CONTROL: "mdc-checkbox__native-control",
  ROOT: "mdc-checkbox",
  SELECTED: "mdc-checkbox--selected",
  UPGRADED: "mdc-checkbox--upgraded"
};
var strings4 = {
  ARIA_CHECKED_ATTR: "aria-checked",
  ARIA_CHECKED_INDETERMINATE_VALUE: "mixed",
  DATA_INDETERMINATE_ATTR: "data-indeterminate",
  NATIVE_CONTROL_SELECTOR: ".mdc-checkbox__native-control",
  TRANSITION_STATE_CHECKED: "checked",
  TRANSITION_STATE_INDETERMINATE: "indeterminate",
  TRANSITION_STATE_INIT: "init",
  TRANSITION_STATE_UNCHECKED: "unchecked"
};
var numbers3 = {
  ANIM_END_LATCH_MS: 250
};

// node_modules/@material/checkbox/foundation.js
var import_dist148 = __toESM(require_dist());
var import_dist149 = __toESM(require_dist2());
var import_dist150 = __toESM(require_dist3());
var MDCCheckboxFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCCheckboxFoundation2, _super);
    function MDCCheckboxFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCCheckboxFoundation2.defaultAdapter), adapter)) || this;
      _this.currentCheckState = strings4.TRANSITION_STATE_INIT;
      _this.currentAnimationClass = "";
      _this.animEndLatchTimer = 0;
      _this.enableAnimationEndHandler = false;
      return _this;
    }
    Object.defineProperty(MDCCheckboxFoundation2, "cssClasses", {
      get: function() {
        return cssClasses5;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "strings", {
      get: function() {
        return strings4;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "numbers", {
      get: function() {
        return numbers3;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckboxFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          forceLayout: function() {
            return void 0;
          },
          hasNativeControl: function() {
            return false;
          },
          isAttachedToDOM: function() {
            return false;
          },
          isChecked: function() {
            return false;
          },
          isIndeterminate: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          removeNativeControlAttr: function() {
            return void 0;
          },
          setNativeControlAttr: function() {
            return void 0;
          },
          setNativeControlDisabled: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCCheckboxFoundation2.prototype.init = function() {
      this.currentCheckState = this.determineCheckState();
      this.updateAriaChecked();
      this.adapter.addClass(cssClasses5.UPGRADED);
    };
    MDCCheckboxFoundation2.prototype.destroy = function() {
      clearTimeout(this.animEndLatchTimer);
    };
    MDCCheckboxFoundation2.prototype.setDisabled = function(disabled) {
      this.adapter.setNativeControlDisabled(disabled);
      if (disabled) {
        this.adapter.addClass(cssClasses5.DISABLED);
      } else {
        this.adapter.removeClass(cssClasses5.DISABLED);
      }
    };
    MDCCheckboxFoundation2.prototype.handleAnimationEnd = function() {
      var _this = this;
      if (!this.enableAnimationEndHandler) {
        return;
      }
      clearTimeout(this.animEndLatchTimer);
      this.animEndLatchTimer = setTimeout(function() {
        _this.adapter.removeClass(_this.currentAnimationClass);
        _this.enableAnimationEndHandler = false;
      }, numbers3.ANIM_END_LATCH_MS);
    };
    MDCCheckboxFoundation2.prototype.handleChange = function() {
      this.transitionCheckState();
    };
    MDCCheckboxFoundation2.prototype.transitionCheckState = function() {
      if (!this.adapter.hasNativeControl()) {
        return;
      }
      var oldState = this.currentCheckState;
      var newState = this.determineCheckState();
      if (oldState === newState) {
        return;
      }
      this.updateAriaChecked();
      var TRANSITION_STATE_UNCHECKED = strings4.TRANSITION_STATE_UNCHECKED;
      var SELECTED = cssClasses5.SELECTED;
      if (newState === TRANSITION_STATE_UNCHECKED) {
        this.adapter.removeClass(SELECTED);
      } else {
        this.adapter.addClass(SELECTED);
      }
      if (this.currentAnimationClass.length > 0) {
        clearTimeout(this.animEndLatchTimer);
        this.adapter.forceLayout();
        this.adapter.removeClass(this.currentAnimationClass);
      }
      this.currentAnimationClass = this.getTransitionAnimationClass(oldState, newState);
      this.currentCheckState = newState;
      if (this.adapter.isAttachedToDOM() && this.currentAnimationClass.length > 0) {
        this.adapter.addClass(this.currentAnimationClass);
        this.enableAnimationEndHandler = true;
      }
    };
    MDCCheckboxFoundation2.prototype.determineCheckState = function() {
      var TRANSITION_STATE_INDETERMINATE = strings4.TRANSITION_STATE_INDETERMINATE, TRANSITION_STATE_CHECKED = strings4.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings4.TRANSITION_STATE_UNCHECKED;
      if (this.adapter.isIndeterminate()) {
        return TRANSITION_STATE_INDETERMINATE;
      }
      return this.adapter.isChecked() ? TRANSITION_STATE_CHECKED : TRANSITION_STATE_UNCHECKED;
    };
    MDCCheckboxFoundation2.prototype.getTransitionAnimationClass = function(oldState, newState) {
      var TRANSITION_STATE_INIT = strings4.TRANSITION_STATE_INIT, TRANSITION_STATE_CHECKED = strings4.TRANSITION_STATE_CHECKED, TRANSITION_STATE_UNCHECKED = strings4.TRANSITION_STATE_UNCHECKED;
      var _a2 = MDCCheckboxFoundation2.cssClasses, ANIM_UNCHECKED_CHECKED = _a2.ANIM_UNCHECKED_CHECKED, ANIM_UNCHECKED_INDETERMINATE = _a2.ANIM_UNCHECKED_INDETERMINATE, ANIM_CHECKED_UNCHECKED = _a2.ANIM_CHECKED_UNCHECKED, ANIM_CHECKED_INDETERMINATE = _a2.ANIM_CHECKED_INDETERMINATE, ANIM_INDETERMINATE_CHECKED = _a2.ANIM_INDETERMINATE_CHECKED, ANIM_INDETERMINATE_UNCHECKED = _a2.ANIM_INDETERMINATE_UNCHECKED;
      switch (oldState) {
        case TRANSITION_STATE_INIT:
          if (newState === TRANSITION_STATE_UNCHECKED) {
            return "";
          }
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
        case TRANSITION_STATE_UNCHECKED:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_UNCHECKED_CHECKED : ANIM_UNCHECKED_INDETERMINATE;
        case TRANSITION_STATE_CHECKED:
          return newState === TRANSITION_STATE_UNCHECKED ? ANIM_CHECKED_UNCHECKED : ANIM_CHECKED_INDETERMINATE;
        default:
          return newState === TRANSITION_STATE_CHECKED ? ANIM_INDETERMINATE_CHECKED : ANIM_INDETERMINATE_UNCHECKED;
      }
    };
    MDCCheckboxFoundation2.prototype.updateAriaChecked = function() {
      if (this.adapter.isIndeterminate()) {
        this.adapter.setNativeControlAttr(strings4.ARIA_CHECKED_ATTR, strings4.ARIA_CHECKED_INDETERMINATE_VALUE);
      } else {
        this.adapter.removeNativeControlAttr(strings4.ARIA_CHECKED_ATTR);
      }
    };
    return MDCCheckboxFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/checkbox/component.js
var CB_PROTO_PROPS = ["checked", "indeterminate"];
var MDCCheckbox = (
  /** @class */
  function(_super) {
    __extends(MDCCheckbox2, _super);
    function MDCCheckbox2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rippleSurface = _this.createRipple();
      return _this;
    }
    MDCCheckbox2.attachTo = function(root) {
      return new MDCCheckbox2(root);
    };
    Object.defineProperty(MDCCheckbox2.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckbox2.prototype, "checked", {
      get: function() {
        return this.getNativeControl().checked;
      },
      set: function(checked) {
        this.getNativeControl().checked = checked;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckbox2.prototype, "indeterminate", {
      get: function() {
        return this.getNativeControl().indeterminate;
      },
      set: function(indeterminate) {
        this.getNativeControl().indeterminate = indeterminate;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckbox2.prototype, "disabled", {
      get: function() {
        return this.getNativeControl().disabled;
      },
      set: function(disabled) {
        this.foundation.setDisabled(disabled);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCheckbox2.prototype, "value", {
      get: function() {
        return this.getNativeControl().value;
      },
      set: function(value) {
        this.getNativeControl().value = value;
      },
      enumerable: false,
      configurable: true
    });
    MDCCheckbox2.prototype.initialize = function() {
      var DATA_INDETERMINATE_ATTR = strings4.DATA_INDETERMINATE_ATTR;
      this.getNativeControl().indeterminate = this.getNativeControl().getAttribute(DATA_INDETERMINATE_ATTR) === "true";
      this.getNativeControl().removeAttribute(DATA_INDETERMINATE_ATTR);
    };
    MDCCheckbox2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleChange = function() {
        _this.foundation.handleChange();
      };
      this.handleAnimationEnd = function() {
        _this.foundation.handleAnimationEnd();
      };
      this.getNativeControl().addEventListener("change", this.handleChange);
      this.listen(getCorrectEventName(window, "animationend"), this.handleAnimationEnd);
      this.installPropertyChangeHooks();
    };
    MDCCheckbox2.prototype.destroy = function() {
      this.rippleSurface.destroy();
      this.getNativeControl().removeEventListener("change", this.handleChange);
      this.unlisten(getCorrectEventName(window, "animationend"), this.handleAnimationEnd);
      this.uninstallPropertyChangeHooks();
      _super.prototype.destroy.call(this);
    };
    MDCCheckbox2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        forceLayout: function() {
          return _this.root.offsetWidth;
        },
        hasNativeControl: function() {
          return !!_this.getNativeControl();
        },
        isAttachedToDOM: function() {
          return Boolean(_this.root.parentNode);
        },
        isChecked: function() {
          return _this.checked;
        },
        isIndeterminate: function() {
          return _this.indeterminate;
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        removeNativeControlAttr: function(attr) {
          _this.getNativeControl().removeAttribute(attr);
        },
        setNativeControlAttr: function(attr, value) {
          _this.getNativeControl().setAttribute(attr, value);
        },
        setNativeControlDisabled: function(disabled) {
          _this.getNativeControl().disabled = disabled;
        }
      };
      return new MDCCheckboxFoundation(adapter);
    };
    MDCCheckbox2.prototype.createRipple = function() {
      var _this = this;
      var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { deregisterInteractionHandler: function(evtType, handler) {
        _this.getNativeControl().removeEventListener(evtType, handler, applyPassive());
      }, isSurfaceActive: function() {
        return matches(_this.getNativeControl(), ":active");
      }, isUnbounded: function() {
        return true;
      }, registerInteractionHandler: function(evtType, handler) {
        _this.getNativeControl().addEventListener(evtType, handler, applyPassive());
      } });
      return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
    };
    MDCCheckbox2.prototype.installPropertyChangeHooks = function() {
      var e_1, _a2;
      var _this = this;
      var nativeCb = this.getNativeControl();
      var cbProto = Object.getPrototypeOf(nativeCb);
      var _loop_1 = function(controlState2) {
        var desc = Object.getOwnPropertyDescriptor(cbProto, controlState2);
        if (!validDescriptor(desc)) {
          return { value: void 0 };
        }
        var nativeGetter = desc.get;
        var nativeCbDesc = {
          configurable: desc.configurable,
          enumerable: desc.enumerable,
          get: nativeGetter,
          set: function(state) {
            desc.set.call(nativeCb, state);
            _this.foundation.handleChange();
          }
        };
        Object.defineProperty(nativeCb, controlState2, nativeCbDesc);
      };
      try {
        for (var CB_PROTO_PROPS_1 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next(); !CB_PROTO_PROPS_1_1.done; CB_PROTO_PROPS_1_1 = CB_PROTO_PROPS_1.next()) {
          var controlState = CB_PROTO_PROPS_1_1.value;
          var state_1 = _loop_1(controlState);
          if (typeof state_1 === "object")
            return state_1.value;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (CB_PROTO_PROPS_1_1 && !CB_PROTO_PROPS_1_1.done && (_a2 = CB_PROTO_PROPS_1.return)) _a2.call(CB_PROTO_PROPS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    MDCCheckbox2.prototype.uninstallPropertyChangeHooks = function() {
      var e_2, _a2;
      var nativeCb = this.getNativeControl();
      var cbProto = Object.getPrototypeOf(nativeCb);
      try {
        for (var CB_PROTO_PROPS_2 = __values(CB_PROTO_PROPS), CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next(); !CB_PROTO_PROPS_2_1.done; CB_PROTO_PROPS_2_1 = CB_PROTO_PROPS_2.next()) {
          var controlState = CB_PROTO_PROPS_2_1.value;
          var desc = Object.getOwnPropertyDescriptor(cbProto, controlState);
          if (!validDescriptor(desc)) {
            return;
          }
          Object.defineProperty(nativeCb, controlState, desc);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (CB_PROTO_PROPS_2_1 && !CB_PROTO_PROPS_2_1.done && (_a2 = CB_PROTO_PROPS_2.return)) _a2.call(CB_PROTO_PROPS_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    };
    MDCCheckbox2.prototype.getNativeControl = function() {
      var NATIVE_CONTROL_SELECTOR = strings4.NATIVE_CONTROL_SELECTOR;
      var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
      if (!el) {
        throw new Error("Checkbox component requires a " + NATIVE_CONTROL_SELECTOR + " element");
      }
      return el;
    };
    return MDCCheckbox2;
  }(MDCComponent)
);
function validDescriptor(inputPropDesc) {
  return !!inputPropDesc && typeof inputPropDesc.set === "function";
}

// node_modules/@aurelia-mdc-web/checkbox/dist/mdc-checkbox.html?raw
var mdc_checkbox_default = `<template class="mdc-checkbox \${touch ? 'mdc-checkbox--touch' : ''}"
  mdc-ripple="no-class.bind: true; input.bind: nativeControl_; unbounded.bind: true; disabled.bind: disableRipple">
  <input type="checkbox" class="mdc-checkbox__native-control" id="\${id}" ref="nativeControl_"
    change.trigger="handleChange_()" />
  <div class="mdc-checkbox__background">
    <svg class="mdc-checkbox__checkmark" viewBox="0 0 24 24">
      <path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59" />
    </svg>
    <div class="mdc-checkbox__mixedmark"></div>
  </div>
  <div class="mdc-checkbox__ripple"></div>
</template>
`;

// node_modules/@aurelia-mdc-web/checkbox/dist/mdc-checkbox.js
var checkboxId = 0;
var MdcCheckbox = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-checkbox", template: mdc_checkbox_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent4;
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  let _disableRipple_decorators;
  let _disableRipple_initializers = [];
  let _disableRipple_extraInitializers = [];
  let _indeterminateToChecked_decorators;
  let _indeterminateToChecked_initializers = [];
  let _indeterminateToChecked_extraInitializers = [];
  let _indeterminate_decorators;
  let _indeterminate_initializers = [];
  let _indeterminate_extraInitializers = [];
  var MdcCheckbox2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.id = `mdc-checkbox-${++checkboxId}-input`;
      this.disabled = __runInitializers(this, _disabled_initializers, void 0);
      this.touch = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _touch_initializers, void 0));
      this.disableRipple = (__runInitializers(this, _touch_extraInitializers), __runInitializers(this, _disableRipple_initializers, void 0));
      this.indeterminateToChecked = (__runInitializers(this, _disableRipple_extraInitializers), __runInitializers(this, _indeterminateToChecked_initializers, true));
      this.initialChecked = __runInitializers(this, _indeterminateToChecked_extraInitializers);
      this.indeterminate = __runInitializers(this, _indeterminate_initializers, void 0);
      __runInitializers(this, _indeterminate_extraInitializers);
      defineMdcCheckboxElementApis(this.root);
    }
    disabledChanged() {
      if (this.nativeControl_) {
        this.nativeControl_.disabled = this.disabled;
      }
    }
    get checked() {
      if (this.nativeControl_) {
        return this.nativeControl_.checked;
      } else {
        return this.initialChecked ?? false;
      }
    }
    /**
     * Whether the checkbox is checked.
     */
    set checked(checked) {
      if (this.nativeControl_) {
        this.nativeControl_.checked = checked;
      } else {
        this.initialChecked = checked;
      }
    }
    indeterminateChanged() {
      var _a2;
      if (this.nativeControl_) {
        this.nativeControl_.indeterminate = this.indeterminate;
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChange();
    }
    get value() {
      return this.nativeControl_.value;
    }
    set value(value) {
      this.nativeControl_.value = value;
    }
    attaching() {
      this.listen(getCorrectEventName(window, "animationend"), this.handleAnimationEnd_);
      if (this.root.hasAttribute("checked")) {
        const attributeValue = this.root.getAttribute("checked");
        if (attributeValue || attributeValue === "") {
          this.root.checked = true;
        }
      }
      if (this.root.hasAttribute("indeterminate")) {
        const attributeValue = this.root.getAttribute("indeterminate");
        if (attributeValue || attributeValue === "") {
          this.root.indeterminate = true;
        }
      }
    }
    initialSyncWithDOM() {
      this.disabledChanged();
      if (this.initialChecked !== void 0) {
        this.checked = this.initialChecked;
      }
    }
    destroy() {
      this.unlisten(getCorrectEventName(window, "animationend"), this.handleAnimationEnd_);
    }
    handleChange_() {
      var _a2;
      if (this.indeterminate) {
        this.indeterminate = false;
        this.checked = this.indeterminateToChecked;
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChange();
    }
    handleAnimationEnd_() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnimationEnd();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        forceLayout: () => this.root.offsetWidth,
        hasNativeControl: () => !!this.nativeControl_,
        isAttachedToDOM: () => Boolean(this.root.parentNode),
        isChecked: () => this.checked,
        isIndeterminate: () => this.indeterminate,
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        removeNativeControlAttr: (attr) => {
          this.nativeControl_.removeAttribute(attr);
        },
        setNativeControlAttr: (attr, value) => {
          this.nativeControl_.setAttribute(attr, value);
        },
        setNativeControlDisabled: (disabled) => {
          this.nativeControl_.disabled = disabled;
        }
      };
      return new MDCCheckboxFoundation(adapter);
    }
    /**
     * Set focus to the checkbox.
     */
    focus() {
      this.nativeControl_.focus();
    }
    /**
     * Moves focus from the checkbox.
     */
    blur() {
      this.nativeControl_.blur();
    }
  };
  __setFunctionName(_classThis, "MdcCheckbox");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _disabled_decorators = [bindable({ set: booleanAttr4 })];
    _touch_decorators = [bindable({ set: booleanAttr4 })];
    _disableRipple_decorators = [bindable({ set: booleanAttr4 })];
    _indeterminateToChecked_decorators = [bindable({ set: booleanAttr4 })];
    _indeterminate_decorators = [bindable({ set: booleanAttr4, mode: BindingMode.twoWay })];
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, null, _disableRipple_decorators, { kind: "field", name: "disableRipple", static: false, private: false, access: { has: (obj) => "disableRipple" in obj, get: (obj) => obj.disableRipple, set: (obj, value) => {
      obj.disableRipple = value;
    } }, metadata: _metadata }, _disableRipple_initializers, _disableRipple_extraInitializers);
    __esDecorate(null, null, _indeterminateToChecked_decorators, { kind: "field", name: "indeterminateToChecked", static: false, private: false, access: { has: (obj) => "indeterminateToChecked" in obj, get: (obj) => obj.indeterminateToChecked, set: (obj, value) => {
      obj.indeterminateToChecked = value;
    } }, metadata: _metadata }, _indeterminateToChecked_initializers, _indeterminateToChecked_extraInitializers);
    __esDecorate(null, null, _indeterminate_decorators, { kind: "field", name: "indeterminate", static: false, private: false, access: { has: (obj) => "indeterminate" in obj, get: (obj) => obj.indeterminate, set: (obj, value) => {
      obj.indeterminate = value;
    } }, metadata: _metadata }, _indeterminate_initializers, _indeterminate_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCheckbox2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCheckbox2 = _classThis;
})();
function defineMdcCheckboxElementApis(element) {
  Object.defineProperties(element, {
    type: {
      value: "checkbox"
    },
    checked: {
      get() {
        return CustomElement.for(this).viewModel.checked;
      },
      set(value) {
        CustomElement.for(this).viewModel.checked = value;
      },
      configurable: true
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    },
    blur: {
      value() {
        CustomElement.for(this).viewModel.blur();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/ripple/dist/index.js
var import_dist193 = __toESM(require_dist());
var import_dist194 = __toESM(require_dist2());
var import_dist195 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/dist/mdc-ripple.js
var import_dist190 = __toESM(require_dist());
var import_dist191 = __toESM(require_dist2());
var import_dist192 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist178 = __toESM(require_dist());
var import_dist179 = __toESM(require_dist2());
var import_dist180 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist163 = __toESM(require_dist());
var import_dist164 = __toESM(require_dist2());
var import_dist165 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist160 = __toESM(require_dist());
var import_dist161 = __toESM(require_dist2());
var import_dist162 = __toESM(require_dist3());
function booleanAttr5(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap5 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr5 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr5 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr5 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist166 = __toESM(require_dist());
var import_dist167 = __toESM(require_dist2());
var import_dist168 = __toESM(require_dist3());
var MdcPromisifyReference5 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist169 = __toESM(require_dist());
var import_dist170 = __toESM(require_dist2());
var import_dist171 = __toESM(require_dist3());
var MdcComponent5 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist172 = __toESM(require_dist());
var import_dist173 = __toESM(require_dist2());
var import_dist174 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist175 = __toESM(require_dist());
var import_dist176 = __toESM(require_dist2());
var import_dist177 = __toESM(require_dist3());

// node_modules/@material/ripple/index.js
var import_dist187 = __toESM(require_dist());
var import_dist188 = __toESM(require_dist2());
var import_dist189 = __toESM(require_dist3());

// node_modules/@material/ripple/adapter.js
var import_dist181 = __toESM(require_dist());
var import_dist182 = __toESM(require_dist2());
var import_dist183 = __toESM(require_dist3());

// node_modules/@material/ripple/types.js
var import_dist184 = __toESM(require_dist());
var import_dist185 = __toESM(require_dist2());
var import_dist186 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/ripple/dist/mdc-ripple.js
var MdcRipple = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-ripple")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent5;
  let _input_decorators;
  let _input_initializers = [];
  let _input_extraInitializers = [];
  let _surface_decorators;
  let _surface_initializers = [];
  let _surface_extraInitializers = [];
  let _computeBoundingRect_decorators;
  let _computeBoundingRect_initializers = [];
  let _computeBoundingRect_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _unbounded_decorators;
  let _unbounded_initializers = [];
  let _unbounded_extraInitializers = [];
  let _activeSurface_decorators;
  let _activeSurface_initializers = [];
  let _activeSurface_extraInitializers = [];
  let _noClass_decorators;
  let _noClass_initializers = [];
  let _noClass_extraInitializers = [];
  let _primary_decorators;
  let _primary_initializers = [];
  let _primary_extraInitializers = [];
  let _accent_decorators;
  let _accent_initializers = [];
  let _accent_extraInitializers = [];
  var MdcRipple2 = _classThis = class extends _classSuper {
    unboundedChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setUnbounded(Boolean(this.unbounded));
    }
    attaching() {
      if (!this.noClass) {
        (this.surface ?? this.root).classList.add("mdc-ripple-surface");
        if (this.primary) {
          (this.surface ?? this.root).classList.add("mdc-ripple-surface--primary");
        }
        if (this.accent) {
          (this.surface ?? this.root).classList.add("mdc-ripple-surface--accent");
        }
      }
    }
    initialSyncWithDOM() {
      this.unboundedChanged();
    }
    activate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activate();
    }
    deactivate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.deactivate();
    }
    layout() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    getDefaultFoundation() {
      return new MDCRippleFoundation(this.createAdapter());
    }
    createAdapter() {
      return {
        addClass: (className) => (this.surface ?? this.root).classList.add(className),
        browserSupportsCssVars: () => util_exports.supportsCssVariables(window),
        computeBoundingRect: this.computeBoundingRect ?? (() => (this.surface ?? this.root).getBoundingClientRect()),
        containsEventTarget: (target) => this.root.contains(target),
        deregisterDocumentInteractionHandler: (evtType, handler) => document.documentElement.removeEventListener(evtType, handler, applyPassive()),
        deregisterInteractionHandler: (evtType, handler) => {
          if (this.input) {
            this.input.removeEventListener(evtType, handler, applyPassive());
          } else {
            this.root.removeEventListener(evtType, handler, applyPassive());
          }
        },
        deregisterResizeHandler: (handler) => window.removeEventListener("resize", handler),
        getWindowPageOffset: () => ({ x: window.pageXOffset, y: window.pageYOffset }),
        isSurfaceActive: () => this.activeSurface && matches(this.input ?? this.root, ":active"),
        isSurfaceDisabled: () => this.disabled,
        isUnbounded: () => this.unbounded,
        registerDocumentInteractionHandler: (evtType, handler) => document.documentElement.addEventListener(evtType, handler, applyPassive()),
        registerInteractionHandler: (evtType, handler) => {
          if (this.input) {
            this.input.addEventListener(evtType, handler, applyPassive());
          } else {
            this.root.addEventListener(evtType, handler, applyPassive());
          }
        },
        registerResizeHandler: (handler) => window.addEventListener("resize", handler),
        removeClass: (className) => (this.surface ?? this.root).classList.remove(className),
        updateCssVariable: (varName, value) => (this.surface ?? this.root).style.setProperty(varName, value)
      };
    }
    constructor() {
      super(...arguments);
      this.input = __runInitializers(this, _input_initializers, void 0);
      this.surface = (__runInitializers(this, _input_extraInitializers), __runInitializers(this, _surface_initializers, void 0));
      this.computeBoundingRect = (__runInitializers(this, _surface_extraInitializers), __runInitializers(this, _computeBoundingRect_initializers, void 0));
      this.disabled = (__runInitializers(this, _computeBoundingRect_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      this.unbounded = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _unbounded_initializers, void 0));
      this.activeSurface = (__runInitializers(this, _unbounded_extraInitializers), __runInitializers(this, _activeSurface_initializers, void 0));
      this.noClass = (__runInitializers(this, _activeSurface_extraInitializers), __runInitializers(this, _noClass_initializers, void 0));
      this.primary = (__runInitializers(this, _noClass_extraInitializers), __runInitializers(this, _primary_initializers, void 0));
      this.accent = (__runInitializers(this, _primary_extraInitializers), __runInitializers(this, _accent_initializers, void 0));
      __runInitializers(this, _accent_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcRipple");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _input_decorators = [bindable()];
    _surface_decorators = [bindable()];
    _computeBoundingRect_decorators = [bindable()];
    _disabled_decorators = [bindable({ set: booleanAttr5 })];
    _unbounded_decorators = [bindable({ set: booleanAttr5 })];
    _activeSurface_decorators = [bindable({ set: booleanAttr5 })];
    _noClass_decorators = [bindable({ set: booleanAttr5 })];
    _primary_decorators = [bindable({ set: booleanAttr5 })];
    _accent_decorators = [bindable({ set: booleanAttr5 })];
    __esDecorate(null, null, _input_decorators, { kind: "field", name: "input", static: false, private: false, access: { has: (obj) => "input" in obj, get: (obj) => obj.input, set: (obj, value) => {
      obj.input = value;
    } }, metadata: _metadata }, _input_initializers, _input_extraInitializers);
    __esDecorate(null, null, _surface_decorators, { kind: "field", name: "surface", static: false, private: false, access: { has: (obj) => "surface" in obj, get: (obj) => obj.surface, set: (obj, value) => {
      obj.surface = value;
    } }, metadata: _metadata }, _surface_initializers, _surface_extraInitializers);
    __esDecorate(null, null, _computeBoundingRect_decorators, { kind: "field", name: "computeBoundingRect", static: false, private: false, access: { has: (obj) => "computeBoundingRect" in obj, get: (obj) => obj.computeBoundingRect, set: (obj, value) => {
      obj.computeBoundingRect = value;
    } }, metadata: _metadata }, _computeBoundingRect_initializers, _computeBoundingRect_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _unbounded_decorators, { kind: "field", name: "unbounded", static: false, private: false, access: { has: (obj) => "unbounded" in obj, get: (obj) => obj.unbounded, set: (obj, value) => {
      obj.unbounded = value;
    } }, metadata: _metadata }, _unbounded_initializers, _unbounded_extraInitializers);
    __esDecorate(null, null, _activeSurface_decorators, { kind: "field", name: "activeSurface", static: false, private: false, access: { has: (obj) => "activeSurface" in obj, get: (obj) => obj.activeSurface, set: (obj, value) => {
      obj.activeSurface = value;
    } }, metadata: _metadata }, _activeSurface_initializers, _activeSurface_extraInitializers);
    __esDecorate(null, null, _noClass_decorators, { kind: "field", name: "noClass", static: false, private: false, access: { has: (obj) => "noClass" in obj, get: (obj) => obj.noClass, set: (obj, value) => {
      obj.noClass = value;
    } }, metadata: _metadata }, _noClass_initializers, _noClass_extraInitializers);
    __esDecorate(null, null, _primary_decorators, { kind: "field", name: "primary", static: false, private: false, access: { has: (obj) => "primary" in obj, get: (obj) => obj.primary, set: (obj, value) => {
      obj.primary = value;
    } }, metadata: _metadata }, _primary_initializers, _primary_extraInitializers);
    __esDecorate(null, null, _accent_decorators, { kind: "field", name: "accent", static: false, private: false, access: { has: (obj) => "accent" in obj, get: (obj) => obj.accent, set: (obj, value) => {
      obj.accent = value;
    } }, metadata: _metadata }, _accent_initializers, _accent_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcRipple2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcRipple2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/ripple/dist/index.js
var registered4 = false;
var RippleConfiguration = {
  register(container) {
    if (registered4) {
      return container;
    } else {
      registered4 = true;
      return container.register(MdcRipple);
    }
  }
};

// node_modules/@aurelia-mdc-web/checkbox/dist/index.js
var configured = false;
var CheckboxConfiguration = {
  register(container) {
    if (configured) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.tagName === "MDC-CHECKBOX" ? property === "checked" : false);
        nodeObserverLocator.useConfig("MDC-CHECKBOX", "checked", { events: ["change"], type: CheckedObserver });
      }).register(container);
      configured = true;
      return container.register(MdcCheckbox, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/chips/dist/index.js
var import_dist358 = __toESM(require_dist());
var import_dist359 = __toESM(require_dist2());
var import_dist360 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip/mdc-chip.js
var import_dist346 = __toESM(require_dist());
var import_dist347 = __toESM(require_dist2());
var import_dist348 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist217 = __toESM(require_dist());
var import_dist218 = __toESM(require_dist2());
var import_dist219 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist202 = __toESM(require_dist());
var import_dist203 = __toESM(require_dist2());
var import_dist204 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist199 = __toESM(require_dist());
var import_dist200 = __toESM(require_dist2());
var import_dist201 = __toESM(require_dist3());
function booleanAttr6(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap6 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr6 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr6 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr6 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist205 = __toESM(require_dist());
var import_dist206 = __toESM(require_dist2());
var import_dist207 = __toESM(require_dist3());
var MdcPromisifyReference6 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist208 = __toESM(require_dist());
var import_dist209 = __toESM(require_dist2());
var import_dist210 = __toESM(require_dist3());
var MdcComponent6 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist211 = __toESM(require_dist());
var import_dist212 = __toESM(require_dist2());
var import_dist213 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist214 = __toESM(require_dist());
var import_dist215 = __toESM(require_dist2());
var import_dist216 = __toESM(require_dist3());

// node_modules/@material/chips/chip/foundation.js
var import_dist229 = __toESM(require_dist());
var import_dist230 = __toESM(require_dist2());
var import_dist231 = __toESM(require_dist3());

// node_modules/@material/animation/animationframe.js
var import_dist220 = __toESM(require_dist());
var import_dist221 = __toESM(require_dist2());
var import_dist222 = __toESM(require_dist3());
var AnimationFrame = (
  /** @class */
  function() {
    function AnimationFrame2() {
      this.rafIDs = /* @__PURE__ */ new Map();
    }
    AnimationFrame2.prototype.request = function(key, callback) {
      var _this = this;
      this.cancel(key);
      var frameID = requestAnimationFrame(function(frame) {
        _this.rafIDs.delete(key);
        callback(frame);
      });
      this.rafIDs.set(key, frameID);
    };
    AnimationFrame2.prototype.cancel = function(key) {
      var rafID = this.rafIDs.get(key);
      if (rafID) {
        cancelAnimationFrame(rafID);
        this.rafIDs.delete(key);
      }
    };
    AnimationFrame2.prototype.cancelAll = function() {
      var _this = this;
      this.rafIDs.forEach(function(_, key) {
        _this.cancel(key);
      });
    };
    AnimationFrame2.prototype.getQueue = function() {
      var queue = [];
      this.rafIDs.forEach(function(_, key) {
        queue.push(key);
      });
      return queue;
    };
    return AnimationFrame2;
  }()
);

// node_modules/@material/chips/action/constants.js
var import_dist223 = __toESM(require_dist());
var import_dist224 = __toESM(require_dist2());
var import_dist225 = __toESM(require_dist3());
var MDCChipActionCssClasses;
(function(MDCChipActionCssClasses2) {
  MDCChipActionCssClasses2["PRIMARY_ACTION"] = "mdc-evolution-chip__action--primary";
  MDCChipActionCssClasses2["TRAILING_ACTION"] = "mdc-evolution-chip__action--trailing";
  MDCChipActionCssClasses2["CHIP_ROOT"] = "mdc-evolution-chip";
})(MDCChipActionCssClasses || (MDCChipActionCssClasses = {}));
var MDCChipActionInteractionTrigger;
(function(MDCChipActionInteractionTrigger2) {
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["CLICK"] = 1] = "CLICK";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["DELETE_KEY"] = 3] = "DELETE_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
  MDCChipActionInteractionTrigger2[MDCChipActionInteractionTrigger2["ENTER_KEY"] = 5] = "ENTER_KEY";
})(MDCChipActionInteractionTrigger || (MDCChipActionInteractionTrigger = {}));
var MDCChipActionType;
(function(MDCChipActionType2) {
  MDCChipActionType2[MDCChipActionType2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  MDCChipActionType2[MDCChipActionType2["PRIMARY"] = 1] = "PRIMARY";
  MDCChipActionType2[MDCChipActionType2["TRAILING"] = 2] = "TRAILING";
})(MDCChipActionType || (MDCChipActionType = {}));
var MDCChipActionEvents;
(function(MDCChipActionEvents2) {
  MDCChipActionEvents2["INTERACTION"] = "MDCChipAction:interaction";
  MDCChipActionEvents2["NAVIGATION"] = "MDCChipAction:navigation";
})(MDCChipActionEvents || (MDCChipActionEvents = {}));
var MDCChipActionFocusBehavior;
(function(MDCChipActionFocusBehavior2) {
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["FOCUSABLE"] = 0] = "FOCUSABLE";
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["FOCUSABLE_AND_FOCUSED"] = 1] = "FOCUSABLE_AND_FOCUSED";
  MDCChipActionFocusBehavior2[MDCChipActionFocusBehavior2["NOT_FOCUSABLE"] = 2] = "NOT_FOCUSABLE";
})(MDCChipActionFocusBehavior || (MDCChipActionFocusBehavior = {}));
var MDCChipActionAttributes;
(function(MDCChipActionAttributes2) {
  MDCChipActionAttributes2["ARIA_DISABLED"] = "aria-disabled";
  MDCChipActionAttributes2["ARIA_HIDDEN"] = "aria-hidden";
  MDCChipActionAttributes2["ARIA_SELECTED"] = "aria-selected";
  MDCChipActionAttributes2["DATA_DELETABLE"] = "data-mdc-deletable";
  MDCChipActionAttributes2["DISABLED"] = "disabled";
  MDCChipActionAttributes2["ROLE"] = "role";
  MDCChipActionAttributes2["TAB_INDEX"] = "tabindex";
})(MDCChipActionAttributes || (MDCChipActionAttributes = {}));

// node_modules/@material/chips/chip/constants.js
var import_dist226 = __toESM(require_dist());
var import_dist227 = __toESM(require_dist2());
var import_dist228 = __toESM(require_dist3());
var MDCChipCssClasses;
(function(MDCChipCssClasses2) {
  MDCChipCssClasses2["SELECTING"] = "mdc-evolution-chip--selecting";
  MDCChipCssClasses2["DESELECTING"] = "mdc-evolution-chip--deselecting";
  MDCChipCssClasses2["SELECTING_WITH_PRIMARY_ICON"] = "mdc-evolution-chip--selecting-with-primary-icon";
  MDCChipCssClasses2["DESELECTING_WITH_PRIMARY_ICON"] = "mdc-evolution-chip--deselecting-with-primary-icon";
  MDCChipCssClasses2["DISABLED"] = "mdc-evolution-chip--disabled";
  MDCChipCssClasses2["ENTER"] = "mdc-evolution-chip--enter";
  MDCChipCssClasses2["EXIT"] = "mdc-evolution-chip--exit";
  MDCChipCssClasses2["SELECTED"] = "mdc-evolution-chip--selected";
  MDCChipCssClasses2["HIDDEN"] = "mdc-evolution-chip--hidden";
  MDCChipCssClasses2["WITH_PRIMARY_ICON"] = "mdc-evolution-chip--with-primary-icon";
})(MDCChipCssClasses || (MDCChipCssClasses = {}));
var MDCChipEvents;
(function(MDCChipEvents2) {
  MDCChipEvents2["INTERACTION"] = "MDCChip:interaction";
  MDCChipEvents2["NAVIGATION"] = "MDCChip:navigation";
  MDCChipEvents2["ANIMATION"] = "MDCChip:animation";
})(MDCChipEvents || (MDCChipEvents = {}));
var MDCChipAttributes;
(function(MDCChipAttributes2) {
  MDCChipAttributes2["DATA_REMOVED_ANNOUNCEMENT"] = "data-mdc-removed-announcement";
  MDCChipAttributes2["DATA_ADDED_ANNOUNCEMENT"] = "data-mdc-added-announcement";
})(MDCChipAttributes || (MDCChipAttributes = {}));
var MDCChipAnimation;
(function(MDCChipAnimation2) {
  MDCChipAnimation2["ENTER"] = "mdc-evolution-chip-enter";
  MDCChipAnimation2["EXIT"] = "mdc-evolution-chip-exit";
})(MDCChipAnimation || (MDCChipAnimation = {}));

// node_modules/@material/chips/chip/foundation.js
var Direction;
(function(Direction3) {
  Direction3[Direction3["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  Direction3[Direction3["LEFT"] = 1] = "LEFT";
  Direction3[Direction3["RIGHT"] = 2] = "RIGHT";
})(Direction || (Direction = {}));
var AnimationKeys;
(function(AnimationKeys5) {
  AnimationKeys5["SELECTION"] = "selection";
  AnimationKeys5["EXIT"] = "exit";
})(AnimationKeys || (AnimationKeys = {}));
var MDCChipFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipFoundation3, _super);
    function MDCChipFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation3.defaultAdapter), adapter)) || this;
      _this.animFrame = new AnimationFrame();
      return _this;
    }
    Object.defineProperty(MDCChipFoundation3, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          emitEvent: function() {
            return void 0;
          },
          getActions: function() {
            return [];
          },
          getAttribute: function() {
            return null;
          },
          getElementID: function() {
            return "";
          },
          getOffsetWidth: function() {
            return 0;
          },
          hasClass: function() {
            return false;
          },
          isActionDisabled: function() {
            return false;
          },
          isActionFocusable: function() {
            return false;
          },
          isActionSelectable: function() {
            return false;
          },
          isActionSelected: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          setActionDisabled: function() {
            return void 0;
          },
          setActionFocus: function() {
            return void 0;
          },
          setActionSelected: function() {
            return void 0;
          },
          setStyleProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipFoundation3.prototype.destroy = function() {
      this.animFrame.cancelAll();
    };
    MDCChipFoundation3.prototype.getElementID = function() {
      return this.adapter.getElementID();
    };
    MDCChipFoundation3.prototype.setDisabled = function(isDisabled) {
      var e_1, _a2;
      var actions = this.getActions();
      try {
        for (var actions_1 = __values(actions), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
          var action = actions_1_1.value;
          this.adapter.setActionDisabled(action, isDisabled);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (actions_1_1 && !actions_1_1.done && (_a2 = actions_1.return)) _a2.call(actions_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      if (isDisabled) {
        this.adapter.addClass(MDCChipCssClasses.DISABLED);
      } else {
        this.adapter.removeClass(MDCChipCssClasses.DISABLED);
      }
    };
    MDCChipFoundation3.prototype.isDisabled = function() {
      var e_2, _a2;
      var actions = this.getActions();
      try {
        for (var actions_2 = __values(actions), actions_2_1 = actions_2.next(); !actions_2_1.done; actions_2_1 = actions_2.next()) {
          var action = actions_2_1.value;
          if (this.adapter.isActionDisabled(action)) {
            return true;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (actions_2_1 && !actions_2_1.done && (_a2 = actions_2.return)) _a2.call(actions_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return false;
    };
    MDCChipFoundation3.prototype.getActions = function() {
      return this.adapter.getActions();
    };
    MDCChipFoundation3.prototype.isActionFocusable = function(action) {
      return this.adapter.isActionFocusable(action);
    };
    MDCChipFoundation3.prototype.isActionSelectable = function(action) {
      return this.adapter.isActionSelectable(action);
    };
    MDCChipFoundation3.prototype.isActionSelected = function(action) {
      return this.adapter.isActionSelected(action);
    };
    MDCChipFoundation3.prototype.setActionFocus = function(action, focus) {
      this.adapter.setActionFocus(action, focus);
    };
    MDCChipFoundation3.prototype.setActionSelected = function(action, isSelected) {
      this.adapter.setActionSelected(action, isSelected);
      this.animateSelection(isSelected);
    };
    MDCChipFoundation3.prototype.startAnimation = function(animation) {
      if (animation === MDCChipAnimation.ENTER) {
        this.adapter.addClass(MDCChipCssClasses.ENTER);
        return;
      }
      if (animation === MDCChipAnimation.EXIT) {
        this.adapter.addClass(MDCChipCssClasses.EXIT);
        return;
      }
    };
    MDCChipFoundation3.prototype.handleAnimationEnd = function(event) {
      var _this = this;
      var animationName = event.animationName;
      if (animationName === MDCChipAnimation.ENTER) {
        this.adapter.removeClass(MDCChipCssClasses.ENTER);
        this.adapter.emitEvent(MDCChipEvents.ANIMATION, {
          chipID: this.getElementID(),
          animation: MDCChipAnimation.ENTER,
          addedAnnouncement: this.getAddedAnnouncement(),
          isComplete: true
        });
        return;
      }
      if (animationName === MDCChipAnimation.EXIT) {
        this.adapter.removeClass(MDCChipCssClasses.EXIT);
        this.adapter.addClass(MDCChipCssClasses.HIDDEN);
        var width = this.adapter.getOffsetWidth();
        this.adapter.setStyleProperty("width", width + "px");
        this.animFrame.request(AnimationKeys.EXIT, function() {
          _this.animFrame.request(AnimationKeys.EXIT, function() {
            _this.adapter.setStyleProperty("width", "0");
          });
        });
      }
    };
    MDCChipFoundation3.prototype.handleTransitionEnd = function() {
      if (!this.adapter.hasClass(MDCChipCssClasses.HIDDEN))
        return;
      this.adapter.emitEvent(MDCChipEvents.ANIMATION, {
        chipID: this.getElementID(),
        animation: MDCChipAnimation.EXIT,
        removedAnnouncement: this.getRemovedAnnouncement(),
        isComplete: true
      });
    };
    MDCChipFoundation3.prototype.handleActionInteraction = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, actionID = detail.actionID;
      var isSelectable = this.adapter.isActionSelectable(source);
      var isSelected = this.adapter.isActionSelected(source);
      this.adapter.emitEvent(MDCChipEvents.INTERACTION, {
        chipID: this.getElementID(),
        shouldRemove: this.shouldRemove(detail),
        actionID,
        isSelectable,
        isSelected,
        source
      });
    };
    MDCChipFoundation3.prototype.handleActionNavigation = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, key = detail.key;
      var isRTL = this.adapter.isRTL();
      var isTrailingActionFocusable = this.adapter.isActionFocusable(MDCChipActionType.TRAILING);
      var isPrimaryActionFocusable = this.adapter.isActionFocusable(MDCChipActionType.PRIMARY);
      var dir = this.directionFromKey(key, isRTL);
      var shouldNavigateToTrailing = source === MDCChipActionType.PRIMARY && dir === Direction.RIGHT && isTrailingActionFocusable;
      var shouldNavigateToPrimary = source === MDCChipActionType.TRAILING && dir === Direction.LEFT && isPrimaryActionFocusable;
      if (shouldNavigateToTrailing) {
        this.navigateActions({ from: source, to: MDCChipActionType.TRAILING });
        return;
      }
      if (shouldNavigateToPrimary) {
        this.navigateActions({ from: source, to: MDCChipActionType.PRIMARY });
        return;
      }
      this.adapter.emitEvent(MDCChipEvents.NAVIGATION, {
        chipID: this.getElementID(),
        isRTL,
        source,
        key
      });
    };
    MDCChipFoundation3.prototype.directionFromKey = function(key, isRTL) {
      var isLeftKey = key === KEY.ARROW_LEFT;
      var isRightKey = key === KEY.ARROW_RIGHT;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction.LEFT;
      }
      if (!isRTL && isRightKey || isRTL && isLeftKey) {
        return Direction.RIGHT;
      }
      return Direction.UNSPECIFIED;
    };
    MDCChipFoundation3.prototype.navigateActions = function(nav) {
      this.adapter.setActionFocus(nav.from, MDCChipActionFocusBehavior.NOT_FOCUSABLE);
      this.adapter.setActionFocus(nav.to, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
    };
    MDCChipFoundation3.prototype.shouldRemove = function(_a2) {
      var source = _a2.source, trigger = _a2.trigger;
      if (trigger === MDCChipActionInteractionTrigger.BACKSPACE_KEY || trigger === MDCChipActionInteractionTrigger.DELETE_KEY) {
        return true;
      }
      return source === MDCChipActionType.TRAILING;
    };
    MDCChipFoundation3.prototype.getRemovedAnnouncement = function() {
      var msg = this.adapter.getAttribute(MDCChipAttributes.DATA_REMOVED_ANNOUNCEMENT);
      return msg || void 0;
    };
    MDCChipFoundation3.prototype.getAddedAnnouncement = function() {
      var msg = this.adapter.getAttribute(MDCChipAttributes.DATA_ADDED_ANNOUNCEMENT);
      return msg || void 0;
    };
    MDCChipFoundation3.prototype.animateSelection = function(isSelected) {
      var _this = this;
      this.resetAnimationStyles();
      this.animFrame.request(AnimationKeys.SELECTION, function() {
        _this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.updateSelectionStyles(isSelected);
        });
      });
    };
    MDCChipFoundation3.prototype.resetAnimationStyles = function() {
      this.adapter.removeClass(MDCChipCssClasses.SELECTING);
      this.adapter.removeClass(MDCChipCssClasses.DESELECTING);
      this.adapter.removeClass(MDCChipCssClasses.SELECTING_WITH_PRIMARY_ICON);
      this.adapter.removeClass(MDCChipCssClasses.DESELECTING_WITH_PRIMARY_ICON);
    };
    MDCChipFoundation3.prototype.updateSelectionStyles = function(isSelected) {
      var _this = this;
      var hasIcon = this.adapter.hasClass(MDCChipCssClasses.WITH_PRIMARY_ICON);
      if (hasIcon && isSelected) {
        this.adapter.addClass(MDCChipCssClasses.SELECTING_WITH_PRIMARY_ICON);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.addClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (hasIcon && !isSelected) {
        this.adapter.addClass(MDCChipCssClasses.DESELECTING_WITH_PRIMARY_ICON);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.removeClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (isSelected) {
        this.adapter.addClass(MDCChipCssClasses.SELECTING);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.addClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
      if (!isSelected) {
        this.adapter.addClass(MDCChipCssClasses.DESELECTING);
        this.animFrame.request(AnimationKeys.SELECTION, function() {
          _this.adapter.removeClass(MDCChipCssClasses.SELECTED);
        });
        return;
      }
    };
    return MDCChipFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/index.js
var import_dist343 = __toESM(require_dist());
var import_dist344 = __toESM(require_dist2());
var import_dist345 = __toESM(require_dist3());

// node_modules/@material/chips/action/index.js
var import_dist253 = __toESM(require_dist());
var import_dist254 = __toESM(require_dist2());
var import_dist255 = __toESM(require_dist3());

// node_modules/@material/chips/action/adapter.js
var import_dist232 = __toESM(require_dist());
var import_dist233 = __toESM(require_dist2());
var import_dist234 = __toESM(require_dist3());

// node_modules/@material/chips/action/component.js
var import_dist247 = __toESM(require_dist());
var import_dist248 = __toESM(require_dist2());
var import_dist249 = __toESM(require_dist3());

// node_modules/@material/chips/action/component-ripple.js
var import_dist235 = __toESM(require_dist());
var import_dist236 = __toESM(require_dist2());
var import_dist237 = __toESM(require_dist3());
function computePrimaryActionRippleClientRect(clientRect, graphicSelectedWidthStyleValue) {
  var graphicWidth = Number(graphicSelectedWidthStyleValue.replace("px", ""));
  if (Number.isNaN(graphicWidth)) {
    return clientRect;
  }
  return {
    width: clientRect.width + graphicWidth,
    height: clientRect.height,
    top: clientRect.top,
    right: clientRect.right,
    bottom: clientRect.bottom,
    left: clientRect.left
  };
}
var GRAPHIC_SELECTED_WIDTH_STYLE_PROP = "--mdc-chip-graphic-selected-width";

// node_modules/@material/chips/action/primary-foundation.js
var import_dist241 = __toESM(require_dist());
var import_dist242 = __toESM(require_dist2());
var import_dist243 = __toESM(require_dist3());

// node_modules/@material/chips/action/foundation.js
var import_dist238 = __toESM(require_dist());
var import_dist239 = __toESM(require_dist2());
var import_dist240 = __toESM(require_dist3());
var triggerMap = /* @__PURE__ */ new Map();
triggerMap.set(KEY.SPACEBAR, MDCChipActionInteractionTrigger.SPACEBAR_KEY);
triggerMap.set(KEY.ENTER, MDCChipActionInteractionTrigger.ENTER_KEY);
triggerMap.set(KEY.DELETE, MDCChipActionInteractionTrigger.DELETE_KEY);
triggerMap.set(KEY.BACKSPACE, MDCChipActionInteractionTrigger.BACKSPACE_KEY);
var MDCChipActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipActionFoundation2, _super);
    function MDCChipActionFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipActionFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipActionFoundation2, "defaultAdapter", {
      get: function() {
        return {
          emitEvent: function() {
            return void 0;
          },
          focus: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getElementID: function() {
            return "";
          },
          removeAttribute: function() {
            return void 0;
          },
          setAttribute: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipActionFoundation2.prototype.handleClick = function() {
      if (this.isDisabled())
        return;
      this.emitInteraction(MDCChipActionInteractionTrigger.CLICK);
    };
    MDCChipActionFoundation2.prototype.handleKeydown = function(event) {
      var key = normalizeKey(event);
      if (this.shouldNotifyInteractionFromKey(key)) {
        event.preventDefault();
        this.emitInteraction(this.getTriggerFromKey(key));
        return;
      }
      if (isNavigationEvent(event)) {
        event.preventDefault();
        this.emitNavigation(key);
        return;
      }
    };
    MDCChipActionFoundation2.prototype.setDisabled = function(isDisabled) {
      if (this.isSelectable()) {
        this.adapter.setAttribute(MDCChipActionAttributes.ARIA_DISABLED, "" + isDisabled);
        return;
      }
      if (isDisabled) {
        this.adapter.setAttribute(MDCChipActionAttributes.DISABLED, "true");
      } else {
        this.adapter.removeAttribute(MDCChipActionAttributes.DISABLED);
      }
    };
    MDCChipActionFoundation2.prototype.isDisabled = function() {
      if (this.adapter.getAttribute(MDCChipActionAttributes.ARIA_DISABLED) === "true") {
        return true;
      }
      if (this.adapter.getAttribute(MDCChipActionAttributes.DISABLED) !== null) {
        return true;
      }
      return false;
    };
    MDCChipActionFoundation2.prototype.setFocus = function(behavior) {
      if (!this.isFocusable()) {
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "0");
        this.adapter.focus();
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.FOCUSABLE) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "0");
        return;
      }
      if (behavior === MDCChipActionFocusBehavior.NOT_FOCUSABLE) {
        this.adapter.setAttribute(MDCChipActionAttributes.TAB_INDEX, "-1");
        return;
      }
    };
    MDCChipActionFoundation2.prototype.isFocusable = function() {
      if (this.isDisabled()) {
        return false;
      }
      if (this.adapter.getAttribute(MDCChipActionAttributes.ARIA_HIDDEN) === "true") {
        return false;
      }
      return true;
    };
    MDCChipActionFoundation2.prototype.setSelected = function(isSelected) {
      if (!this.isSelectable()) {
        return;
      }
      this.adapter.setAttribute(MDCChipActionAttributes.ARIA_SELECTED, "" + isSelected);
    };
    MDCChipActionFoundation2.prototype.isSelected = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.ARIA_SELECTED) === "true";
    };
    MDCChipActionFoundation2.prototype.emitInteraction = function(trigger) {
      this.adapter.emitEvent(MDCChipActionEvents.INTERACTION, {
        actionID: this.adapter.getElementID(),
        source: this.actionType(),
        trigger
      });
    };
    MDCChipActionFoundation2.prototype.emitNavigation = function(key) {
      this.adapter.emitEvent(MDCChipActionEvents.NAVIGATION, {
        source: this.actionType(),
        key
      });
    };
    MDCChipActionFoundation2.prototype.shouldNotifyInteractionFromKey = function(key) {
      var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
      var isFromRemoveKey = key === KEY.BACKSPACE || key === KEY.DELETE;
      if (isFromActionKey) {
        return true;
      }
      if (isFromRemoveKey && this.shouldEmitInteractionOnRemoveKey()) {
        return true;
      }
      return false;
    };
    MDCChipActionFoundation2.prototype.getTriggerFromKey = function(key) {
      var trigger = triggerMap.get(key);
      if (trigger) {
        return trigger;
      }
      return MDCChipActionInteractionTrigger.UNSPECIFIED;
    };
    return MDCChipActionFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/chips/action/primary-foundation.js
var MDCChipPrimaryActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipPrimaryActionFoundation2, _super);
    function MDCChipPrimaryActionFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipPrimaryActionFoundation2.prototype.isSelectable = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.ROLE) === "option";
    };
    MDCChipPrimaryActionFoundation2.prototype.actionType = function() {
      return MDCChipActionType.PRIMARY;
    };
    MDCChipPrimaryActionFoundation2.prototype.shouldEmitInteractionOnRemoveKey = function() {
      return this.adapter.getAttribute(MDCChipActionAttributes.DATA_DELETABLE) === "true";
    };
    return MDCChipPrimaryActionFoundation2;
  }(MDCChipActionFoundation)
);

// node_modules/@material/chips/action/trailing-foundation.js
var import_dist244 = __toESM(require_dist());
var import_dist245 = __toESM(require_dist2());
var import_dist246 = __toESM(require_dist3());
var MDCChipTrailingActionFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingActionFoundation3, _super);
    function MDCChipTrailingActionFoundation3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipTrailingActionFoundation3.prototype.isSelectable = function() {
      return false;
    };
    MDCChipTrailingActionFoundation3.prototype.actionType = function() {
      return MDCChipActionType.TRAILING;
    };
    MDCChipTrailingActionFoundation3.prototype.shouldEmitInteractionOnRemoveKey = function() {
      return true;
    };
    return MDCChipTrailingActionFoundation3;
  }(MDCChipActionFoundation)
);

// node_modules/@material/chips/action/component.js
var MDCChipAction = (
  /** @class */
  function(_super) {
    __extends(MDCChipAction2, _super);
    function MDCChipAction2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rootHTML = _this.root;
      return _this;
    }
    MDCChipAction2.attachTo = function(root) {
      return new MDCChipAction2(root);
    };
    Object.defineProperty(MDCChipAction2.prototype, "ripple", {
      get: function() {
        return this.rippleInstance;
      },
      enumerable: false,
      configurable: true
    });
    MDCChipAction2.prototype.initialize = function(rippleFactory) {
      var _this = this;
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.computeRippleClientRect();
      } });
      this.rippleInstance = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChipAction2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.handleKeydown = function(event) {
        _this.foundation.handleKeydown(event);
      };
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
    };
    MDCChipAction2.prototype.destroy = function() {
      this.ripple.destroy();
      this.unlisten("click", this.handleClick);
      this.unlisten("keydown", this.handleKeydown);
      _super.prototype.destroy.call(this);
    };
    MDCChipAction2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        focus: function() {
          _this.rootHTML.focus();
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getElementID: function() {
          return _this.root.id;
        },
        removeAttribute: function(name) {
          _this.root.removeAttribute(name);
        },
        setAttribute: function(name, value) {
          _this.root.setAttribute(name, value);
        }
      };
      if (this.root.classList.contains(MDCChipActionCssClasses.TRAILING_ACTION)) {
        return new MDCChipTrailingActionFoundation(adapter);
      }
      return new MDCChipPrimaryActionFoundation(adapter);
    };
    MDCChipAction2.prototype.setDisabled = function(isDisabled) {
      this.foundation.setDisabled(isDisabled);
    };
    MDCChipAction2.prototype.isDisabled = function() {
      return this.foundation.isDisabled();
    };
    MDCChipAction2.prototype.setFocus = function(behavior) {
      this.foundation.setFocus(behavior);
    };
    MDCChipAction2.prototype.isFocusable = function() {
      return this.foundation.isFocusable();
    };
    MDCChipAction2.prototype.setSelected = function(isSelected) {
      this.foundation.setSelected(isSelected);
    };
    MDCChipAction2.prototype.isSelected = function() {
      return this.foundation.isSelected();
    };
    MDCChipAction2.prototype.isSelectable = function() {
      return this.foundation.isSelectable();
    };
    MDCChipAction2.prototype.actionType = function() {
      return this.foundation.actionType();
    };
    MDCChipAction2.prototype.computeRippleClientRect = function() {
      if (this.root.classList.contains(MDCChipActionCssClasses.PRIMARY_ACTION)) {
        var chipRoot = closest(this.root, "." + MDCChipActionCssClasses.CHIP_ROOT);
        if (!chipRoot)
          return this.root.getBoundingClientRect();
        var graphicWidth = window.getComputedStyle(chipRoot).getPropertyValue(GRAPHIC_SELECTED_WIDTH_STYLE_PROP);
        return computePrimaryActionRippleClientRect(chipRoot.getBoundingClientRect(), graphicWidth);
      }
      return this.root.getBoundingClientRect();
    };
    return MDCChipAction2;
  }(MDCComponent)
);

// node_modules/@material/chips/action/types.js
var import_dist250 = __toESM(require_dist());
var import_dist251 = __toESM(require_dist2());
var import_dist252 = __toESM(require_dist3());

// node_modules/@material/chips/chip/index.js
var import_dist265 = __toESM(require_dist());
var import_dist266 = __toESM(require_dist2());
var import_dist267 = __toESM(require_dist3());

// node_modules/@material/chips/chip/adapter.js
var import_dist256 = __toESM(require_dist());
var import_dist257 = __toESM(require_dist2());
var import_dist258 = __toESM(require_dist3());

// node_modules/@material/chips/chip/component.js
var import_dist259 = __toESM(require_dist());
var import_dist260 = __toESM(require_dist2());
var import_dist261 = __toESM(require_dist3());
var MDCChip = (
  /** @class */
  function(_super) {
    __extends(MDCChip3, _super);
    function MDCChip3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rootHTML = _this.root;
      return _this;
    }
    MDCChip3.attachTo = function(root) {
      return new MDCChip3(root);
    };
    MDCChip3.prototype.initialize = function(actionFactory) {
      if (actionFactory === void 0) {
        actionFactory = function(el) {
          return new MDCChipAction(el);
        };
      }
      this.actions = /* @__PURE__ */ new Map();
      var actionEls = this.root.querySelectorAll(".mdc-evolution-chip__action");
      for (var i = 0; i < actionEls.length; i++) {
        var action = actionFactory(actionEls[i]);
        this.actions.set(action.actionType(), action);
      }
    };
    MDCChip3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleActionInteraction = function(event) {
        _this.foundation.handleActionInteraction(event);
      };
      this.handleActionNavigation = function(event) {
        _this.foundation.handleActionNavigation(event);
      };
      this.listen(MDCChipActionEvents.INTERACTION, this.handleActionInteraction);
      this.listen(MDCChipActionEvents.NAVIGATION, this.handleActionNavigation);
    };
    MDCChip3.prototype.destroy = function() {
      this.unlisten(MDCChipActionEvents.INTERACTION, this.handleActionInteraction);
      this.unlisten(MDCChipActionEvents.NAVIGATION, this.handleActionNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChip3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getActions: function() {
          var e_1, _a2;
          var actions = [];
          try {
            for (var _b = __values(_this.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
              var _d = __read(_c.value, 1), key = _d[0];
              actions.push(key);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
          return actions;
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getElementID: function() {
          return _this.rootHTML.id;
        },
        getOffsetWidth: function() {
          return _this.rootHTML.offsetWidth;
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isActionSelectable: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isSelectable();
          }
          return false;
        },
        isActionSelected: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isSelected();
          }
          return false;
        },
        isActionFocusable: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isFocusable();
          }
          return false;
        },
        isActionDisabled: function(actionType) {
          var action = _this.actions.get(actionType);
          if (action) {
            return action.isDisabled();
          }
          return false;
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        setActionDisabled: function(actionType, isDisabled) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setDisabled(isDisabled);
          }
        },
        setActionFocus: function(actionType, behavior) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setFocus(behavior);
          }
        },
        setActionSelected: function(actionType, isSelected) {
          var action = _this.actions.get(actionType);
          if (action) {
            action.setSelected(isSelected);
          }
        },
        setStyleProperty: function(prop, value) {
          _this.rootHTML.style.setProperty(prop, value);
        }
      };
      return new MDCChipFoundation(adapter);
    };
    MDCChip3.prototype.remove = function() {
      var parent = this.root.parentNode;
      if (parent !== null) {
        parent.removeChild(this.root);
      }
    };
    MDCChip3.prototype.getActions = function() {
      return this.foundation.getActions();
    };
    MDCChip3.prototype.getElementID = function() {
      return this.foundation.getElementID();
    };
    MDCChip3.prototype.isDisabled = function() {
      return this.foundation.isDisabled();
    };
    MDCChip3.prototype.setDisabled = function(isDisabled) {
      this.foundation.setDisabled(isDisabled);
    };
    MDCChip3.prototype.isActionFocusable = function(action) {
      return this.foundation.isActionFocusable(action);
    };
    MDCChip3.prototype.isActionSelectable = function(action) {
      return this.foundation.isActionSelectable(action);
    };
    MDCChip3.prototype.isActionSelected = function(action) {
      return this.foundation.isActionSelected(action);
    };
    MDCChip3.prototype.setActionFocus = function(action, focus) {
      this.foundation.setActionFocus(action, focus);
    };
    MDCChip3.prototype.setActionSelected = function(action, isSelected) {
      this.foundation.setActionSelected(action, isSelected);
    };
    MDCChip3.prototype.startAnimation = function(animation) {
      this.foundation.startAnimation(animation);
    };
    return MDCChip3;
  }(MDCComponent)
);

// node_modules/@material/chips/chip/types.js
var import_dist262 = __toESM(require_dist());
var import_dist263 = __toESM(require_dist2());
var import_dist264 = __toESM(require_dist3());

// node_modules/@material/chips/chip-set/index.js
var import_dist286 = __toESM(require_dist());
var import_dist287 = __toESM(require_dist2());
var import_dist288 = __toESM(require_dist3());

// node_modules/@material/chips/chip-set/adapter.js
var import_dist268 = __toESM(require_dist());
var import_dist269 = __toESM(require_dist2());
var import_dist270 = __toESM(require_dist3());

// node_modules/@material/chips/chip-set/component.js
var import_dist280 = __toESM(require_dist());
var import_dist281 = __toESM(require_dist2());
var import_dist282 = __toESM(require_dist3());

// node_modules/@material/dom/announce.js
var import_dist271 = __toESM(require_dist());
var import_dist272 = __toESM(require_dist2());
var import_dist273 = __toESM(require_dist3());
var AnnouncerPriority;
(function(AnnouncerPriority2) {
  AnnouncerPriority2["POLITE"] = "polite";
  AnnouncerPriority2["ASSERTIVE"] = "assertive";
})(AnnouncerPriority || (AnnouncerPriority = {}));
var DATA_MDC_DOM_ANNOUNCE = "data-mdc-dom-announce";
function announce(message, options) {
  Announcer.getInstance().say(message, options);
}
var Announcer = (
  /** @class */
  function() {
    function Announcer2() {
      this.liveRegions = /* @__PURE__ */ new Map();
    }
    Announcer2.getInstance = function() {
      if (!Announcer2.instance) {
        Announcer2.instance = new Announcer2();
      }
      return Announcer2.instance;
    };
    Announcer2.prototype.say = function(message, options) {
      var _a2, _b;
      var priority = (_a2 = options === null || options === void 0 ? void 0 : options.priority) !== null && _a2 !== void 0 ? _a2 : AnnouncerPriority.POLITE;
      var ownerDocument = (_b = options === null || options === void 0 ? void 0 : options.ownerDocument) !== null && _b !== void 0 ? _b : document;
      var liveRegion = this.getLiveRegion(priority, ownerDocument);
      liveRegion.textContent = "";
      setTimeout(function() {
        liveRegion.textContent = message;
        ownerDocument.addEventListener("click", clearLiveRegion);
      }, 1);
      function clearLiveRegion() {
        liveRegion.textContent = "";
        ownerDocument.removeEventListener("click", clearLiveRegion);
      }
    };
    Announcer2.prototype.getLiveRegion = function(priority, ownerDocument) {
      var documentLiveRegions = this.liveRegions.get(ownerDocument);
      if (!documentLiveRegions) {
        documentLiveRegions = /* @__PURE__ */ new Map();
        this.liveRegions.set(ownerDocument, documentLiveRegions);
      }
      var existingLiveRegion = documentLiveRegions.get(priority);
      if (existingLiveRegion && ownerDocument.body.contains(existingLiveRegion)) {
        return existingLiveRegion;
      }
      var liveRegion = this.createLiveRegion(priority, ownerDocument);
      documentLiveRegions.set(priority, liveRegion);
      return liveRegion;
    };
    Announcer2.prototype.createLiveRegion = function(priority, ownerDocument) {
      var el = ownerDocument.createElement("div");
      el.style.position = "absolute";
      el.style.top = "-9999px";
      el.style.left = "-9999px";
      el.style.height = "1px";
      el.style.overflow = "hidden";
      el.setAttribute("aria-atomic", "true");
      el.setAttribute("aria-live", priority);
      el.setAttribute(DATA_MDC_DOM_ANNOUNCE, "true");
      ownerDocument.body.appendChild(el);
      return el;
    };
    return Announcer2;
  }()
);

// node_modules/@material/chips/chip-set/constants.js
var import_dist274 = __toESM(require_dist());
var import_dist275 = __toESM(require_dist2());
var import_dist276 = __toESM(require_dist3());
var MDCChipSetAttributes;
(function(MDCChipSetAttributes2) {
  MDCChipSetAttributes2["ARIA_MULTISELECTABLE"] = "aria-multiselectable";
})(MDCChipSetAttributes || (MDCChipSetAttributes = {}));
var MDCChipSetCssClasses;
(function(MDCChipSetCssClasses2) {
  MDCChipSetCssClasses2["CHIP"] = "mdc-evolution-chip";
})(MDCChipSetCssClasses || (MDCChipSetCssClasses = {}));
var MDCChipSetEvents;
(function(MDCChipSetEvents2) {
  MDCChipSetEvents2["INTERACTION"] = "MDCChipSet:interaction";
  MDCChipSetEvents2["REMOVAL"] = "MDCChipSet:removal";
  MDCChipSetEvents2["SELECTION"] = "MDCChipSet:selection";
})(MDCChipSetEvents || (MDCChipSetEvents = {}));

// node_modules/@material/chips/chip-set/foundation.js
var import_dist277 = __toESM(require_dist());
var import_dist278 = __toESM(require_dist2());
var import_dist279 = __toESM(require_dist3());
var Operator;
(function(Operator2) {
  Operator2[Operator2["INCREMENT"] = 0] = "INCREMENT";
  Operator2[Operator2["DECREMENT"] = 1] = "DECREMENT";
})(Operator || (Operator = {}));
var MDCChipSetFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCChipSetFoundation3, _super);
    function MDCChipSetFoundation3(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipSetFoundation3.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipSetFoundation3, "defaultAdapter", {
      get: function() {
        return {
          announceMessage: function() {
            return void 0;
          },
          emitEvent: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getChipActionsAtIndex: function() {
            return [];
          },
          getChipCount: function() {
            return 0;
          },
          getChipIdAtIndex: function() {
            return "";
          },
          getChipIndexById: function() {
            return 0;
          },
          isChipFocusableAtIndex: function() {
            return false;
          },
          isChipSelectableAtIndex: function() {
            return false;
          },
          isChipSelectedAtIndex: function() {
            return false;
          },
          removeChipAtIndex: function() {
          },
          setChipFocusAtIndex: function() {
            return void 0;
          },
          setChipSelectedAtIndex: function() {
            return void 0;
          },
          startChipAnimationAtIndex: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSetFoundation3.prototype.handleChipAnimation = function(_a2) {
      var detail = _a2.detail;
      var chipID = detail.chipID, animation = detail.animation, isComplete = detail.isComplete, addedAnnouncement = detail.addedAnnouncement, removedAnnouncement = detail.removedAnnouncement;
      var index = this.adapter.getChipIndexById(chipID);
      if (animation === MDCChipAnimation.EXIT && isComplete) {
        if (removedAnnouncement) {
          this.adapter.announceMessage(removedAnnouncement);
        }
        this.removeAfterAnimation(index, chipID);
        return;
      }
      if (animation === MDCChipAnimation.ENTER && isComplete && addedAnnouncement) {
        this.adapter.announceMessage(addedAnnouncement);
        return;
      }
    };
    MDCChipSetFoundation3.prototype.handleChipInteraction = function(_a2) {
      var detail = _a2.detail;
      var source = detail.source, chipID = detail.chipID, isSelectable = detail.isSelectable, isSelected = detail.isSelected, shouldRemove = detail.shouldRemove;
      var index = this.adapter.getChipIndexById(chipID);
      if (shouldRemove) {
        this.removeChip(index);
        return;
      }
      this.focusChip(index, source, MDCChipActionFocusBehavior.FOCUSABLE);
      this.adapter.emitEvent(MDCChipSetEvents.INTERACTION, {
        chipIndex: index,
        chipID
      });
      if (isSelectable) {
        this.setSelection(index, source, !isSelected);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipNavigation = function(_a2) {
      var detail = _a2.detail;
      var chipID = detail.chipID, key = detail.key, isRTL = detail.isRTL, source = detail.source;
      var index = this.adapter.getChipIndexById(chipID);
      var toNextChip = key === KEY.ARROW_RIGHT && !isRTL || key === KEY.ARROW_LEFT && isRTL;
      if (toNextChip) {
        this.focusNextChipFrom(index + 1);
        return;
      }
      var toPreviousChip = key === KEY.ARROW_LEFT && !isRTL || key === KEY.ARROW_RIGHT && isRTL;
      if (toPreviousChip) {
        this.focusPrevChipFrom(index - 1);
        return;
      }
      if (key === KEY.ARROW_DOWN) {
        this.focusNextChipFrom(index + 1, source);
        return;
      }
      if (key === KEY.ARROW_UP) {
        this.focusPrevChipFrom(index - 1, source);
        return;
      }
      if (key === KEY.HOME) {
        this.focusNextChipFrom(0, source);
        return;
      }
      if (key === KEY.END) {
        this.focusPrevChipFrom(this.adapter.getChipCount() - 1, source);
        return;
      }
    };
    MDCChipSetFoundation3.prototype.getSelectedChipIndexes = function() {
      var e_1, _a2;
      var selectedIndexes = /* @__PURE__ */ new Set();
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_1 = (e_1 = void 0, __values(actions)), actions_1_1 = actions_1.next(); !actions_1_1.done; actions_1_1 = actions_1.next()) {
            var action = actions_1_1.value;
            if (this.adapter.isChipSelectedAtIndex(i, action)) {
              selectedIndexes.add(i);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (actions_1_1 && !actions_1_1.done && (_a2 = actions_1.return)) _a2.call(actions_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      return selectedIndexes;
    };
    MDCChipSetFoundation3.prototype.setChipSelected = function(index, action, isSelected) {
      if (this.adapter.isChipSelectableAtIndex(index, action)) {
        this.setSelection(index, action, isSelected);
      }
    };
    MDCChipSetFoundation3.prototype.isChipSelected = function(index, action) {
      return this.adapter.isChipSelectedAtIndex(index, action);
    };
    MDCChipSetFoundation3.prototype.removeChip = function(index) {
      if (index >= this.adapter.getChipCount() || index < 0)
        return;
      this.adapter.startChipAnimationAtIndex(index, MDCChipAnimation.EXIT);
      this.adapter.emitEvent(MDCChipSetEvents.REMOVAL, {
        chipID: this.adapter.getChipIdAtIndex(index),
        chipIndex: index,
        isComplete: false
      });
    };
    MDCChipSetFoundation3.prototype.addChip = function(index) {
      if (index >= this.adapter.getChipCount() || index < 0)
        return;
      this.adapter.startChipAnimationAtIndex(index, MDCChipAnimation.ENTER);
    };
    MDCChipSetFoundation3.prototype.focusNextChipFrom = function(startIndex, targetAction) {
      var chipCount = this.adapter.getChipCount();
      for (var i = startIndex; i < chipCount; i++) {
        var focusableAction = this.getFocusableAction(i, Operator.INCREMENT, targetAction);
        if (focusableAction) {
          this.focusChip(i, focusableAction, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
      }
    };
    MDCChipSetFoundation3.prototype.focusPrevChipFrom = function(startIndex, targetAction) {
      for (var i = startIndex; i > -1; i--) {
        var focusableAction = this.getFocusableAction(i, Operator.DECREMENT, targetAction);
        if (focusableAction) {
          this.focusChip(i, focusableAction, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
      }
    };
    MDCChipSetFoundation3.prototype.getFocusableAction = function(index, op, targetAction) {
      var actions = this.adapter.getChipActionsAtIndex(index);
      if (op === Operator.DECREMENT)
        actions.reverse();
      if (targetAction) {
        return this.getMatchingFocusableAction(index, actions, targetAction);
      }
      return this.getFirstFocusableAction(index, actions);
    };
    MDCChipSetFoundation3.prototype.getFirstFocusableAction = function(index, actions) {
      var e_2, _a2;
      try {
        for (var actions_2 = __values(actions), actions_2_1 = actions_2.next(); !actions_2_1.done; actions_2_1 = actions_2.next()) {
          var action = actions_2_1.value;
          if (this.adapter.isChipFocusableAtIndex(index, action)) {
            return action;
          }
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (actions_2_1 && !actions_2_1.done && (_a2 = actions_2.return)) _a2.call(actions_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      return null;
    };
    MDCChipSetFoundation3.prototype.getMatchingFocusableAction = function(index, actions, targetAction) {
      var e_3, _a2;
      var focusableAction = null;
      try {
        for (var actions_3 = __values(actions), actions_3_1 = actions_3.next(); !actions_3_1.done; actions_3_1 = actions_3.next()) {
          var action = actions_3_1.value;
          if (this.adapter.isChipFocusableAtIndex(index, action)) {
            focusableAction = action;
          }
          if (focusableAction === targetAction) {
            return focusableAction;
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (actions_3_1 && !actions_3_1.done && (_a2 = actions_3.return)) _a2.call(actions_3);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return focusableAction;
    };
    MDCChipSetFoundation3.prototype.focusChip = function(index, action, focus) {
      var e_4, _a2;
      this.adapter.setChipFocusAtIndex(index, action, focus);
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_4 = (e_4 = void 0, __values(actions)), actions_4_1 = actions_4.next(); !actions_4_1.done; actions_4_1 = actions_4.next()) {
            var chipAction = actions_4_1.value;
            if (chipAction === action && i === index)
              continue;
            this.adapter.setChipFocusAtIndex(i, chipAction, MDCChipActionFocusBehavior.NOT_FOCUSABLE);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (actions_4_1 && !actions_4_1.done && (_a2 = actions_4.return)) _a2.call(actions_4);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      }
    };
    MDCChipSetFoundation3.prototype.supportsMultiSelect = function() {
      return this.adapter.getAttribute(MDCChipSetAttributes.ARIA_MULTISELECTABLE) === "true";
    };
    MDCChipSetFoundation3.prototype.setSelection = function(index, action, isSelected) {
      var e_5, _a2;
      this.adapter.setChipSelectedAtIndex(index, action, isSelected);
      this.adapter.emitEvent(MDCChipSetEvents.SELECTION, {
        chipID: this.adapter.getChipIdAtIndex(index),
        chipIndex: index,
        isSelected
      });
      if (this.supportsMultiSelect()) {
        return;
      }
      var chipCount = this.adapter.getChipCount();
      for (var i = 0; i < chipCount; i++) {
        var actions = this.adapter.getChipActionsAtIndex(i);
        try {
          for (var actions_5 = (e_5 = void 0, __values(actions)), actions_5_1 = actions_5.next(); !actions_5_1.done; actions_5_1 = actions_5.next()) {
            var chipAction = actions_5_1.value;
            if (chipAction === action && i === index)
              continue;
            this.adapter.setChipSelectedAtIndex(i, chipAction, false);
          }
        } catch (e_5_1) {
          e_5 = { error: e_5_1 };
        } finally {
          try {
            if (actions_5_1 && !actions_5_1.done && (_a2 = actions_5.return)) _a2.call(actions_5);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
      }
    };
    MDCChipSetFoundation3.prototype.removeAfterAnimation = function(index, chipID) {
      this.adapter.removeChipAtIndex(index);
      this.adapter.emitEvent(MDCChipSetEvents.REMOVAL, {
        chipIndex: index,
        isComplete: true,
        chipID
      });
      var chipCount = this.adapter.getChipCount();
      if (chipCount <= 0)
        return;
      this.focusNearestFocusableAction(index);
    };
    MDCChipSetFoundation3.prototype.focusNearestFocusableAction = function(index) {
      var chipCount = this.adapter.getChipCount();
      var decrIndex = index;
      var incrIndex = index;
      while (decrIndex > -1 || incrIndex < chipCount) {
        var focusAction = this.getNearestFocusableAction(decrIndex, incrIndex, MDCChipActionType.TRAILING);
        if (focusAction) {
          this.focusChip(focusAction.index, focusAction.action, MDCChipActionFocusBehavior.FOCUSABLE_AND_FOCUSED);
          return;
        }
        decrIndex--;
        incrIndex++;
      }
    };
    MDCChipSetFoundation3.prototype.getNearestFocusableAction = function(decrIndex, incrIndex, actionType) {
      var decrAction = this.getFocusableAction(decrIndex, Operator.DECREMENT, actionType);
      if (decrAction) {
        return {
          index: decrIndex,
          action: decrAction
        };
      }
      if (incrIndex === decrIndex)
        return null;
      var incrAction = this.getFocusableAction(incrIndex, Operator.INCREMENT, actionType);
      if (incrAction) {
        return {
          index: incrIndex,
          action: incrAction
        };
      }
      return null;
    };
    return MDCChipSetFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/chip-set/component.js
var MDCChipSet = (
  /** @class */
  function(_super) {
    __extends(MDCChipSet3, _super);
    function MDCChipSet3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipSet3.attachTo = function(root) {
      return new MDCChipSet3(root);
    };
    MDCChipSet3.prototype.initialize = function(chipFactory) {
      if (chipFactory === void 0) {
        chipFactory = function(el) {
          return new MDCChip(el);
        };
      }
      this.chips = [];
      var chipEls = this.root.querySelectorAll("." + MDCChipSetCssClasses.CHIP);
      for (var i = 0; i < chipEls.length; i++) {
        var chip = chipFactory(chipEls[i]);
        this.chips.push(chip);
      }
    };
    MDCChipSet3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleChipAnimation = function(event) {
        _this.foundation.handleChipAnimation(event);
      };
      this.handleChipInteraction = function(event) {
        _this.foundation.handleChipInteraction(event);
      };
      this.handleChipNavigation = function(event) {
        _this.foundation.handleChipNavigation(event);
      };
      this.listen(MDCChipEvents.ANIMATION, this.handleChipAnimation);
      this.listen(MDCChipEvents.INTERACTION, this.handleChipInteraction);
      this.listen(MDCChipEvents.NAVIGATION, this.handleChipNavigation);
    };
    MDCChipSet3.prototype.destroy = function() {
      this.unlisten(MDCChipEvents.ANIMATION, this.handleChipAnimation);
      this.unlisten(MDCChipEvents.INTERACTION, this.handleChipInteraction);
      this.unlisten(MDCChipEvents.NAVIGATION, this.handleChipNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChipSet3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        announceMessage: function(message) {
          announce(message);
        },
        emitEvent: function(eventName, eventDetail) {
          _this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getAttribute: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        getChipActionsAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return [];
          return _this.chips[index].getActions();
        },
        getChipCount: function() {
          return _this.chips.length;
        },
        getChipIdAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return "";
          return _this.chips[index].getElementID();
        },
        getChipIndexById: function(id5) {
          return _this.chips.findIndex(function(chip) {
            return chip.getElementID() === id5;
          });
        },
        isChipFocusableAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionFocusable(action);
        },
        isChipSelectableAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionSelectable(action);
        },
        isChipSelectedAtIndex: function(index, action) {
          if (!_this.isIndexValid(index))
            return false;
          return _this.chips[index].isActionSelected(action);
        },
        removeChipAtIndex: function(index) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].destroy();
          _this.chips[index].remove();
          _this.chips.splice(index, 1);
        },
        setChipFocusAtIndex: function(index, action, focus) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].setActionFocus(action, focus);
        },
        setChipSelectedAtIndex: function(index, action, selected) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].setActionSelected(action, selected);
        },
        startChipAnimationAtIndex: function(index, animation) {
          if (!_this.isIndexValid(index))
            return;
          _this.chips[index].startAnimation(animation);
        }
      };
      return new MDCChipSetFoundation(adapter);
    };
    MDCChipSet3.prototype.getChipIndexByID = function(chipID) {
      return this.chips.findIndex(function(chip) {
        return chip.getElementID() === chipID;
      });
    };
    MDCChipSet3.prototype.getChipIdAtIndex = function(index) {
      if (!this.isIndexValid(index))
        return "";
      return this.chips[index].getElementID();
    };
    MDCChipSet3.prototype.getSelectedChipIndexes = function() {
      return this.foundation.getSelectedChipIndexes();
    };
    MDCChipSet3.prototype.setChipSelected = function(index, action, isSelected) {
      this.foundation.setChipSelected(index, action, isSelected);
    };
    MDCChipSet3.prototype.isChipSelected = function(index, action) {
      return this.foundation.isChipSelected(index, action);
    };
    MDCChipSet3.prototype.addChip = function(index) {
      this.foundation.addChip(index);
    };
    MDCChipSet3.prototype.removeChip = function(index) {
      this.foundation.removeChip(index);
    };
    MDCChipSet3.prototype.isIndexValid = function(index) {
      return index > -1 && index < this.chips.length;
    };
    return MDCChipSet3;
  }(MDCComponent)
);

// node_modules/@material/chips/chip-set/types.js
var import_dist283 = __toESM(require_dist());
var import_dist284 = __toESM(require_dist2());
var import_dist285 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/index.js
var import_dist340 = __toESM(require_dist());
var import_dist341 = __toESM(require_dist2());
var import_dist342 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/trailingaction/index.js
var import_dist304 = __toESM(require_dist());
var import_dist305 = __toESM(require_dist2());
var import_dist306 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/trailingaction/adapter.js
var import_dist289 = __toESM(require_dist());
var import_dist290 = __toESM(require_dist2());
var import_dist291 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/trailingaction/component.js
var import_dist298 = __toESM(require_dist());
var import_dist299 = __toESM(require_dist2());
var import_dist300 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/trailingaction/constants.js
var import_dist292 = __toESM(require_dist());
var import_dist293 = __toESM(require_dist2());
var import_dist294 = __toESM(require_dist3());
var InteractionTrigger;
(function(InteractionTrigger2) {
  InteractionTrigger2[InteractionTrigger2["UNSPECIFIED"] = 0] = "UNSPECIFIED";
  InteractionTrigger2[InteractionTrigger2["CLICK"] = 1] = "CLICK";
  InteractionTrigger2[InteractionTrigger2["BACKSPACE_KEY"] = 2] = "BACKSPACE_KEY";
  InteractionTrigger2[InteractionTrigger2["DELETE_KEY"] = 3] = "DELETE_KEY";
  InteractionTrigger2[InteractionTrigger2["SPACEBAR_KEY"] = 4] = "SPACEBAR_KEY";
  InteractionTrigger2[InteractionTrigger2["ENTER_KEY"] = 5] = "ENTER_KEY";
})(InteractionTrigger || (InteractionTrigger = {}));
var strings5 = {
  ARIA_HIDDEN: "aria-hidden",
  INTERACTION_EVENT: "MDCChipTrailingAction:interaction",
  NAVIGATION_EVENT: "MDCChipTrailingAction:navigation",
  TAB_INDEX: "tabindex"
};

// node_modules/@material/chips/deprecated/trailingaction/foundation.js
var import_dist295 = __toESM(require_dist());
var import_dist296 = __toESM(require_dist2());
var import_dist297 = __toESM(require_dist3());
var MDCChipTrailingActionFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingActionFoundation3, _super);
    function MDCChipTrailingActionFoundation3(adapter) {
      return _super.call(this, __assign(__assign({}, MDCChipTrailingActionFoundation3.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCChipTrailingActionFoundation3, "strings", {
      get: function() {
        return strings5;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipTrailingActionFoundation3, "defaultAdapter", {
      get: function() {
        return {
          focus: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          setAttribute: function() {
            return void 0;
          },
          notifyInteraction: function() {
            return void 0;
          },
          notifyNavigation: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipTrailingActionFoundation3.prototype.handleClick = function(evt) {
      evt.stopPropagation();
      this.adapter.notifyInteraction(InteractionTrigger.CLICK);
    };
    MDCChipTrailingActionFoundation3.prototype.handleKeydown = function(evt) {
      evt.stopPropagation();
      var key = normalizeKey(evt);
      if (this.shouldNotifyInteractionFromKey(key)) {
        var trigger = this.getTriggerFromKey(key);
        this.adapter.notifyInteraction(trigger);
        return;
      }
      if (isNavigationEvent(evt)) {
        this.adapter.notifyNavigation(key);
        return;
      }
    };
    MDCChipTrailingActionFoundation3.prototype.removeFocus = function() {
      this.adapter.setAttribute(strings5.TAB_INDEX, "-1");
    };
    MDCChipTrailingActionFoundation3.prototype.focus = function() {
      this.adapter.setAttribute(strings5.TAB_INDEX, "0");
      this.adapter.focus();
    };
    MDCChipTrailingActionFoundation3.prototype.isNavigable = function() {
      return this.adapter.getAttribute(strings5.ARIA_HIDDEN) !== "true";
    };
    MDCChipTrailingActionFoundation3.prototype.shouldNotifyInteractionFromKey = function(key) {
      var isFromActionKey = key === KEY.ENTER || key === KEY.SPACEBAR;
      var isFromDeleteKey = key === KEY.BACKSPACE || key === KEY.DELETE;
      return isFromActionKey || isFromDeleteKey;
    };
    MDCChipTrailingActionFoundation3.prototype.getTriggerFromKey = function(key) {
      if (key === KEY.SPACEBAR) {
        return InteractionTrigger.SPACEBAR_KEY;
      }
      if (key === KEY.ENTER) {
        return InteractionTrigger.ENTER_KEY;
      }
      if (key === KEY.DELETE) {
        return InteractionTrigger.DELETE_KEY;
      }
      if (key === KEY.BACKSPACE) {
        return InteractionTrigger.BACKSPACE_KEY;
      }
      return InteractionTrigger.UNSPECIFIED;
    };
    return MDCChipTrailingActionFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/trailingaction/component.js
var MDCChipTrailingAction = (
  /** @class */
  function(_super) {
    __extends(MDCChipTrailingAction2, _super);
    function MDCChipTrailingAction2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCChipTrailingAction2.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    MDCChipTrailingAction2.attachTo = function(root) {
      return new MDCChipTrailingAction2(root);
    };
    MDCChipTrailingAction2.prototype.initialize = function(rippleFactory) {
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      var rippleAdapter = MDCRipple.createAdapter(this);
      this.rippleSurface = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChipTrailingAction2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function(evt) {
        _this.foundation.handleClick(evt);
      };
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
    };
    MDCChipTrailingAction2.prototype.destroy = function() {
      this.rippleSurface.destroy();
      this.unlisten("click", this.handleClick);
      this.unlisten("keydown", this.handleKeydown);
      _super.prototype.destroy.call(this);
    };
    MDCChipTrailingAction2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        focus: function() {
          _this.root.focus();
        },
        getAttribute: function(attr) {
          return _this.root.getAttribute(attr);
        },
        notifyInteraction: function(trigger) {
          return _this.emit(
            strings5.INTERACTION_EVENT,
            { trigger },
            true
            /* shouldBubble */
          );
        },
        notifyNavigation: function(key) {
          _this.emit(
            strings5.NAVIGATION_EVENT,
            { key },
            true
            /* shouldBubble */
          );
        },
        setAttribute: function(attr, value) {
          _this.root.setAttribute(attr, value);
        }
      };
      return new MDCChipTrailingActionFoundation2(adapter);
    };
    MDCChipTrailingAction2.prototype.isNavigable = function() {
      return this.foundation.isNavigable();
    };
    MDCChipTrailingAction2.prototype.focus = function() {
      this.foundation.focus();
    };
    MDCChipTrailingAction2.prototype.removeFocus = function() {
      this.foundation.removeFocus();
    };
    return MDCChipTrailingAction2;
  }(MDCComponent)
);

// node_modules/@material/chips/deprecated/trailingaction/types.js
var import_dist301 = __toESM(require_dist());
var import_dist302 = __toESM(require_dist2());
var import_dist303 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip/index.js
var import_dist322 = __toESM(require_dist());
var import_dist323 = __toESM(require_dist2());
var import_dist324 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip/adapter.js
var import_dist307 = __toESM(require_dist());
var import_dist308 = __toESM(require_dist2());
var import_dist309 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip/component.js
var import_dist316 = __toESM(require_dist());
var import_dist317 = __toESM(require_dist2());
var import_dist318 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip/constants.js
var import_dist310 = __toESM(require_dist());
var import_dist311 = __toESM(require_dist2());
var import_dist312 = __toESM(require_dist3());
var Direction2;
(function(Direction3) {
  Direction3["LEFT"] = "left";
  Direction3["RIGHT"] = "right";
})(Direction2 || (Direction2 = {}));
var EventSource;
(function(EventSource2) {
  EventSource2["PRIMARY"] = "primary";
  EventSource2["TRAILING"] = "trailing";
  EventSource2["NONE"] = "none";
})(EventSource || (EventSource = {}));
var strings6 = {
  ADDED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-added-announcement",
  ARIA_CHECKED: "aria-checked",
  ARROW_DOWN_KEY: "ArrowDown",
  ARROW_LEFT_KEY: "ArrowLeft",
  ARROW_RIGHT_KEY: "ArrowRight",
  ARROW_UP_KEY: "ArrowUp",
  BACKSPACE_KEY: "Backspace",
  CHECKMARK_SELECTOR: ".mdc-chip__checkmark",
  DELETE_KEY: "Delete",
  END_KEY: "End",
  ENTER_KEY: "Enter",
  ENTRY_ANIMATION_NAME: "mdc-chip-entry",
  HOME_KEY: "Home",
  IE_ARROW_DOWN_KEY: "Down",
  IE_ARROW_LEFT_KEY: "Left",
  IE_ARROW_RIGHT_KEY: "Right",
  IE_ARROW_UP_KEY: "Up",
  IE_DELETE_KEY: "Del",
  INTERACTION_EVENT: "MDCChip:interaction",
  LEADING_ICON_SELECTOR: ".mdc-chip__icon--leading",
  NAVIGATION_EVENT: "MDCChip:navigation",
  PRIMARY_ACTION_SELECTOR: ".mdc-chip__primary-action",
  REMOVED_ANNOUNCEMENT_ATTRIBUTE: "data-mdc-chip-removed-announcement",
  REMOVAL_EVENT: "MDCChip:removal",
  SELECTION_EVENT: "MDCChip:selection",
  SPACEBAR_KEY: " ",
  TAB_INDEX: "tabindex",
  TRAILING_ACTION_SELECTOR: ".mdc-chip-trailing-action",
  TRAILING_ICON_INTERACTION_EVENT: "MDCChip:trailingIconInteraction",
  TRAILING_ICON_SELECTOR: ".mdc-chip__icon--trailing"
};
var cssClasses6 = {
  CHECKMARK: "mdc-chip__checkmark",
  CHIP_EXIT: "mdc-chip--exit",
  DELETABLE: "mdc-chip--deletable",
  EDITABLE: "mdc-chip--editable",
  EDITING: "mdc-chip--editing",
  HIDDEN_LEADING_ICON: "mdc-chip__icon--leading-hidden",
  LEADING_ICON: "mdc-chip__icon--leading",
  PRIMARY_ACTION: "mdc-chip__primary-action",
  PRIMARY_ACTION_FOCUSED: "mdc-chip--primary-action-focused",
  SELECTED: "mdc-chip--selected",
  TEXT: "mdc-chip__text",
  TRAILING_ACTION: "mdc-chip__trailing-action",
  TRAILING_ICON: "mdc-chip__icon--trailing"
};
var navigationKeys = /* @__PURE__ */ new Set();
navigationKeys.add(strings6.ARROW_LEFT_KEY);
navigationKeys.add(strings6.ARROW_RIGHT_KEY);
navigationKeys.add(strings6.ARROW_DOWN_KEY);
navigationKeys.add(strings6.ARROW_UP_KEY);
navigationKeys.add(strings6.END_KEY);
navigationKeys.add(strings6.HOME_KEY);
navigationKeys.add(strings6.IE_ARROW_LEFT_KEY);
navigationKeys.add(strings6.IE_ARROW_RIGHT_KEY);
navigationKeys.add(strings6.IE_ARROW_DOWN_KEY);
navigationKeys.add(strings6.IE_ARROW_UP_KEY);
var jumpChipKeys = /* @__PURE__ */ new Set();
jumpChipKeys.add(strings6.ARROW_UP_KEY);
jumpChipKeys.add(strings6.ARROW_DOWN_KEY);
jumpChipKeys.add(strings6.HOME_KEY);
jumpChipKeys.add(strings6.END_KEY);
jumpChipKeys.add(strings6.IE_ARROW_UP_KEY);
jumpChipKeys.add(strings6.IE_ARROW_DOWN_KEY);

// node_modules/@material/chips/deprecated/chip/foundation.js
var import_dist313 = __toESM(require_dist());
var import_dist314 = __toESM(require_dist2());
var import_dist315 = __toESM(require_dist3());
var emptyClientRect = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0
};
var FocusBehavior;
(function(FocusBehavior2) {
  FocusBehavior2[FocusBehavior2["SHOULD_FOCUS"] = 0] = "SHOULD_FOCUS";
  FocusBehavior2[FocusBehavior2["SHOULD_NOT_FOCUS"] = 1] = "SHOULD_NOT_FOCUS";
})(FocusBehavior || (FocusBehavior = {}));
var MDCChipFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipFoundation3, _super);
    function MDCChipFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipFoundation3.defaultAdapter), adapter)) || this;
      _this.shouldRemoveOnTrailingIconClick = true;
      _this.shouldFocusPrimaryActionOnClick = true;
      return _this;
    }
    Object.defineProperty(MDCChipFoundation3, "strings", {
      get: function() {
        return strings6;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation3, "cssClasses", {
      get: function() {
        return cssClasses6;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipFoundation3, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          addClassToLeadingIcon: function() {
            return void 0;
          },
          eventTargetHasClass: function() {
            return false;
          },
          focusPrimaryAction: function() {
            return void 0;
          },
          focusTrailingAction: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getCheckmarkBoundingClientRect: function() {
            return emptyClientRect;
          },
          getComputedStyleValue: function() {
            return "";
          },
          getRootBoundingClientRect: function() {
            return emptyClientRect;
          },
          hasClass: function() {
            return false;
          },
          hasLeadingIcon: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          isTrailingActionNavigable: function() {
            return false;
          },
          notifyEditFinish: function() {
            return void 0;
          },
          notifyEditStart: function() {
            return void 0;
          },
          notifyInteraction: function() {
            return void 0;
          },
          notifyNavigation: function() {
            return void 0;
          },
          notifyRemoval: function() {
            return void 0;
          },
          notifySelection: function() {
            return void 0;
          },
          notifyTrailingIconInteraction: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          removeClassFromLeadingIcon: function() {
            return void 0;
          },
          removeTrailingActionFocus: function() {
            return void 0;
          },
          setPrimaryActionAttr: function() {
            return void 0;
          },
          setStyleProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipFoundation3.prototype.isSelected = function() {
      return this.adapter.hasClass(cssClasses6.SELECTED);
    };
    MDCChipFoundation3.prototype.isEditable = function() {
      return this.adapter.hasClass(cssClasses6.EDITABLE);
    };
    MDCChipFoundation3.prototype.isEditing = function() {
      return this.adapter.hasClass(cssClasses6.EDITING);
    };
    MDCChipFoundation3.prototype.setSelected = function(selected) {
      this.setSelectedImpl(selected);
      this.notifySelection(selected);
    };
    MDCChipFoundation3.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
      this.setSelectedImpl(selected);
      if (shouldNotifyClients) {
        this.notifyIgnoredSelection(selected);
      }
    };
    MDCChipFoundation3.prototype.getShouldRemoveOnTrailingIconClick = function() {
      return this.shouldRemoveOnTrailingIconClick;
    };
    MDCChipFoundation3.prototype.setShouldRemoveOnTrailingIconClick = function(shouldRemove) {
      this.shouldRemoveOnTrailingIconClick = shouldRemove;
    };
    MDCChipFoundation3.prototype.setShouldFocusPrimaryActionOnClick = function(shouldFocus) {
      this.shouldFocusPrimaryActionOnClick = shouldFocus;
    };
    MDCChipFoundation3.prototype.getDimensions = function() {
      var _this = this;
      var getRootRect = function() {
        return _this.adapter.getRootBoundingClientRect();
      };
      var getCheckmarkRect = function() {
        return _this.adapter.getCheckmarkBoundingClientRect();
      };
      if (!this.adapter.hasLeadingIcon()) {
        var checkmarkRect = getCheckmarkRect();
        if (checkmarkRect) {
          var rootRect = getRootRect();
          return {
            bottom: rootRect.bottom,
            height: rootRect.height,
            left: rootRect.left,
            right: rootRect.right,
            top: rootRect.top,
            width: rootRect.width + checkmarkRect.height
          };
        }
      }
      return getRootRect();
    };
    MDCChipFoundation3.prototype.beginExit = function() {
      this.adapter.addClass(cssClasses6.CHIP_EXIT);
    };
    MDCChipFoundation3.prototype.handleClick = function() {
      this.adapter.notifyInteraction();
      this.setPrimaryActionFocusable(this.getFocusBehavior());
    };
    MDCChipFoundation3.prototype.handleDoubleClick = function() {
      if (this.isEditable()) {
        this.startEditing();
      }
    };
    MDCChipFoundation3.prototype.handleTransitionEnd = function(evt) {
      var _this = this;
      var shouldHandle = this.adapter.eventTargetHasClass(evt.target, cssClasses6.CHIP_EXIT);
      var widthIsAnimating = evt.propertyName === "width";
      var opacityIsAnimating = evt.propertyName === "opacity";
      if (shouldHandle && opacityIsAnimating) {
        var chipWidth_1 = this.adapter.getComputedStyleValue("width");
        requestAnimationFrame(function() {
          _this.adapter.setStyleProperty("width", chipWidth_1);
          _this.adapter.setStyleProperty("padding", "0");
          _this.adapter.setStyleProperty("margin", "0");
          requestAnimationFrame(function() {
            _this.adapter.setStyleProperty("width", "0");
          });
        });
        return;
      }
      if (shouldHandle && widthIsAnimating) {
        this.removeFocus();
        var removedAnnouncement = this.adapter.getAttribute(strings6.REMOVED_ANNOUNCEMENT_ATTRIBUTE);
        this.adapter.notifyRemoval(removedAnnouncement);
      }
      if (!opacityIsAnimating) {
        return;
      }
      var shouldHideLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses6.LEADING_ICON) && this.adapter.hasClass(cssClasses6.SELECTED);
      var shouldShowLeadingIcon = this.adapter.eventTargetHasClass(evt.target, cssClasses6.CHECKMARK) && !this.adapter.hasClass(cssClasses6.SELECTED);
      if (shouldHideLeadingIcon) {
        this.adapter.addClassToLeadingIcon(cssClasses6.HIDDEN_LEADING_ICON);
        return;
      }
      if (shouldShowLeadingIcon) {
        this.adapter.removeClassFromLeadingIcon(cssClasses6.HIDDEN_LEADING_ICON);
        return;
      }
    };
    MDCChipFoundation3.prototype.handleFocusIn = function(evt) {
      if (!this.eventFromPrimaryAction(evt)) {
        return;
      }
      this.adapter.addClass(cssClasses6.PRIMARY_ACTION_FOCUSED);
    };
    MDCChipFoundation3.prototype.handleFocusOut = function(evt) {
      if (!this.eventFromPrimaryAction(evt)) {
        return;
      }
      if (this.isEditing()) {
        this.finishEditing();
      }
      this.adapter.removeClass(cssClasses6.PRIMARY_ACTION_FOCUSED);
    };
    MDCChipFoundation3.prototype.handleTrailingActionInteraction = function() {
      this.adapter.notifyTrailingIconInteraction();
      this.removeChip();
    };
    MDCChipFoundation3.prototype.handleKeydown = function(evt) {
      if (this.isEditing()) {
        if (this.shouldFinishEditing(evt)) {
          evt.preventDefault();
          this.finishEditing();
        }
        return;
      }
      if (this.isEditable()) {
        if (this.shouldStartEditing(evt)) {
          evt.preventDefault();
          this.startEditing();
        }
      }
      if (this.shouldNotifyInteraction(evt)) {
        this.adapter.notifyInteraction();
        this.setPrimaryActionFocusable(this.getFocusBehavior());
        return;
      }
      if (this.isDeleteAction(evt)) {
        evt.preventDefault();
        this.removeChip();
        return;
      }
      if (!navigationKeys.has(evt.key)) {
        return;
      }
      evt.preventDefault();
      this.focusNextAction(evt.key, EventSource.PRIMARY);
    };
    MDCChipFoundation3.prototype.handleTrailingActionNavigation = function(evt) {
      this.focusNextAction(evt.detail.key, EventSource.TRAILING);
    };
    MDCChipFoundation3.prototype.removeFocus = function() {
      this.adapter.setPrimaryActionAttr(strings6.TAB_INDEX, "-1");
      this.adapter.removeTrailingActionFocus();
    };
    MDCChipFoundation3.prototype.focusPrimaryAction = function() {
      this.setPrimaryActionFocusable(FocusBehavior.SHOULD_FOCUS);
    };
    MDCChipFoundation3.prototype.focusTrailingAction = function() {
      var trailingActionIsNavigable = this.adapter.isTrailingActionNavigable();
      if (trailingActionIsNavigable) {
        this.adapter.setPrimaryActionAttr(strings6.TAB_INDEX, "-1");
        this.adapter.focusTrailingAction();
        return;
      }
      this.focusPrimaryAction();
    };
    MDCChipFoundation3.prototype.setPrimaryActionFocusable = function(focusBehavior) {
      this.adapter.setPrimaryActionAttr(strings6.TAB_INDEX, "0");
      if (focusBehavior === FocusBehavior.SHOULD_FOCUS) {
        this.adapter.focusPrimaryAction();
      }
      this.adapter.removeTrailingActionFocus();
    };
    MDCChipFoundation3.prototype.getFocusBehavior = function() {
      if (this.shouldFocusPrimaryActionOnClick) {
        return FocusBehavior.SHOULD_FOCUS;
      }
      return FocusBehavior.SHOULD_NOT_FOCUS;
    };
    MDCChipFoundation3.prototype.focusNextAction = function(key, source) {
      var isTrailingActionNavigable = this.adapter.isTrailingActionNavigable();
      var dir = this.getDirection(key);
      if (jumpChipKeys.has(key) || !isTrailingActionNavigable) {
        this.adapter.notifyNavigation(key, source);
        return;
      }
      if (source === EventSource.PRIMARY && dir === Direction2.RIGHT) {
        this.focusTrailingAction();
        return;
      }
      if (source === EventSource.TRAILING && dir === Direction2.LEFT) {
        this.focusPrimaryAction();
        return;
      }
      this.adapter.notifyNavigation(key, EventSource.NONE);
    };
    MDCChipFoundation3.prototype.getDirection = function(key) {
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings6.ARROW_LEFT_KEY || key === strings6.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings6.ARROW_RIGHT_KEY || key === strings6.IE_ARROW_RIGHT_KEY;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction2.LEFT;
      }
      return Direction2.RIGHT;
    };
    MDCChipFoundation3.prototype.removeChip = function() {
      if (this.shouldRemoveOnTrailingIconClick) {
        this.beginExit();
      }
    };
    MDCChipFoundation3.prototype.shouldStartEditing = function(evt) {
      return this.eventFromPrimaryAction(evt) && evt.key === strings6.ENTER_KEY;
    };
    MDCChipFoundation3.prototype.shouldFinishEditing = function(evt) {
      return evt.key === strings6.ENTER_KEY;
    };
    MDCChipFoundation3.prototype.shouldNotifyInteraction = function(evt) {
      return evt.key === strings6.ENTER_KEY || evt.key === strings6.SPACEBAR_KEY;
    };
    MDCChipFoundation3.prototype.isDeleteAction = function(evt) {
      var isDeletable = this.adapter.hasClass(cssClasses6.DELETABLE);
      return isDeletable && (evt.key === strings6.BACKSPACE_KEY || evt.key === strings6.DELETE_KEY || evt.key === strings6.IE_DELETE_KEY);
    };
    MDCChipFoundation3.prototype.setSelectedImpl = function(selected) {
      if (selected) {
        this.adapter.addClass(cssClasses6.SELECTED);
        this.adapter.setPrimaryActionAttr(strings6.ARIA_CHECKED, "true");
      } else {
        this.adapter.removeClass(cssClasses6.SELECTED);
        this.adapter.setPrimaryActionAttr(strings6.ARIA_CHECKED, "false");
      }
    };
    MDCChipFoundation3.prototype.notifySelection = function(selected) {
      this.adapter.notifySelection(selected, false);
    };
    MDCChipFoundation3.prototype.notifyIgnoredSelection = function(selected) {
      this.adapter.notifySelection(selected, true);
    };
    MDCChipFoundation3.prototype.eventFromPrimaryAction = function(evt) {
      return this.adapter.eventTargetHasClass(evt.target, cssClasses6.PRIMARY_ACTION);
    };
    MDCChipFoundation3.prototype.startEditing = function() {
      this.adapter.addClass(cssClasses6.EDITING);
      this.adapter.notifyEditStart();
    };
    MDCChipFoundation3.prototype.finishEditing = function() {
      this.adapter.removeClass(cssClasses6.EDITING);
      this.adapter.notifyEditFinish();
    };
    return MDCChipFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/chip/component.js
var MDCChip2 = (
  /** @class */
  function(_super) {
    __extends(MDCChip3, _super);
    function MDCChip3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCChip3.prototype, "selected", {
      /**
       * @return Whether the chip is selected.
       */
      get: function() {
        return this.foundation.isSelected();
      },
      /**
       * Sets selected state on the chip.
       */
      set: function(selected) {
        this.foundation.setSelected(selected);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "shouldRemoveOnTrailingIconClick", {
      /**
       * @return Whether a trailing icon click should trigger exit/removal of the chip.
       */
      get: function() {
        return this.foundation.getShouldRemoveOnTrailingIconClick();
      },
      /**
       * Sets whether a trailing icon click should trigger exit/removal of the chip.
       */
      set: function(shouldRemove) {
        this.foundation.setShouldRemoveOnTrailingIconClick(shouldRemove);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "setShouldFocusPrimaryActionOnClick", {
      /**
       * Sets whether a clicking on the chip should focus the primary action.
       */
      set: function(shouldFocus) {
        this.foundation.setShouldFocusPrimaryActionOnClick(shouldFocus);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChip3.prototype, "id", {
      get: function() {
        return this.root.id;
      },
      enumerable: false,
      configurable: true
    });
    MDCChip3.attachTo = function(root) {
      return new MDCChip3(root);
    };
    MDCChip3.prototype.initialize = function(rippleFactory, trailingActionFactory) {
      var _this = this;
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      if (trailingActionFactory === void 0) {
        trailingActionFactory = function(el) {
          return new MDCChipTrailingAction(el);
        };
      }
      this.leadingIcon = this.root.querySelector(strings6.LEADING_ICON_SELECTOR);
      this.checkmark = this.root.querySelector(strings6.CHECKMARK_SELECTOR);
      this.primaryAction = this.root.querySelector(strings6.PRIMARY_ACTION_SELECTOR);
      var trailingActionEl = this.root.querySelector(strings6.TRAILING_ACTION_SELECTOR);
      if (trailingActionEl) {
        this.trailingAction = trailingActionFactory(trailingActionEl);
      }
      var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.foundation.getDimensions();
      } });
      this.rippleSurface = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCChip3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleTrailingActionInteraction = function() {
        _this.foundation.handleTrailingActionInteraction();
      };
      this.handleTrailingActionNavigation = function(evt) {
        _this.foundation.handleTrailingActionNavigation(evt);
      };
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.handleTransitionEnd = function(evt) {
        _this.foundation.handleTransitionEnd(evt);
      };
      this.handleFocusIn = function(evt) {
        _this.foundation.handleFocusIn(evt);
      };
      this.handleFocusOut = function(evt) {
        _this.foundation.handleFocusOut(evt);
      };
      this.listen("transitionend", this.handleTransitionEnd);
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
      this.listen("focusin", this.handleFocusIn);
      this.listen("focusout", this.handleFocusOut);
      if (this.trailingAction) {
        this.listen(strings5.INTERACTION_EVENT, this.handleTrailingActionInteraction);
        this.listen(strings5.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
      }
    };
    MDCChip3.prototype.destroy = function() {
      this.rippleSurface.destroy();
      this.unlisten("transitionend", this.handleTransitionEnd);
      this.unlisten("keydown", this.handleKeydown);
      this.unlisten("click", this.handleClick);
      this.unlisten("focusin", this.handleFocusIn);
      this.unlisten("focusout", this.handleFocusOut);
      if (this.trailingAction) {
        this.unlisten(strings5.INTERACTION_EVENT, this.handleTrailingActionInteraction);
        this.unlisten(strings5.NAVIGATION_EVENT, this.handleTrailingActionNavigation);
      }
      _super.prototype.destroy.call(this);
    };
    MDCChip3.prototype.beginExit = function() {
      this.foundation.beginExit();
    };
    MDCChip3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        addClassToLeadingIcon: function(className) {
          if (_this.leadingIcon) {
            _this.leadingIcon.classList.add(className);
          }
        },
        eventTargetHasClass: function(target, className) {
          return target ? target.classList.contains(className) : false;
        },
        focusPrimaryAction: function() {
          if (_this.primaryAction) {
            _this.primaryAction.focus();
          }
        },
        focusTrailingAction: function() {
          if (_this.trailingAction) {
            _this.trailingAction.focus();
          }
        },
        getAttribute: function(attr) {
          return _this.root.getAttribute(attr);
        },
        getCheckmarkBoundingClientRect: function() {
          return _this.checkmark ? _this.checkmark.getBoundingClientRect() : null;
        },
        getComputedStyleValue: function(propertyName) {
          return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
        },
        getRootBoundingClientRect: function() {
          return _this.root.getBoundingClientRect();
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        hasLeadingIcon: function() {
          return !!_this.leadingIcon;
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        isTrailingActionNavigable: function() {
          if (_this.trailingAction) {
            return _this.trailingAction.isNavigable();
          }
          return false;
        },
        notifyInteraction: function() {
          return _this.emit(
            strings6.INTERACTION_EVENT,
            { chipId: _this.id },
            true
            /* shouldBubble */
          );
        },
        notifyNavigation: function(key, source) {
          return _this.emit(
            strings6.NAVIGATION_EVENT,
            { chipId: _this.id, key, source },
            true
            /* shouldBubble */
          );
        },
        notifyRemoval: function(removedAnnouncement) {
          _this.emit(
            strings6.REMOVAL_EVENT,
            { chipId: _this.id, removedAnnouncement },
            true
            /* shouldBubble */
          );
        },
        notifySelection: function(selected, shouldIgnore) {
          return _this.emit(
            strings6.SELECTION_EVENT,
            { chipId: _this.id, selected, shouldIgnore },
            true
            /* shouldBubble */
          );
        },
        notifyTrailingIconInteraction: function() {
          return _this.emit(
            strings6.TRAILING_ICON_INTERACTION_EVENT,
            { chipId: _this.id },
            true
            /* shouldBubble */
          );
        },
        notifyEditStart: function() {
        },
        notifyEditFinish: function() {
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        removeClassFromLeadingIcon: function(className) {
          if (_this.leadingIcon) {
            _this.leadingIcon.classList.remove(className);
          }
        },
        removeTrailingActionFocus: function() {
          if (_this.trailingAction) {
            _this.trailingAction.removeFocus();
          }
        },
        setPrimaryActionAttr: function(attr, value) {
          if (_this.primaryAction) {
            _this.primaryAction.setAttribute(attr, value);
          }
        },
        setStyleProperty: function(propertyName, value) {
          return _this.root.style.setProperty(propertyName, value);
        }
      };
      return new MDCChipFoundation2(adapter);
    };
    MDCChip3.prototype.setSelectedFromChipSet = function(selected, shouldNotifyClients) {
      this.foundation.setSelectedFromChipSet(selected, shouldNotifyClients);
    };
    MDCChip3.prototype.focusPrimaryAction = function() {
      this.foundation.focusPrimaryAction();
    };
    MDCChip3.prototype.focusTrailingAction = function() {
      this.foundation.focusTrailingAction();
    };
    MDCChip3.prototype.removeFocus = function() {
      this.foundation.removeFocus();
    };
    MDCChip3.prototype.remove = function() {
      var parent = this.root.parentNode;
      if (parent !== null) {
        parent.removeChild(this.root);
      }
    };
    return MDCChip3;
  }(MDCComponent)
);

// node_modules/@material/chips/deprecated/chip/types.js
var import_dist319 = __toESM(require_dist());
var import_dist320 = __toESM(require_dist2());
var import_dist321 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip-set/index.js
var import_dist337 = __toESM(require_dist());
var import_dist338 = __toESM(require_dist2());
var import_dist339 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip-set/adapter.js
var import_dist325 = __toESM(require_dist());
var import_dist326 = __toESM(require_dist2());
var import_dist327 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip-set/component.js
var import_dist334 = __toESM(require_dist());
var import_dist335 = __toESM(require_dist2());
var import_dist336 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip-set/foundation.js
var import_dist331 = __toESM(require_dist());
var import_dist332 = __toESM(require_dist2());
var import_dist333 = __toESM(require_dist3());

// node_modules/@material/chips/deprecated/chip-set/constants.js
var import_dist328 = __toESM(require_dist());
var import_dist329 = __toESM(require_dist2());
var import_dist330 = __toESM(require_dist3());
var strings7 = {
  CHIP_SELECTOR: ".mdc-chip"
};
var cssClasses7 = {
  CHOICE: "mdc-chip-set--choice",
  FILTER: "mdc-chip-set--filter"
};

// node_modules/@material/chips/deprecated/chip-set/foundation.js
var MDCChipSetFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipSetFoundation3, _super);
    function MDCChipSetFoundation3(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCChipSetFoundation3.defaultAdapter), adapter)) || this;
      _this.selectedChipIds = [];
      return _this;
    }
    Object.defineProperty(MDCChipSetFoundation3, "strings", {
      get: function() {
        return strings7;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation3, "cssClasses", {
      get: function() {
        return cssClasses7;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSetFoundation3, "defaultAdapter", {
      get: function() {
        return {
          announceMessage: function() {
            return void 0;
          },
          focusChipPrimaryActionAtIndex: function() {
            return void 0;
          },
          focusChipTrailingActionAtIndex: function() {
            return void 0;
          },
          getChipListCount: function() {
            return -1;
          },
          getIndexOfChipById: function() {
            return -1;
          },
          hasClass: function() {
            return false;
          },
          isRTL: function() {
            return false;
          },
          removeChipAtIndex: function() {
            return void 0;
          },
          removeFocusFromChipAtIndex: function() {
            return void 0;
          },
          selectChipAtIndex: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSetFoundation3.prototype.getSelectedChipIds = function() {
      return this.selectedChipIds.slice();
    };
    MDCChipSetFoundation3.prototype.select = function(chipId2) {
      this.selectImpl(chipId2, false);
    };
    MDCChipSetFoundation3.prototype.handleChipInteraction = function(_a2) {
      var chipId2 = _a2.chipId;
      var index = this.adapter.getIndexOfChipById(chipId2);
      this.removeFocusFromChipsExcept(index);
      if (this.adapter.hasClass(cssClasses7.CHOICE) || this.adapter.hasClass(cssClasses7.FILTER)) {
        this.toggleSelect(chipId2);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipSelection = function(_a2) {
      var chipId2 = _a2.chipId, selected = _a2.selected, shouldIgnore = _a2.shouldIgnore;
      if (shouldIgnore) {
        return;
      }
      var chipIsSelected = this.selectedChipIds.indexOf(chipId2) >= 0;
      if (selected && !chipIsSelected) {
        this.select(chipId2);
      } else if (!selected && chipIsSelected) {
        this.deselectImpl(chipId2);
      }
    };
    MDCChipSetFoundation3.prototype.handleChipRemoval = function(_a2) {
      var chipId2 = _a2.chipId, removedAnnouncement = _a2.removedAnnouncement;
      if (removedAnnouncement) {
        this.adapter.announceMessage(removedAnnouncement);
      }
      var index = this.adapter.getIndexOfChipById(chipId2);
      this.deselectAndNotifyClients(chipId2);
      this.adapter.removeChipAtIndex(index);
      var maxIndex = this.adapter.getChipListCount() - 1;
      if (maxIndex < 0) {
        return;
      }
      var nextIndex = Math.min(index, maxIndex);
      this.removeFocusFromChipsExcept(nextIndex);
      this.adapter.focusChipTrailingActionAtIndex(nextIndex);
    };
    MDCChipSetFoundation3.prototype.handleChipNavigation = function(_a2) {
      var chipId2 = _a2.chipId, key = _a2.key, source = _a2.source;
      var maxIndex = this.adapter.getChipListCount() - 1;
      var index = this.adapter.getIndexOfChipById(chipId2);
      if (index === -1 || !navigationKeys.has(key)) {
        return;
      }
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings6.ARROW_LEFT_KEY || key === strings6.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings6.ARROW_RIGHT_KEY || key === strings6.IE_ARROW_RIGHT_KEY;
      var isDownKey = key === strings6.ARROW_DOWN_KEY || key === strings6.IE_ARROW_DOWN_KEY;
      var shouldIncrement = !isRTL && isRightKey || isRTL && isLeftKey || isDownKey;
      var isHome = key === strings6.HOME_KEY;
      var isEnd = key === strings6.END_KEY;
      if (shouldIncrement) {
        index++;
      } else if (isHome) {
        index = 0;
      } else if (isEnd) {
        index = maxIndex;
      } else {
        index--;
      }
      if (index < 0 || index > maxIndex) {
        return;
      }
      this.removeFocusFromChipsExcept(index);
      this.focusChipAction(index, key, source);
    };
    MDCChipSetFoundation3.prototype.focusChipAction = function(index, key, source) {
      var shouldJumpChips = jumpChipKeys.has(key);
      if (shouldJumpChips && source === EventSource.PRIMARY) {
        return this.adapter.focusChipPrimaryActionAtIndex(index);
      }
      if (shouldJumpChips && source === EventSource.TRAILING) {
        return this.adapter.focusChipTrailingActionAtIndex(index);
      }
      var dir = this.getDirection(key);
      if (dir === Direction2.LEFT) {
        return this.adapter.focusChipTrailingActionAtIndex(index);
      }
      if (dir === Direction2.RIGHT) {
        return this.adapter.focusChipPrimaryActionAtIndex(index);
      }
    };
    MDCChipSetFoundation3.prototype.getDirection = function(key) {
      var isRTL = this.adapter.isRTL();
      var isLeftKey = key === strings6.ARROW_LEFT_KEY || key === strings6.IE_ARROW_LEFT_KEY;
      var isRightKey = key === strings6.ARROW_RIGHT_KEY || key === strings6.IE_ARROW_RIGHT_KEY;
      if (!isRTL && isLeftKey || isRTL && isRightKey) {
        return Direction2.LEFT;
      }
      return Direction2.RIGHT;
    };
    MDCChipSetFoundation3.prototype.deselectImpl = function(chipId2, shouldNotifyClients) {
      if (shouldNotifyClients === void 0) {
        shouldNotifyClients = false;
      }
      var index = this.selectedChipIds.indexOf(chipId2);
      if (index >= 0) {
        this.selectedChipIds.splice(index, 1);
        var chipIndex = this.adapter.getIndexOfChipById(chipId2);
        this.adapter.selectChipAtIndex(
          chipIndex,
          /** isSelected */
          false,
          shouldNotifyClients
        );
      }
    };
    MDCChipSetFoundation3.prototype.deselectAndNotifyClients = function(chipId2) {
      this.deselectImpl(chipId2, true);
    };
    MDCChipSetFoundation3.prototype.toggleSelect = function(chipId2) {
      if (this.selectedChipIds.indexOf(chipId2) >= 0) {
        this.deselectAndNotifyClients(chipId2);
      } else {
        this.selectAndNotifyClients(chipId2);
      }
    };
    MDCChipSetFoundation3.prototype.removeFocusFromChipsExcept = function(index) {
      var chipCount = this.adapter.getChipListCount();
      for (var i = 0; i < chipCount; i++) {
        if (i !== index) {
          this.adapter.removeFocusFromChipAtIndex(i);
        }
      }
    };
    MDCChipSetFoundation3.prototype.selectAndNotifyClients = function(chipId2) {
      this.selectImpl(chipId2, true);
    };
    MDCChipSetFoundation3.prototype.selectImpl = function(chipId2, shouldNotifyClients) {
      if (this.selectedChipIds.indexOf(chipId2) >= 0) {
        return;
      }
      if (this.adapter.hasClass(cssClasses7.CHOICE) && this.selectedChipIds.length > 0) {
        var previouslySelectedChip = this.selectedChipIds[0];
        var previouslySelectedIndex = this.adapter.getIndexOfChipById(previouslySelectedChip);
        this.selectedChipIds = [];
        this.adapter.selectChipAtIndex(
          previouslySelectedIndex,
          /** isSelected */
          false,
          shouldNotifyClients
        );
      }
      this.selectedChipIds.push(chipId2);
      var index = this.adapter.getIndexOfChipById(chipId2);
      this.adapter.selectChipAtIndex(
        index,
        /** isSelected */
        true,
        shouldNotifyClients
      );
    };
    return MDCChipSetFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/chips/deprecated/chip-set/component.js
var _a = MDCChipFoundation2.strings;
var INTERACTION_EVENT = _a.INTERACTION_EVENT;
var SELECTION_EVENT = _a.SELECTION_EVENT;
var REMOVAL_EVENT = _a.REMOVAL_EVENT;
var NAVIGATION_EVENT = _a.NAVIGATION_EVENT;
var CHIP_SELECTOR = MDCChipSetFoundation2.strings.CHIP_SELECTOR;
var idCounter = 0;
var MDCChipSet2 = (
  /** @class */
  function(_super) {
    __extends(MDCChipSet3, _super);
    function MDCChipSet3() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCChipSet3.attachTo = function(root) {
      return new MDCChipSet3(root);
    };
    Object.defineProperty(MDCChipSet3.prototype, "chips", {
      get: function() {
        return this.chipsList.slice();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCChipSet3.prototype, "selectedChipIds", {
      /**
       * @return An array of the IDs of all selected chips.
       */
      get: function() {
        return this.foundation.getSelectedChipIds();
      },
      enumerable: false,
      configurable: true
    });
    MDCChipSet3.prototype.initialize = function(chipFactory) {
      if (chipFactory === void 0) {
        chipFactory = function(el) {
          return new MDCChip2(el);
        };
      }
      this.chipFactory = chipFactory;
      this.chipsList = this.instantiateChips(this.chipFactory);
    };
    MDCChipSet3.prototype.initialSyncWithDOM = function() {
      var e_1, _a2;
      var _this = this;
      try {
        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var chip = _c.value;
          if (chip.id && chip.selected) {
            this.foundation.select(chip.id);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      this.handleChipInteraction = function(evt) {
        return _this.foundation.handleChipInteraction(evt.detail);
      };
      this.handleChipSelection = function(evt) {
        return _this.foundation.handleChipSelection(evt.detail);
      };
      this.handleChipRemoval = function(evt) {
        return _this.foundation.handleChipRemoval(evt.detail);
      };
      this.handleChipNavigation = function(evt) {
        return _this.foundation.handleChipNavigation(evt.detail);
      };
      this.listen(INTERACTION_EVENT, this.handleChipInteraction);
      this.listen(SELECTION_EVENT, this.handleChipSelection);
      this.listen(REMOVAL_EVENT, this.handleChipRemoval);
      this.listen(NAVIGATION_EVENT, this.handleChipNavigation);
    };
    MDCChipSet3.prototype.destroy = function() {
      var e_2, _a2;
      try {
        for (var _b = __values(this.chipsList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var chip = _c.value;
          chip.destroy();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      this.unlisten(INTERACTION_EVENT, this.handleChipInteraction);
      this.unlisten(SELECTION_EVENT, this.handleChipSelection);
      this.unlisten(REMOVAL_EVENT, this.handleChipRemoval);
      this.unlisten(NAVIGATION_EVENT, this.handleChipNavigation);
      _super.prototype.destroy.call(this);
    };
    MDCChipSet3.prototype.addChip = function(chipEl) {
      chipEl.id = chipEl.id || "mdc-chip-" + ++idCounter;
      this.chipsList.push(this.chipFactory(chipEl));
    };
    MDCChipSet3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        announceMessage: function(message) {
          announce(message);
        },
        focusChipPrimaryActionAtIndex: function(index) {
          _this.chipsList[index].focusPrimaryAction();
        },
        focusChipTrailingActionAtIndex: function(index) {
          _this.chipsList[index].focusTrailingAction();
        },
        getChipListCount: function() {
          return _this.chips.length;
        },
        getIndexOfChipById: function(chipId2) {
          return _this.findChipIndex(chipId2);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        removeChipAtIndex: function(index) {
          if (index >= 0 && index < _this.chips.length) {
            _this.chipsList[index].destroy();
            _this.chipsList[index].remove();
            _this.chipsList.splice(index, 1);
          }
        },
        removeFocusFromChipAtIndex: function(index) {
          _this.chipsList[index].removeFocus();
        },
        selectChipAtIndex: function(index, selected, shouldNotifyClients) {
          if (index >= 0 && index < _this.chips.length) {
            _this.chipsList[index].setSelectedFromChipSet(selected, shouldNotifyClients);
          }
        }
      };
      return new MDCChipSetFoundation2(adapter);
    };
    MDCChipSet3.prototype.instantiateChips = function(chipFactory) {
      var chipElements = [].slice.call(this.root.querySelectorAll(CHIP_SELECTOR));
      return chipElements.map(function(el) {
        el.id = el.id || "mdc-chip-" + ++idCounter;
        return chipFactory(el);
      });
    };
    MDCChipSet3.prototype.findChipIndex = function(chipId2) {
      for (var i = 0; i < this.chips.length; i++) {
        if (this.chipsList[i].id === chipId2) {
          return i;
        }
      }
      return -1;
    };
    return MDCChipSet3;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip/mdc-chip.html?raw
var mdc_chip_default = `<template class="
    mdc-evolution-chip
    \${filter ? 'mdc-evolution-chip--selectable' : ''}
    \${disabled ? 'mdc-evolution-chip--disabled' : ''}
    \${icon ? 'mdc-evolution-chip--with-primary-icon' : ''}
  " role="row" mdcchipaction:interaction.trigger="handleActionInteraction($event)"
  mdcchipaction:navigation.trigger="handleActionNavigation($event)" animationend.trigger="handleAnimationEnd($event)"
  transitionend.trigger="handleTransitionEnd()">

  <span class="mdc-evolution-chip__cell mdc-evolution-chip__cell--primary" role="gridcell">
    <au-slot name="primary-action">
      <button mdc-chip-action selectable.bind="filter" disabled.bind="disabled"
        icon.bind="icon">
        <au-slot></au-slot>
      </button>
    </au-slot>
  </span>

  <span class="mdc-evolution-chip__cell mdc-evolution-chip__cell--trailing" role="gridcell">
    <au-slot name="trailing-action"></au-slot>
  </span>

  <au-slot name="non-navigable-trailing-action"></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip/mdc-chip.js
MDCChipEvents.INTERACTION = MDCChipEvents.INTERACTION.toLowerCase();
MDCChipEvents.ANIMATION = MDCChipEvents.ANIMATION.toLowerCase();
MDCChipEvents.NAVIGATION = MDCChipEvents.NAVIGATION.toLowerCase();
var chipId = 0;
var MdcChip = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-chip", template: mdc_chip_default }), processContent(function processContent2(node, platform) {
    const element = node;
    const primaryAction = element.querySelector('[as-element="mdc-chip-action"]:not([trailing])');
    if (primaryAction) {
      primaryAction.setAttribute("au-slot", "primary-action");
      primaryAction.remove();
    }
    const trailingAction = element.querySelector('[as-element="mdc-chip-action"][trailing]');
    if (trailingAction) {
      trailingAction.setAttribute("au-slot", trailingAction.hasAttribute("non-navigable") ? "non-navigable-trailing-action" : "trailing-action");
      trailingAction.remove();
    }
    const template = platform.document.createElement("template");
    template.setAttribute("au-slot", "");
    template.innerHTML = element.innerHTML;
    element.innerHTML = "";
    element.appendChild(template);
    if (primaryAction) {
      element.appendChild(primaryAction);
    }
    if (trailingAction) {
      element.appendChild(trailingAction);
    }
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent6;
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _filter_decorators;
  let _filter_initializers = [];
  let _filter_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  var MdcChip2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.disabled = __runInitializers(this, _disabled_initializers, void 0);
      this.filter = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _filter_initializers, void 0));
      this.icon = (__runInitializers(this, _filter_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.actions = __runInitializers(this, _icon_extraInitializers);
      defineMdcChipElementApis(this.root);
      this.root.id = `mdc-chip-${++chipId}`;
    }
    /**
     * @return Whether the chip is selected.
     */
    get selected() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isActionSelected(MDCChipActionType.PRIMARY)) ?? this._selected;
    }
    /** Sets selected state on the chip. */
    set selected(selected) {
      var _a2;
      this._selected = selected;
      (_a2 = this.foundation) == null ? void 0 : _a2.setActionSelected(MDCChipActionType.PRIMARY, selected);
    }
    filterChanged() {
      if (this.filter) {
        this.root.setAttribute("role", "presentation");
      } else {
        this.root.setAttribute("role", "row");
      }
    }
    beforeFoundationCreated() {
      this.actions = /* @__PURE__ */ new Map();
      const primaryAction = CustomElement.for(this.root.querySelector(".mdc-evolution-chip__action--primary")).viewModel;
      this.actions.set(MDCChipActionType.PRIMARY, primaryAction);
      const trailingAction = this.root.querySelector(".mdc-evolution-chip__action--trailing");
      if (trailingAction) {
        this.actions.set(MDCChipActionType.TRAILING, CustomElement.for(trailingAction).viewModel);
      }
    }
    initialSyncWithDOM() {
      this.filterChanged();
      if (this._selected !== void 0) {
        this.selected = this._selected;
      }
    }
    /** Set focus to the chip. */
    focus() {
      this.root.focus();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => {
          this.root.classList.add(className);
        },
        emitEvent: (eventName, eventDetail) => {
          this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getActions: () => {
          const actions = [];
          for (const [key] of this.actions) {
            actions.push(key);
          }
          return actions;
        },
        getAttribute: (attrName) => this.root.getAttribute(attrName),
        getElementID: () => this.root.id,
        getOffsetWidth: () => {
          return this.root.offsetWidth;
        },
        hasClass: (className) => this.root.classList.contains(className),
        isActionSelectable: (actionType) => {
          const action = this.actions.get(actionType);
          if (action) {
            return action.selectable;
          }
          return false;
        },
        isActionSelected: (actionType) => {
          const action = this.actions.get(actionType);
          if (action) {
            return action.selected;
          }
          return false;
        },
        isActionFocusable: (actionType) => {
          const action = this.actions.get(actionType);
          if (action) {
            return action.isFocusable();
          }
          return false;
        },
        isActionDisabled: (actionType) => {
          const action = this.actions.get(actionType);
          if (action) {
            return action.disabled;
          }
          return false;
        },
        isRTL: () => window.getComputedStyle(this.root).getPropertyValue("direction") === "rtl",
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        setActionDisabled: (actionType, isDisabled) => {
          const action = this.actions.get(actionType);
          if (action) {
            action.disabled = isDisabled;
          }
        },
        setActionFocus: (actionType, behavior) => {
          const action = this.actions.get(actionType);
          if (action) {
            action.setFocus(behavior);
          }
        },
        setActionSelected: (actionType, isSelected) => {
          const action = this.actions.get(actionType);
          if (action) {
            if (action.selected !== isSelected) {
              action.selected = isSelected;
            }
          }
        },
        setStyleProperty: (prop, value) => {
          this.root.style.setProperty(prop, value);
        }
      };
      return new MDCChipFoundation(adapter);
    }
    handleActionInteraction(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleActionInteraction(event);
      this.emit("change", {}, true);
    }
    handleActionNavigation(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleActionNavigation(event);
    }
    handleAnimationEnd(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnimationEnd(event);
    }
    handleTransitionEnd() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleTransitionEnd();
    }
    getActions() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.getActions()) ?? [];
    }
    getElementID() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.getElementID()) ?? "";
    }
    isActionFocusable(action) {
      return this.foundation.isActionFocusable(action);
    }
    isActionSelectable(action) {
      return this.foundation.isActionSelectable(action);
    }
    isActionSelected(action) {
      return this.foundation.isActionSelected(action);
    }
    setActionFocus(action, focus) {
      this.foundation.setActionFocus(action, focus);
    }
    setActionSelected(action, isSelected) {
      this.foundation.setActionSelected(action, isSelected);
    }
    startAnimation(animation) {
      this.foundation.startAnimation(animation);
    }
    remove() {
      const parent = this.root.parentNode;
      if (parent !== null) {
        parent.removeChild(this.root);
      }
    }
  };
  __setFunctionName(_classThis, "MdcChip");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _disabled_decorators = [bindable({ set: booleanAttr6 })];
    _filter_decorators = [bindable({ set: booleanAttr6 })];
    _icon_decorators = [bindable()];
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _filter_decorators, { kind: "field", name: "filter", static: false, private: false, access: { has: (obj) => "filter" in obj, get: (obj) => obj.filter, set: (obj, value) => {
      obj.filter = value;
    } }, metadata: _metadata }, _filter_initializers, _filter_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcChip2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcChip2 = _classThis;
})();
function defineMdcChipElementApis(element) {
  Object.defineProperties(element, {
    type: {
      value: "checkbox"
    },
    checked: {
      get() {
        const chip = CustomElement.for(this).viewModel;
        return chip.selected;
      },
      set(value) {
        CustomElement.for(this).viewModel.selected = value;
      },
      configurable: true
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-action/mdc-chip-action.js
var import_dist349 = __toESM(require_dist());
var import_dist350 = __toESM(require_dist2());
var import_dist351 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-action/mdc-chip-action.html?raw
var mdc_chip_action_default = `<template class="
    mdc-evolution-chip__action
    \${trailing ? 'mdc-evolution-chip__action--trailing' : 'mdc-evolution-chip__action--primary'}
  " click.trigger="handleClick()" keydown.trigger="handleKeydown($event)"
  mdc-ripple="no-class.bind: true; compute-bounding-rect.bind: computeRippleClientRect">
  <span class="
      mdc-evolution-chip__ripple
      \${trailing ? 'mdc-evolution-chip__ripple--trailing' : 'mdc-evolution-chip__ripple--primary'}
    "></span>
  <span class="mdc-evolution-chip__icon mdc-evolution-chip__icon--trailing material-icons"
    if.bind="trailing && icon">\${icon}</span>
  <span class="mdc-evolution-chip__graphic" if.bind="!trailing && (icon || selectable)">
    <span if.bind="icon"
      class="mdc-evolution-chip__icon \${trailing ? '' : 'mdc-evolution-chip__icon--primary'} material-icons">\${icon}</span>
    <span class="mdc-evolution-chip__checkmark" if.bind="selectable">
      <svg class="mdc-evolution-chip__checkmark-svg" viewBox="-2 -3 30 30">
        <path class="mdc-evolution-chip__checkmark-path" fill="none" stroke="black"
          d="M1.73,12.91 8.1,19.28 22.79,4.59" />
      </svg>
    </span>
  </span>
  <span class="mdc-evolution-chip__text-label">
    <au-slot></au-slot>
  </span>
</template>
`;

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-action/mdc-chip-action.js
MDCChipActionEvents.INTERACTION = MDCChipActionEvents.INTERACTION.toLowerCase();
MDCChipActionEvents.NAVIGATION = MDCChipActionEvents.NAVIGATION.toLowerCase();
var actionId = 0;
var MdcChipAction = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-chip-action", template: mdc_chip_action_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent6;
  let _selectable_decorators;
  let _selectable_initializers = [];
  let _selectable_extraInitializers = [];
  let _trailing_decorators;
  let _trailing_initializers = [];
  let _trailing_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  var MdcChipAction2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.root = root;
      this.selectable = __runInitializers(this, _selectable_initializers, void 0);
      this._selected = __runInitializers(this, _selectable_extraInitializers);
      this.trailing = __runInitializers(this, _trailing_initializers, void 0);
      this.icon = (__runInitializers(this, _trailing_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.disabled = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      this.computeRippleClientRect = (__runInitializers(this, _disabled_extraInitializers), () => {
        if (this.root.classList.contains(MDCChipActionCssClasses.PRIMARY_ACTION)) {
          const chipRoot = closest(this.root, `.${MDCChipActionCssClasses.CHIP_ROOT}`);
          if (!chipRoot) {
            return this.root.getBoundingClientRect();
          }
          const graphicWidth = window.getComputedStyle(chipRoot).getPropertyValue(GRAPHIC_SELECTED_WIDTH_STYLE_PROP);
          return computePrimaryActionRippleClientRect(chipRoot.getBoundingClientRect(), graphicWidth);
        }
        return this.root.getBoundingClientRect();
      });
      this.root.id = `mdc-chip-action-${++actionId}`;
    }
    selectableChanged() {
      if (this.selectable) {
        this.root.setAttribute("role", "option");
      } else {
        this.root.removeAttribute("role");
      }
    }
    get selected() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isSelected()) ?? this._selected;
    }
    set selected(value) {
      var _a2;
      this._selected = value;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelected(value);
    }
    async disabledChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setDisabled(this.disabled);
      if (this.disabled) {
        this.root.setAttribute("disabled", "true");
      } else {
        this.root.removeAttribute("disabled");
      }
    }
    initialSyncWithDOM() {
      this.selectableChanged();
      this.disabledChanged();
      if (this._selected !== void 0) {
        this.selected = this._selected;
      }
    }
    handleClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick();
    }
    handleKeydown(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(event);
    }
    getDefaultFoundation() {
      const adapter = {
        emitEvent: (eventName, eventDetail) => {
          this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        focus: () => {
          this.root.focus();
        },
        getAttribute: (attrName) => this.root.getAttribute(attrName),
        getElementID: () => this.root.id,
        removeAttribute: (name) => {
          this.root.removeAttribute(name);
        },
        setAttribute: (name, value) => {
          this.root.setAttribute(name, value);
        }
      };
      if (this.root.classList.contains(MDCChipActionCssClasses.TRAILING_ACTION)) {
        return new MDCChipTrailingActionFoundation(adapter);
      }
      return new MDCChipPrimaryActionFoundation(adapter);
    }
    isFocusable() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isFocusable()) ?? false;
    }
    setFocus(behavior) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setFocus(behavior);
    }
  };
  __setFunctionName(_classThis, "MdcChipAction");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _selectable_decorators = [bindable({ set: booleanAttr6 })];
    _trailing_decorators = [bindable({ set: booleanAttr6 })];
    _icon_decorators = [bindable()];
    _disabled_decorators = [bindable({ set: booleanAttr6 })];
    __esDecorate(null, null, _selectable_decorators, { kind: "field", name: "selectable", static: false, private: false, access: { has: (obj) => "selectable" in obj, get: (obj) => obj.selectable, set: (obj, value) => {
      obj.selectable = value;
    } }, metadata: _metadata }, _selectable_initializers, _selectable_extraInitializers);
    __esDecorate(null, null, _trailing_decorators, { kind: "field", name: "trailing", static: false, private: false, access: { has: (obj) => "trailing" in obj, get: (obj) => obj.trailing, set: (obj, value) => {
      obj.trailing = value;
    } }, metadata: _metadata }, _trailing_initializers, _trailing_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcChipAction2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcChipAction2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-set/mdc-chip-set.js
var import_dist352 = __toESM(require_dist());
var import_dist353 = __toESM(require_dist2());
var import_dist354 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-set/mdc-chip-set.html?raw
var mdc_chip_set_default = `<template class="
    mdc-evolution-chip-set
    \${overflow ? 'mdc-evolution-chip-set--overflow' : ''}
  " role="grid" mdcchip:interaction.trigger="handleChipInteraction($event)"
  mdcchip:animation.trigger="handleChipAnimation($event)"
  mdcchip:navigation.trigger="handleChipNavigation($event)">
  <span class="mdc-evolution-chip-set__chips" role="presentation">
    <au-slot></au-slot>
  </span>
</template>
`;

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-set/mdc-chip-set.js
MDCChipSetEvents.INTERACTION = MDCChipSetEvents.INTERACTION.toLowerCase();
MDCChipSetEvents.REMOVAL = MDCChipSetEvents.REMOVAL.toLowerCase();
MDCChipSetEvents.SELECTION = MDCChipSetEvents.SELECTION.toLowerCase();
var chipSetId = 0;
var MdcChipSet = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-chip-set", template: mdc_chip_set_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent6;
  let _overflow_decorators;
  let _overflow_initializers = [];
  let _overflow_extraInitializers = [];
  let _chipElements_decorators;
  let _chipElements_initializers = [];
  let _chipElements_extraInitializers = [];
  var MdcChipSet2 = _classThis = class extends _classSuper {
    get chips() {
      return (this.chipElements ?? []).map((x) => CustomElement.for(x).viewModel);
    }
    handleChipInteraction(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChipInteraction(event);
    }
    handleChipAnimation(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChipAnimation(event);
    }
    handleChipNavigation(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChipNavigation(event);
    }
    getDefaultFoundation() {
      const adapter = {
        announceMessage: (message) => {
          announce(message);
        },
        emitEvent: (eventName, eventDetail) => {
          this.emit(
            eventName,
            eventDetail,
            true
            /* shouldBubble */
          );
        },
        getAttribute: (attrName) => this.root.getAttribute(attrName),
        getChipActionsAtIndex: (index) => {
          if (!this.isIndexValid(index)) {
            return [];
          }
          return this.chips[index].getActions();
        },
        getChipCount: () => this.chips.length,
        getChipIdAtIndex: (index) => {
          if (!this.isIndexValid(index)) {
            return "";
          }
          return this.chips[index].getElementID();
        },
        getChipIndexById: (id5) => this.chips.findIndex((chip) => chip.getElementID() === id5),
        isChipFocusableAtIndex: (index, action) => {
          if (!this.isIndexValid(index)) {
            return false;
          }
          return this.chips[index].isActionFocusable(action);
        },
        isChipSelectableAtIndex: (index, action) => {
          if (!this.isIndexValid(index)) {
            return false;
          }
          return this.chips[index].isActionSelectable(action);
        },
        isChipSelectedAtIndex: (index, action) => {
          if (!this.isIndexValid(index)) {
            return false;
          }
          return this.chips[index].isActionSelected(action);
        },
        removeChipAtIndex: (index) => {
          if (!this.isIndexValid(index)) {
            return;
          }
          this.chips[index].destroy();
          this.chips[index].remove();
          this.chips.splice(index, 1);
        },
        setChipFocusAtIndex: (index, action, focus) => {
          if (!this.isIndexValid(index)) {
            return;
          }
          this.chips[index].setActionFocus(action, focus);
        },
        setChipSelectedAtIndex: (index, action, selected) => {
          if (!this.isIndexValid(index)) {
            return;
          }
          this.chips[index].setActionSelected(action, selected);
        },
        startChipAnimationAtIndex: (index, animation) => {
          if (!this.isIndexValid(index)) {
            return;
          }
          this.chips[index].startAnimation(animation);
        }
      };
      return new MDCChipSetFoundation(adapter);
    }
    isIndexValid(index) {
      return index > -1 && index < this.chips.length;
    }
    constructor() {
      super(...arguments);
      this.id = `mdc-chip-set-${++chipSetId}`;
      this.overflow = __runInitializers(this, _overflow_initializers, void 0);
      this.chipElements = (__runInitializers(this, _overflow_extraInitializers), __runInitializers(this, _chipElements_initializers, void 0));
      __runInitializers(this, _chipElements_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcChipSet");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _overflow_decorators = [bindable({ set: booleanAttr6 })];
    _chipElements_decorators = [slotted({ query: "mdc-chip" })];
    __esDecorate(null, null, _overflow_decorators, { kind: "field", name: "overflow", static: false, private: false, access: { has: (obj) => "overflow" in obj, get: (obj) => obj.overflow, set: (obj, value) => {
      obj.overflow = value;
    } }, metadata: _metadata }, _overflow_initializers, _overflow_extraInitializers);
    __esDecorate(null, null, _chipElements_decorators, { kind: "field", name: "chipElements", static: false, private: false, access: { has: (obj) => "chipElements" in obj, get: (obj) => obj.chipElements, set: (obj, value) => {
      obj.chipElements = value;
    } }, metadata: _metadata }, _chipElements_initializers, _chipElements_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcChipSet2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcChipSet2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/chips/dist/mdc-chip-action/enhance-mdc-chip-action.js
var import_dist355 = __toESM(require_dist());
var import_dist356 = __toESM(require_dist2());
var import_dist357 = __toESM(require_dist3());
var EnhanceMdcChipAction = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcChipAction2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-chip-action=""', 'as-element="mdc-chip-action"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcChipAction");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcChipAction2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcChipAction2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/chips/dist/index.js
var configured2 = false;
var ChipsConfiguration = {
  register(container) {
    if (configured2) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.tagName === "MDC-CHIP" ? property === "checked" : false);
        nodeObserverLocator.useConfig("MDC-CHIP", "checked", { events: ["change"], type: CheckedObserver });
      }).register(container);
      configured2 = true;
      return container.register(MdcChip, MdcChipAction, EnhanceMdcChipAction, MdcChipSet, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/circular-progress/dist/index.js
var import_dist400 = __toESM(require_dist());
var import_dist401 = __toESM(require_dist2());
var import_dist402 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/circular-progress/dist/mdc-circular-progress.js
var import_dist397 = __toESM(require_dist());
var import_dist398 = __toESM(require_dist2());
var import_dist399 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist379 = __toESM(require_dist());
var import_dist380 = __toESM(require_dist2());
var import_dist381 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist364 = __toESM(require_dist());
var import_dist365 = __toESM(require_dist2());
var import_dist366 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist361 = __toESM(require_dist());
var import_dist362 = __toESM(require_dist2());
var import_dist363 = __toESM(require_dist3());
function number7(a) {
  return Number(a);
}
function booleanAttr7(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap7 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr7 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr7 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr7 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist367 = __toESM(require_dist());
var import_dist368 = __toESM(require_dist2());
var import_dist369 = __toESM(require_dist3());
var MdcPromisifyReference7 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist370 = __toESM(require_dist());
var import_dist371 = __toESM(require_dist2());
var import_dist372 = __toESM(require_dist3());
var MdcComponent7 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist373 = __toESM(require_dist());
var import_dist374 = __toESM(require_dist2());
var import_dist375 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/circular-progress/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist376 = __toESM(require_dist());
var import_dist377 = __toESM(require_dist2());
var import_dist378 = __toESM(require_dist3());

// node_modules/@material/circular-progress/index.js
var import_dist394 = __toESM(require_dist());
var import_dist395 = __toESM(require_dist2());
var import_dist396 = __toESM(require_dist3());

// node_modules/@material/circular-progress/adapter.js
var import_dist382 = __toESM(require_dist());
var import_dist383 = __toESM(require_dist2());
var import_dist384 = __toESM(require_dist3());

// node_modules/@material/circular-progress/component.js
var import_dist391 = __toESM(require_dist());
var import_dist392 = __toESM(require_dist2());
var import_dist393 = __toESM(require_dist3());

// node_modules/@material/circular-progress/foundation.js
var import_dist388 = __toESM(require_dist());
var import_dist389 = __toESM(require_dist2());
var import_dist390 = __toESM(require_dist3());

// node_modules/@material/circular-progress/constants.js
var import_dist385 = __toESM(require_dist());
var import_dist386 = __toESM(require_dist2());
var import_dist387 = __toESM(require_dist3());
var cssClasses8 = {
  INDETERMINATE_CLASS: "mdc-circular-progress--indeterminate",
  CLOSED_CLASS: "mdc-circular-progress--closed"
};
var strings8 = {
  ARIA_HIDDEN: "aria-hidden",
  ARIA_VALUENOW: "aria-valuenow",
  DETERMINATE_CIRCLE_SELECTOR: ".mdc-circular-progress__determinate-circle",
  RADIUS: "r",
  STROKE_DASHOFFSET: "stroke-dashoffset"
};

// node_modules/@material/circular-progress/foundation.js
var MDCCircularProgressFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCCircularProgressFoundation2, _super);
    function MDCCircularProgressFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCCircularProgressFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCCircularProgressFoundation2, "cssClasses", {
      get: function() {
        return cssClasses8;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCircularProgressFoundation2, "strings", {
      get: function() {
        return strings8;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCircularProgressFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          getDeterminateCircleAttribute: function() {
            return null;
          },
          hasClass: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          removeAttribute: function() {
            return void 0;
          },
          setAttribute: function() {
            return void 0;
          },
          setDeterminateCircleAttribute: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCCircularProgressFoundation2.prototype.init = function() {
      this.closed = this.adapter.hasClass(cssClasses8.CLOSED_CLASS);
      this.determinate = !this.adapter.hasClass(cssClasses8.INDETERMINATE_CLASS);
      this.progress = 0;
      if (this.determinate) {
        this.adapter.setAttribute(strings8.ARIA_VALUENOW, this.progress.toString());
      }
      this.radius = Number(this.adapter.getDeterminateCircleAttribute(strings8.RADIUS));
    };
    MDCCircularProgressFoundation2.prototype.setDeterminate = function(determinate) {
      this.determinate = determinate;
      if (this.determinate) {
        this.adapter.removeClass(cssClasses8.INDETERMINATE_CLASS);
        this.setProgress(this.progress);
      } else {
        this.adapter.addClass(cssClasses8.INDETERMINATE_CLASS);
        this.adapter.removeAttribute(strings8.ARIA_VALUENOW);
      }
    };
    MDCCircularProgressFoundation2.prototype.isDeterminate = function() {
      return this.determinate;
    };
    MDCCircularProgressFoundation2.prototype.setProgress = function(value) {
      this.progress = value;
      if (this.determinate) {
        var unfilledArcLength = (1 - this.progress) * (2 * Math.PI * this.radius);
        this.adapter.setDeterminateCircleAttribute(strings8.STROKE_DASHOFFSET, "" + unfilledArcLength);
        this.adapter.setAttribute(strings8.ARIA_VALUENOW, this.progress.toString());
      }
    };
    MDCCircularProgressFoundation2.prototype.getProgress = function() {
      return this.progress;
    };
    MDCCircularProgressFoundation2.prototype.open = function() {
      this.closed = false;
      this.adapter.removeClass(cssClasses8.CLOSED_CLASS);
      this.adapter.removeAttribute(strings8.ARIA_HIDDEN);
    };
    MDCCircularProgressFoundation2.prototype.close = function() {
      this.closed = true;
      this.adapter.addClass(cssClasses8.CLOSED_CLASS);
      this.adapter.setAttribute(strings8.ARIA_HIDDEN, "true");
    };
    MDCCircularProgressFoundation2.prototype.isClosed = function() {
      return this.closed;
    };
    return MDCCircularProgressFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/circular-progress/component.js
var MDCCircularProgress = (
  /** @class */
  function(_super) {
    __extends(MDCCircularProgress2, _super);
    function MDCCircularProgress2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCCircularProgress2.prototype.initialize = function() {
      this.determinateCircle = this.root.querySelector(MDCCircularProgressFoundation.strings.DETERMINATE_CIRCLE_SELECTOR);
    };
    MDCCircularProgress2.attachTo = function(root) {
      return new MDCCircularProgress2(root);
    };
    Object.defineProperty(MDCCircularProgress2.prototype, "determinate", {
      /**
       * Sets whether the progress indicator is in determinate mode.
       * @param isDeterminate Whether the indicator should be determinate.
       */
      set: function(value) {
        this.foundation.setDeterminate(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCircularProgress2.prototype, "progress", {
      /**
       * Sets the current progress value. In indeterminate mode, this has no
       * visual effect but will be reflected if the indicator is switched to
       * determinate mode.
       * @param value The current progress value, which must be between 0 and 1.
       */
      set: function(value) {
        this.foundation.setProgress(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCCircularProgress2.prototype, "isClosed", {
      /**
       * Whether the progress indicator is hidden.
       */
      get: function() {
        return this.foundation.isClosed();
      },
      enumerable: false,
      configurable: true
    });
    MDCCircularProgress2.prototype.open = function() {
      this.foundation.open();
    };
    MDCCircularProgress2.prototype.close = function() {
      this.foundation.close();
    };
    MDCCircularProgress2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        getDeterminateCircleAttribute: function(attributeName) {
          return _this.determinateCircle.getAttribute(attributeName);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        removeAttribute: function(attributeName) {
          _this.root.removeAttribute(attributeName);
        },
        setAttribute: function(attributeName, value) {
          _this.root.setAttribute(attributeName, value);
        },
        setDeterminateCircleAttribute: function(attributeName, value) {
          _this.determinateCircle.setAttribute(attributeName, value);
        }
      };
      return new MDCCircularProgressFoundation(adapter);
    };
    return MDCCircularProgress2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/circular-progress/dist/mdc-circular-progress.html?raw
var mdc_circular_progress_default = '<template class="mdc-circular-progress mdc-circular-progress--${size}" role="progressbar" aria-valuemin="0"\n  aria-valuemax="1" css="width:${size}px; height:${size}px;">\n  <div class="mdc-circular-progress__determinate-container">\n    <svg class="mdc-circular-progress__indeterminate-circle-graphic" viewBox="0 0 ${size} ${size}"\n      xmlns="http://www.w3.org/2000/svg">\n      <circle class="mdc-circular-progress__determinate-track" cx="${size/2}" cy="${size/2}" r="${radius}"\n        stroke-width="${strokeWidth}" />\n      <circle class="mdc-circular-progress__determinate-circle" cx="${size/2}" cy="${size/2}" r="${radius}"\n        stroke-width="${strokeWidth}" stroke-dasharray="${strokeDasharray}" stroke-dashoffset="${strokeDashoffset}"\n        ref="determinateCircle_" />\n    </svg>\n  </div>\n  <div class="mdc-circular-progress__indeterminate-container">\n    <div class="mdc-circular-progress__spinner-layer">\n      <div class="mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left">\n        <svg class="mdc-circular-progress__indeterminate-circle-graphic" viewBox="0 0 ${size} ${size}"\n          xmlns="http://www.w3.org/2000/svg">\n          <circle cx="${size/2}" cy="${size/2}" r="${radius}" stroke-dasharray="${strokeDasharray}"\n            stroke-dashoffset="${strokeDashoffset}" stroke-width="${strokeWidth}" />\n        </svg>\n      </div>\n      <div class="mdc-circular-progress__gap-patch">\n        <svg class="mdc-circular-progress__indeterminate-circle-graphic" viewBox="0 0 ${size} ${size}"\n          xmlns="http://www.w3.org/2000/svg">\n          <circle cx="${size/2}" cy="${size/2}" r="${radius}" stroke-dasharray="${strokeDasharray}"\n            stroke-dashoffset="${strokeDashoffset}" stroke-width="${strokeWidth}" />\n        </svg>\n      </div>\n      <div class="mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right">\n        <svg class="mdc-circular-progress__indeterminate-circle-graphic" viewBox="0 0 ${size} ${size}"\n          xmlns="http://www.w3.org/2000/svg">\n          <circle cx="${size/2}" cy="${size/2}" r="${radius}" stroke-dasharray="${strokeDasharray}"\n            stroke-dashoffset="${strokeDashoffset}" stroke-width="${strokeWidth}" />\n        </svg>\n      </div>\n    </div>\n  </div>\n</template>\n';

// node_modules/@aurelia-mdc-web/circular-progress/dist/mdc-circular-progress.js
var MdcCircularProgress = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-circular-progress", template: mdc_circular_progress_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent7;
  let _size_decorators;
  let _size_initializers = [];
  let _size_extraInitializers = [];
  let _strokeWidth_decorators;
  let _strokeWidth_initializers = [];
  let _strokeWidth_extraInitializers = [];
  let _progress_decorators;
  let _progress_initializers = [];
  let _progress_extraInitializers = [];
  var MdcCircularProgress2 = _classThis = class extends _classSuper {
    sizeChanged() {
      this.updateSizeAndStroke();
    }
    strokeWidthChanged() {
      this.updateSizeAndStroke();
    }
    progressChanged() {
      var _a2, _b;
      const determinate = this.progress !== void 0 && !isNaN(this.progress);
      (_a2 = this.foundation) == null ? void 0 : _a2.setDeterminate(determinate);
      if (determinate) {
        (_b = this.foundation) == null ? void 0 : _b.setProgress(this.progress);
      }
    }
    binding() {
      this.updateSizeAndStroke();
    }
    updateSizeAndStroke() {
      var _a2;
      this.radius = (this.size - 4) / 2 - this.strokeWidth;
      (_a2 = this.determinateCircle_) == null ? void 0 : _a2.setAttribute("r", this.radius.toString());
      this.strokeDasharray = 2 * this.radius * Math.PI;
      this.strokeDashoffset = this.strokeDasharray / 2;
    }
    initialSyncWithDOM() {
      this.progressChanged();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        getDeterminateCircleAttribute: (attributeName) => {
          var _a2;
          return ((_a2 = this.determinateCircle_) == null ? void 0 : _a2.getAttribute(attributeName)) ?? null;
        },
        hasClass: (className) => this.root.classList.contains(className),
        removeClass: (className) => this.root.classList.remove(className),
        removeAttribute: (attributeName) => this.root.removeAttribute(attributeName),
        setAttribute: (attributeName, value) => this.root.setAttribute(attributeName, value),
        setDeterminateCircleAttribute: (attributeName, value) => {
          var _a2;
          if (attributeName === strings8.STROKE_DASHOFFSET) {
            this.strokeDashoffset = parseInt(value);
          } else {
            (_a2 = this.determinateCircle_) == null ? void 0 : _a2.setAttribute(attributeName, value);
          }
        }
      };
      return new MDCCircularProgressFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.radius = 47.5;
      this.size = __runInitializers(this, _size_initializers, 100);
      this.strokeWidth = (__runInitializers(this, _size_extraInitializers), __runInitializers(this, _strokeWidth_initializers, 10));
      this.progress = (__runInitializers(this, _strokeWidth_extraInitializers), __runInitializers(this, _progress_initializers, void 0));
      __runInitializers(this, _progress_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcCircularProgress");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _size_decorators = [bindable({ set: number7 })];
    _strokeWidth_decorators = [bindable({ set: number7 })];
    _progress_decorators = [bindable({ set: number7 })];
    __esDecorate(null, null, _size_decorators, { kind: "field", name: "size", static: false, private: false, access: { has: (obj) => "size" in obj, get: (obj) => obj.size, set: (obj, value) => {
      obj.size = value;
    } }, metadata: _metadata }, _size_initializers, _size_extraInitializers);
    __esDecorate(null, null, _strokeWidth_decorators, { kind: "field", name: "strokeWidth", static: false, private: false, access: { has: (obj) => "strokeWidth" in obj, get: (obj) => obj.strokeWidth, set: (obj, value) => {
      obj.strokeWidth = value;
    } }, metadata: _metadata }, _strokeWidth_initializers, _strokeWidth_extraInitializers);
    __esDecorate(null, null, _progress_decorators, { kind: "field", name: "progress", static: false, private: false, access: { has: (obj) => "progress" in obj, get: (obj) => obj.progress, set: (obj, value) => {
      obj.progress = value;
    } }, metadata: _metadata }, _progress_initializers, _progress_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCircularProgress2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCircularProgress2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/circular-progress/dist/index.js
var registered5 = false;
var CircularProgressConfiguration = {
  register(container) {
    if (registered5) {
      return container;
    } else {
      registered5 = true;
      return container.register(MdcCircularProgress);
    }
  }
};

// node_modules/@aurelia-mdc-web/data-table/dist/index.js
var import_dist457 = __toESM(require_dist());
var import_dist458 = __toESM(require_dist2());
var import_dist459 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/dist/mdc-data-table.js
var import_dist451 = __toESM(require_dist());
var import_dist452 = __toESM(require_dist2());
var import_dist453 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist421 = __toESM(require_dist());
var import_dist422 = __toESM(require_dist2());
var import_dist423 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist406 = __toESM(require_dist());
var import_dist407 = __toESM(require_dist2());
var import_dist408 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist403 = __toESM(require_dist());
var import_dist404 = __toESM(require_dist2());
var import_dist405 = __toESM(require_dist3());
function number8(a) {
  return Number(a);
}
function booleanAttr8(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap8 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr8 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr8 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr8 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist409 = __toESM(require_dist());
var import_dist410 = __toESM(require_dist2());
var import_dist411 = __toESM(require_dist3());
var MdcPromisifyReference8 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist412 = __toESM(require_dist());
var import_dist413 = __toESM(require_dist2());
var import_dist414 = __toESM(require_dist3());
var MdcComponent8 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist415 = __toESM(require_dist());
var import_dist416 = __toESM(require_dist2());
var import_dist417 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist418 = __toESM(require_dist());
var import_dist419 = __toESM(require_dist2());
var import_dist420 = __toESM(require_dist3());

// node_modules/@material/data-table/index.js
var import_dist448 = __toESM(require_dist());
var import_dist449 = __toESM(require_dist2());
var import_dist450 = __toESM(require_dist3());

// node_modules/@material/data-table/adapter.js
var import_dist424 = __toESM(require_dist());
var import_dist425 = __toESM(require_dist2());
var import_dist426 = __toESM(require_dist3());

// node_modules/@material/data-table/component.js
var import_dist442 = __toESM(require_dist());
var import_dist443 = __toESM(require_dist2());
var import_dist444 = __toESM(require_dist3());

// node_modules/@material/linear-progress/component.js
var import_dist433 = __toESM(require_dist());
var import_dist434 = __toESM(require_dist2());
var import_dist435 = __toESM(require_dist3());

// node_modules/@material/linear-progress/foundation.js
var import_dist430 = __toESM(require_dist());
var import_dist431 = __toESM(require_dist2());
var import_dist432 = __toESM(require_dist3());

// node_modules/@material/linear-progress/constants.js
var import_dist427 = __toESM(require_dist());
var import_dist428 = __toESM(require_dist2());
var import_dist429 = __toESM(require_dist3());
var cssClasses9 = {
  CLOSED_CLASS: "mdc-linear-progress--closed",
  CLOSED_ANIMATION_OFF_CLASS: "mdc-linear-progress--closed-animation-off",
  INDETERMINATE_CLASS: "mdc-linear-progress--indeterminate",
  REVERSED_CLASS: "mdc-linear-progress--reversed",
  ANIMATION_READY_CLASS: "mdc-linear-progress--animation-ready"
};
var strings9 = {
  ARIA_HIDDEN: "aria-hidden",
  ARIA_VALUEMAX: "aria-valuemax",
  ARIA_VALUEMIN: "aria-valuemin",
  ARIA_VALUENOW: "aria-valuenow",
  BUFFER_BAR_SELECTOR: ".mdc-linear-progress__buffer-bar",
  FLEX_BASIS: "flex-basis",
  PRIMARY_BAR_SELECTOR: ".mdc-linear-progress__primary-bar"
};
var animationDimensionPercentages = {
  PRIMARY_HALF: 0.8367142,
  PRIMARY_FULL: 2.00611057,
  SECONDARY_QUARTER: 0.37651913,
  SECONDARY_HALF: 0.84386165,
  SECONDARY_FULL: 1.60277782
};

// node_modules/@material/linear-progress/foundation.js
var MDCLinearProgressFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCLinearProgressFoundation2, _super);
    function MDCLinearProgressFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation2.defaultAdapter), adapter)) || this;
      _this.observer = null;
      return _this;
    }
    Object.defineProperty(MDCLinearProgressFoundation2, "cssClasses", {
      get: function() {
        return cssClasses9;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgressFoundation2, "strings", {
      get: function() {
        return strings9;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgressFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          attachResizeObserver: function() {
            return null;
          },
          forceLayout: function() {
            return void 0;
          },
          getWidth: function() {
            return 0;
          },
          hasClass: function() {
            return false;
          },
          setBufferBarStyle: function() {
            return null;
          },
          setPrimaryBarStyle: function() {
            return null;
          },
          setStyle: function() {
            return void 0;
          },
          removeAttribute: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setAttribute: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCLinearProgressFoundation2.prototype.init = function() {
      var _this = this;
      this.determinate = !this.adapter.hasClass(cssClasses9.INDETERMINATE_CLASS);
      this.adapter.addClass(cssClasses9.ANIMATION_READY_CLASS);
      this.progress = 0;
      this.buffer = 1;
      this.observer = this.adapter.attachResizeObserver(function(entries) {
        var e_1, _a2;
        if (_this.determinate) {
          return;
        }
        try {
          for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
            var entry = entries_1_1.value;
            if (entry.contentRect) {
              _this.calculateAndSetDimensions(entry.contentRect.width);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (entries_1_1 && !entries_1_1.done && (_a2 = entries_1.return)) _a2.call(entries_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      });
      if (!this.determinate && this.observer) {
        this.calculateAndSetDimensions(this.adapter.getWidth());
      }
    };
    MDCLinearProgressFoundation2.prototype.setDeterminate = function(isDeterminate) {
      this.determinate = isDeterminate;
      if (this.determinate) {
        this.adapter.removeClass(cssClasses9.INDETERMINATE_CLASS);
        this.adapter.setAttribute(strings9.ARIA_VALUENOW, this.progress.toString());
        this.adapter.setAttribute(strings9.ARIA_VALUEMAX, "1");
        this.adapter.setAttribute(strings9.ARIA_VALUEMIN, "0");
        this.setPrimaryBarProgress(this.progress);
        this.setBufferBarProgress(this.buffer);
        return;
      }
      if (this.observer) {
        this.calculateAndSetDimensions(this.adapter.getWidth());
      }
      this.adapter.addClass(cssClasses9.INDETERMINATE_CLASS);
      this.adapter.removeAttribute(strings9.ARIA_VALUENOW);
      this.adapter.removeAttribute(strings9.ARIA_VALUEMAX);
      this.adapter.removeAttribute(strings9.ARIA_VALUEMIN);
      this.setPrimaryBarProgress(1);
      this.setBufferBarProgress(1);
    };
    MDCLinearProgressFoundation2.prototype.isDeterminate = function() {
      return this.determinate;
    };
    MDCLinearProgressFoundation2.prototype.setProgress = function(value) {
      this.progress = value;
      if (this.determinate) {
        this.setPrimaryBarProgress(value);
        this.adapter.setAttribute(strings9.ARIA_VALUENOW, value.toString());
      }
    };
    MDCLinearProgressFoundation2.prototype.getProgress = function() {
      return this.progress;
    };
    MDCLinearProgressFoundation2.prototype.setBuffer = function(value) {
      this.buffer = value;
      if (this.determinate) {
        this.setBufferBarProgress(value);
      }
    };
    MDCLinearProgressFoundation2.prototype.getBuffer = function() {
      return this.buffer;
    };
    MDCLinearProgressFoundation2.prototype.open = function() {
      this.adapter.removeClass(cssClasses9.CLOSED_CLASS);
      this.adapter.removeClass(cssClasses9.CLOSED_ANIMATION_OFF_CLASS);
      this.adapter.removeAttribute(strings9.ARIA_HIDDEN);
    };
    MDCLinearProgressFoundation2.prototype.close = function() {
      this.adapter.addClass(cssClasses9.CLOSED_CLASS);
      this.adapter.setAttribute(strings9.ARIA_HIDDEN, "true");
    };
    MDCLinearProgressFoundation2.prototype.isClosed = function() {
      return this.adapter.hasClass(cssClasses9.CLOSED_CLASS);
    };
    MDCLinearProgressFoundation2.prototype.handleTransitionEnd = function() {
      if (this.adapter.hasClass(cssClasses9.CLOSED_CLASS)) {
        this.adapter.addClass(cssClasses9.CLOSED_ANIMATION_OFF_CLASS);
      }
    };
    MDCLinearProgressFoundation2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      if (this.observer) {
        this.observer.disconnect();
      }
    };
    MDCLinearProgressFoundation2.prototype.restartAnimation = function() {
      this.adapter.removeClass(cssClasses9.ANIMATION_READY_CLASS);
      this.adapter.forceLayout();
      this.adapter.addClass(cssClasses9.ANIMATION_READY_CLASS);
    };
    MDCLinearProgressFoundation2.prototype.setPrimaryBarProgress = function(progressValue) {
      var value = "scaleX(" + progressValue + ")";
      var transformProp = typeof window !== "undefined" ? getCorrectPropertyName(window, "transform") : "transform";
      this.adapter.setPrimaryBarStyle(transformProp, value);
    };
    MDCLinearProgressFoundation2.prototype.setBufferBarProgress = function(progressValue) {
      var value = progressValue * 100 + "%";
      this.adapter.setBufferBarStyle(strings9.FLEX_BASIS, value);
    };
    MDCLinearProgressFoundation2.prototype.calculateAndSetDimensions = function(width) {
      var primaryHalf = width * animationDimensionPercentages.PRIMARY_HALF;
      var primaryFull = width * animationDimensionPercentages.PRIMARY_FULL;
      var secondaryQuarter = width * animationDimensionPercentages.SECONDARY_QUARTER;
      var secondaryHalf = width * animationDimensionPercentages.SECONDARY_HALF;
      var secondaryFull = width * animationDimensionPercentages.SECONDARY_FULL;
      this.adapter.setStyle("--mdc-linear-progress-primary-half", primaryHalf + "px");
      this.adapter.setStyle("--mdc-linear-progress-primary-half-neg", -primaryHalf + "px");
      this.adapter.setStyle("--mdc-linear-progress-primary-full", primaryFull + "px");
      this.adapter.setStyle("--mdc-linear-progress-primary-full-neg", -primaryFull + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-quarter", secondaryQuarter + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-quarter-neg", -secondaryQuarter + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-half", secondaryHalf + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-half-neg", -secondaryHalf + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-full", secondaryFull + "px");
      this.adapter.setStyle("--mdc-linear-progress-secondary-full-neg", -secondaryFull + "px");
      this.restartAnimation();
    };
    return MDCLinearProgressFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/linear-progress/component.js
var MDCLinearProgress = (
  /** @class */
  function(_super) {
    __extends(MDCLinearProgress2, _super);
    function MDCLinearProgress2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCLinearProgress2.attachTo = function(root) {
      return new MDCLinearProgress2(root);
    };
    Object.defineProperty(MDCLinearProgress2.prototype, "determinate", {
      set: function(value) {
        this.foundation.setDeterminate(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgress2.prototype, "progress", {
      set: function(value) {
        this.foundation.setProgress(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCLinearProgress2.prototype, "buffer", {
      set: function(value) {
        this.foundation.setBuffer(value);
      },
      enumerable: false,
      configurable: true
    });
    MDCLinearProgress2.prototype.open = function() {
      this.foundation.open();
    };
    MDCLinearProgress2.prototype.close = function() {
      this.foundation.close();
    };
    MDCLinearProgress2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.root.addEventListener("transitionend", function() {
        _this.foundation.handleTransitionEnd();
      });
    };
    MDCLinearProgress2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        forceLayout: function() {
          _this.root.getBoundingClientRect();
        },
        setBufferBarStyle: function(styleProperty, value) {
          var bufferBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);
          if (bufferBar) {
            bufferBar.style.setProperty(styleProperty, value);
          }
        },
        setPrimaryBarStyle: function(styleProperty, value) {
          var primaryBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
          if (primaryBar) {
            primaryBar.style.setProperty(styleProperty, value);
          }
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        removeAttribute: function(attributeName) {
          _this.root.removeAttribute(attributeName);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        setAttribute: function(attributeName, value) {
          _this.root.setAttribute(attributeName, value);
        },
        setStyle: function(name, value) {
          _this.root.style.setProperty(name, value);
        },
        attachResizeObserver: function(callback) {
          var RO = window.ResizeObserver;
          if (RO) {
            var ro = new RO(callback);
            ro.observe(_this.root);
            return ro;
          }
          return null;
        },
        getWidth: function() {
          return _this.root.offsetWidth;
        }
      };
      return new MDCLinearProgressFoundation(adapter);
    };
    return MDCLinearProgress2;
  }(MDCComponent)
);

// node_modules/@material/data-table/constants.js
var import_dist436 = __toESM(require_dist());
var import_dist437 = __toESM(require_dist2());
var import_dist438 = __toESM(require_dist3());
var cssClasses10 = {
  CELL: "mdc-data-table__cell",
  CELL_NUMERIC: "mdc-data-table__cell--numeric",
  CONTENT: "mdc-data-table__content",
  HEADER_CELL: "mdc-data-table__header-cell",
  HEADER_CELL_LABEL: "mdc-data-table__header-cell-label",
  HEADER_CELL_SORTED: "mdc-data-table__header-cell--sorted",
  HEADER_CELL_SORTED_DESCENDING: "mdc-data-table__header-cell--sorted-descending",
  HEADER_CELL_WITH_SORT: "mdc-data-table__header-cell--with-sort",
  HEADER_CELL_WRAPPER: "mdc-data-table__header-cell-wrapper",
  HEADER_ROW: "mdc-data-table__header-row",
  HEADER_ROW_CHECKBOX: "mdc-data-table__header-row-checkbox",
  IN_PROGRESS: "mdc-data-table--in-progress",
  LINEAR_PROGRESS: "mdc-data-table__linear-progress",
  PAGINATION_ROWS_PER_PAGE_LABEL: "mdc-data-table__pagination-rows-per-page-label",
  PAGINATION_ROWS_PER_PAGE_SELECT: "mdc-data-table__pagination-rows-per-page-select",
  PROGRESS_INDICATOR: "mdc-data-table__progress-indicator",
  ROOT: "mdc-data-table",
  ROW: "mdc-data-table__row",
  ROW_CHECKBOX: "mdc-data-table__row-checkbox",
  ROW_SELECTED: "mdc-data-table__row--selected",
  SORT_ICON_BUTTON: "mdc-data-table__sort-icon-button",
  SORT_STATUS_LABEL: "mdc-data-table__sort-status-label",
  TABLE_CONTAINER: "mdc-data-table__table-container"
};
var attributes = {
  ARIA_SELECTED: "aria-selected",
  ARIA_SORT: "aria-sort"
};
var dataAttributes = {
  COLUMN_ID: "data-column-id",
  ROW_ID: "data-row-id"
};
var selectors2 = {
  CONTENT: "." + cssClasses10.CONTENT,
  HEADER_CELL: "." + cssClasses10.HEADER_CELL,
  HEADER_CELL_WITH_SORT: "." + cssClasses10.HEADER_CELL_WITH_SORT,
  HEADER_ROW: "." + cssClasses10.HEADER_ROW,
  HEADER_ROW_CHECKBOX: "." + cssClasses10.HEADER_ROW_CHECKBOX,
  PROGRESS_INDICATOR: "." + cssClasses10.PROGRESS_INDICATOR,
  ROW: "." + cssClasses10.ROW,
  ROW_CHECKBOX: "." + cssClasses10.ROW_CHECKBOX,
  ROW_SELECTED: "." + cssClasses10.ROW_SELECTED,
  SORT_ICON_BUTTON: "." + cssClasses10.SORT_ICON_BUTTON,
  SORT_STATUS_LABEL: "." + cssClasses10.SORT_STATUS_LABEL
};
var messages = {
  SORTED_IN_DESCENDING: "Sorted in descending order",
  SORTED_IN_ASCENDING: "Sorted in ascending order"
};
var strings10 = {
  ARIA_SELECTED: attributes.ARIA_SELECTED,
  ARIA_SORT: attributes.ARIA_SORT,
  DATA_ROW_ID_ATTR: dataAttributes.ROW_ID,
  HEADER_ROW_CHECKBOX_SELECTOR: selectors2.HEADER_ROW_CHECKBOX,
  ROW_CHECKBOX_SELECTOR: selectors2.ROW_CHECKBOX,
  ROW_SELECTED_SELECTOR: selectors2.ROW_SELECTED,
  ROW_SELECTOR: selectors2.ROW
};
var SortValue;
(function(SortValue2) {
  SortValue2["ASCENDING"] = "ascending";
  SortValue2["DESCENDING"] = "descending";
  SortValue2["NONE"] = "none";
  SortValue2["OTHER"] = "other";
})(SortValue || (SortValue = {}));
var events2 = {
  ROW_CLICK: "MDCDataTable:rowClick",
  ROW_SELECTION_CHANGED: "MDCDataTable:rowSelectionChanged",
  SELECTED_ALL: "MDCDataTable:selectedAll",
  SORTED: "MDCDataTable:sorted",
  UNSELECTED_ALL: "MDCDataTable:unselectedAll"
};

// node_modules/@material/data-table/foundation.js
var import_dist439 = __toESM(require_dist());
var import_dist440 = __toESM(require_dist2());
var import_dist441 = __toESM(require_dist3());
var MDCDataTableFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCDataTableFoundation2, _super);
    function MDCDataTableFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCDataTableFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCDataTableFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          addClassAtRowIndex: function() {
            return void 0;
          },
          getAttributeByHeaderCellIndex: function() {
            return "";
          },
          getHeaderCellCount: function() {
            return 0;
          },
          getHeaderCellElements: function() {
            return [];
          },
          getRowCount: function() {
            return 0;
          },
          getRowElements: function() {
            return [];
          },
          getRowIdAtIndex: function() {
            return "";
          },
          getRowIndexByChildElement: function() {
            return 0;
          },
          getSelectedRowCount: function() {
            return 0;
          },
          getTableContainerHeight: function() {
            return 0;
          },
          getTableHeaderHeight: function() {
            return 0;
          },
          isCheckboxAtRowIndexChecked: function() {
            return false;
          },
          isHeaderRowCheckboxChecked: function() {
            return false;
          },
          isRowsSelectable: function() {
            return false;
          },
          notifyRowSelectionChanged: function() {
            return void 0;
          },
          notifySelectedAll: function() {
            return void 0;
          },
          notifySortAction: function() {
            return void 0;
          },
          notifyUnselectedAll: function() {
            return void 0;
          },
          notifyRowClick: function() {
            return void 0;
          },
          registerHeaderRowCheckbox: function() {
            return void 0;
          },
          registerRowCheckboxes: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          removeClassAtRowIndex: function() {
            return void 0;
          },
          removeClassNameByHeaderCellIndex: function() {
            return void 0;
          },
          setAttributeAtRowIndex: function() {
            return void 0;
          },
          setAttributeByHeaderCellIndex: function() {
            return void 0;
          },
          setClassNameByHeaderCellIndex: function() {
            return void 0;
          },
          setHeaderRowCheckboxChecked: function() {
            return void 0;
          },
          setHeaderRowCheckboxIndeterminate: function() {
            return void 0;
          },
          setProgressIndicatorStyles: function() {
            return void 0;
          },
          setRowCheckboxCheckedAtIndex: function() {
            return void 0;
          },
          setSortStatusLabelByHeaderCellIndex: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCDataTableFoundation2.prototype.layout = function() {
      if (this.adapter.isRowsSelectable()) {
        this.adapter.registerHeaderRowCheckbox();
        this.adapter.registerRowCheckboxes();
        this.setHeaderRowCheckboxState();
      }
    };
    MDCDataTableFoundation2.prototype.layoutAsync = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!this.adapter.isRowsSelectable()) return [3, 3];
              return [4, this.adapter.registerHeaderRowCheckbox()];
            case 1:
              _a2.sent();
              return [4, this.adapter.registerRowCheckboxes()];
            case 2:
              _a2.sent();
              this.setHeaderRowCheckboxState();
              _a2.label = 3;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
    MDCDataTableFoundation2.prototype.getRows = function() {
      return this.adapter.getRowElements();
    };
    MDCDataTableFoundation2.prototype.getHeaderCells = function() {
      return this.adapter.getHeaderCellElements();
    };
    MDCDataTableFoundation2.prototype.setSelectedRowIds = function(rowIds) {
      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
        var rowId = this.adapter.getRowIdAtIndex(rowIndex);
        var isSelected = false;
        if (rowId && rowIds.indexOf(rowId) >= 0) {
          isSelected = true;
        }
        this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);
        this.selectRowAtIndex(rowIndex, isSelected);
      }
      this.setHeaderRowCheckboxState();
    };
    MDCDataTableFoundation2.prototype.getRowIds = function() {
      var rowIds = [];
      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
        rowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
      }
      return rowIds;
    };
    MDCDataTableFoundation2.prototype.getSelectedRowIds = function() {
      var selectedRowIds = [];
      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
        if (this.adapter.isCheckboxAtRowIndexChecked(rowIndex)) {
          selectedRowIds.push(this.adapter.getRowIdAtIndex(rowIndex));
        }
      }
      return selectedRowIds;
    };
    MDCDataTableFoundation2.prototype.handleHeaderRowCheckboxChange = function() {
      var isHeaderChecked = this.adapter.isHeaderRowCheckboxChecked();
      for (var rowIndex = 0; rowIndex < this.adapter.getRowCount(); rowIndex++) {
        this.adapter.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);
        this.selectRowAtIndex(rowIndex, isHeaderChecked);
      }
      if (isHeaderChecked) {
        this.adapter.notifySelectedAll();
      } else {
        this.adapter.notifyUnselectedAll();
      }
    };
    MDCDataTableFoundation2.prototype.handleRowCheckboxChange = function(event) {
      var rowIndex = this.adapter.getRowIndexByChildElement(event.target);
      if (rowIndex === -1) {
        return;
      }
      var selected = this.adapter.isCheckboxAtRowIndexChecked(rowIndex);
      this.selectRowAtIndex(rowIndex, selected);
      this.setHeaderRowCheckboxState();
      var rowId = this.adapter.getRowIdAtIndex(rowIndex);
      this.adapter.notifyRowSelectionChanged({ rowId, rowIndex, selected });
    };
    MDCDataTableFoundation2.prototype.handleSortAction = function(eventData) {
      var columnId = eventData.columnId, columnIndex = eventData.columnIndex, headerCell = eventData.headerCell;
      for (var index = 0; index < this.adapter.getHeaderCellCount(); index++) {
        if (index === columnIndex) {
          continue;
        }
        this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses10.HEADER_CELL_SORTED);
        this.adapter.removeClassNameByHeaderCellIndex(index, cssClasses10.HEADER_CELL_SORTED_DESCENDING);
        this.adapter.setAttributeByHeaderCellIndex(index, strings10.ARIA_SORT, SortValue.NONE);
        this.adapter.setSortStatusLabelByHeaderCellIndex(index, SortValue.NONE);
      }
      this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses10.HEADER_CELL_SORTED);
      var currentSortValue = this.adapter.getAttributeByHeaderCellIndex(columnIndex, strings10.ARIA_SORT);
      var sortValue = SortValue.NONE;
      if (currentSortValue === SortValue.ASCENDING) {
        this.adapter.setClassNameByHeaderCellIndex(columnIndex, cssClasses10.HEADER_CELL_SORTED_DESCENDING);
        this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings10.ARIA_SORT, SortValue.DESCENDING);
        sortValue = SortValue.DESCENDING;
      } else if (currentSortValue === SortValue.DESCENDING) {
        this.adapter.removeClassNameByHeaderCellIndex(columnIndex, cssClasses10.HEADER_CELL_SORTED_DESCENDING);
        this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings10.ARIA_SORT, SortValue.ASCENDING);
        sortValue = SortValue.ASCENDING;
      } else {
        this.adapter.setAttributeByHeaderCellIndex(columnIndex, strings10.ARIA_SORT, SortValue.ASCENDING);
        sortValue = SortValue.ASCENDING;
      }
      this.adapter.setSortStatusLabelByHeaderCellIndex(columnIndex, sortValue);
      this.adapter.notifySortAction({
        columnId,
        columnIndex,
        headerCell,
        sortValue
      });
    };
    MDCDataTableFoundation2.prototype.handleRowClick = function(_a2) {
      var rowId = _a2.rowId, row = _a2.row;
      this.adapter.notifyRowClick({
        rowId,
        row
      });
    };
    MDCDataTableFoundation2.prototype.showProgress = function() {
      var tableHeaderHeight = this.adapter.getTableHeaderHeight();
      var height = this.adapter.getTableContainerHeight() - tableHeaderHeight;
      var top = tableHeaderHeight;
      this.adapter.setProgressIndicatorStyles({
        height: height + "px",
        top: top + "px"
      });
      this.adapter.addClass(cssClasses10.IN_PROGRESS);
    };
    MDCDataTableFoundation2.prototype.hideProgress = function() {
      this.adapter.removeClass(cssClasses10.IN_PROGRESS);
    };
    MDCDataTableFoundation2.prototype.setHeaderRowCheckboxState = function() {
      if (this.adapter.getSelectedRowCount() === 0) {
        this.adapter.setHeaderRowCheckboxChecked(false);
        this.adapter.setHeaderRowCheckboxIndeterminate(false);
      } else if (this.adapter.getSelectedRowCount() === this.adapter.getRowCount()) {
        this.adapter.setHeaderRowCheckboxChecked(true);
        this.adapter.setHeaderRowCheckboxIndeterminate(false);
      } else {
        this.adapter.setHeaderRowCheckboxIndeterminate(true);
        this.adapter.setHeaderRowCheckboxChecked(false);
      }
    };
    MDCDataTableFoundation2.prototype.selectRowAtIndex = function(rowIndex, selected) {
      if (selected) {
        this.adapter.addClassAtRowIndex(rowIndex, cssClasses10.ROW_SELECTED);
        this.adapter.setAttributeAtRowIndex(rowIndex, strings10.ARIA_SELECTED, "true");
      } else {
        this.adapter.removeClassAtRowIndex(rowIndex, cssClasses10.ROW_SELECTED);
        this.adapter.setAttributeAtRowIndex(rowIndex, strings10.ARIA_SELECTED, "false");
      }
    };
    return MDCDataTableFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/data-table/component.js
var MDCDataTable = (
  /** @class */
  function(_super) {
    __extends(MDCDataTable2, _super);
    function MDCDataTable2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCDataTable2.attachTo = function(root) {
      return new MDCDataTable2(root);
    };
    MDCDataTable2.prototype.initialize = function(checkboxFactory) {
      if (checkboxFactory === void 0) {
        checkboxFactory = function(el) {
          return new MDCCheckbox(el);
        };
      }
      this.checkboxFactory = checkboxFactory;
    };
    MDCDataTable2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.headerRow = this.root.querySelector("." + cssClasses10.HEADER_ROW);
      this.handleHeaderRowCheckboxChange = function() {
        _this.foundation.handleHeaderRowCheckboxChange();
      };
      this.headerRow.addEventListener("change", this.handleHeaderRowCheckboxChange);
      this.headerRowClickListener = function(event) {
        _this.handleHeaderRowClick(event);
      };
      this.headerRow.addEventListener("click", this.headerRowClickListener);
      this.content = this.root.querySelector("." + cssClasses10.CONTENT);
      this.handleContentClick = function(event) {
        var dataRowEl = closest(event.target, selectors2.ROW);
        if (!dataRowEl)
          return;
        _this.foundation.handleRowClick({
          rowId: _this.getRowIdByRowElement(dataRowEl),
          row: dataRowEl
        });
      };
      this.content.addEventListener("click", this.handleContentClick);
      this.handleRowCheckboxChange = function(event) {
        _this.foundation.handleRowCheckboxChange(event);
      };
      this.content.addEventListener("change", this.handleRowCheckboxChange);
      this.layout();
    };
    MDCDataTable2.prototype.layout = function() {
      this.foundation.layout();
    };
    MDCDataTable2.prototype.getHeaderCells = function() {
      return [].slice.call(this.root.querySelectorAll(selectors2.HEADER_CELL));
    };
    MDCDataTable2.prototype.getRows = function() {
      return this.foundation.getRows();
    };
    MDCDataTable2.prototype.getSelectedRowIds = function() {
      return this.foundation.getSelectedRowIds();
    };
    MDCDataTable2.prototype.setSelectedRowIds = function(rowIds) {
      this.foundation.setSelectedRowIds(rowIds);
    };
    MDCDataTable2.prototype.showProgress = function() {
      this.getLinearProgress().open();
      this.foundation.showProgress();
    };
    MDCDataTable2.prototype.hideProgress = function() {
      this.foundation.hideProgress();
      this.getLinearProgress().close();
    };
    MDCDataTable2.prototype.destroy = function() {
      var e_1, _a2;
      if (this.handleHeaderRowCheckboxChange) {
        this.headerRow.removeEventListener("change", this.handleHeaderRowCheckboxChange);
      }
      if (this.headerRowClickListener) {
        this.headerRow.removeEventListener("click", this.headerRowClickListener);
      }
      if (this.handleRowCheckboxChange) {
        this.content.removeEventListener("change", this.handleRowCheckboxChange);
      }
      if (this.headerRowCheckbox) {
        this.headerRowCheckbox.destroy();
      }
      if (this.rowCheckboxList) {
        try {
          for (var _b = __values(this.rowCheckboxList), _c = _b.next(); !_c.done; _c = _b.next()) {
            var checkbox = _c.value;
            checkbox.destroy();
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
      if (this.handleContentClick) {
        this.content.removeEventListener("click", this.handleContentClick);
      }
    };
    MDCDataTable2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        getHeaderCellElements: function() {
          return _this.getHeaderCells();
        },
        getHeaderCellCount: function() {
          return _this.getHeaderCells().length;
        },
        getAttributeByHeaderCellIndex: function(index, attribute) {
          return _this.getHeaderCells()[index].getAttribute(attribute);
        },
        setAttributeByHeaderCellIndex: function(index, attribute, value) {
          _this.getHeaderCells()[index].setAttribute(attribute, value);
        },
        setClassNameByHeaderCellIndex: function(index, className) {
          _this.getHeaderCells()[index].classList.add(className);
        },
        removeClassNameByHeaderCellIndex: function(index, className) {
          _this.getHeaderCells()[index].classList.remove(className);
        },
        notifySortAction: function(data) {
          _this.emit(
            events2.SORTED,
            data,
            /** shouldBubble */
            true
          );
        },
        getTableContainerHeight: function() {
          var tableContainer = _this.root.querySelector("." + cssClasses10.TABLE_CONTAINER);
          if (!tableContainer) {
            throw new Error("MDCDataTable: Table container element not found.");
          }
          return tableContainer.getBoundingClientRect().height;
        },
        getTableHeaderHeight: function() {
          var tableHeader = _this.root.querySelector(selectors2.HEADER_ROW);
          if (!tableHeader) {
            throw new Error("MDCDataTable: Table header element not found.");
          }
          return tableHeader.getBoundingClientRect().height;
        },
        setProgressIndicatorStyles: function(styles) {
          var progressIndicator = _this.root.querySelector(selectors2.PROGRESS_INDICATOR);
          if (!progressIndicator) {
            throw new Error("MDCDataTable: Progress indicator element not found.");
          }
          progressIndicator.style.setProperty("height", styles.height);
          progressIndicator.style.setProperty("top", styles.top);
        },
        addClassAtRowIndex: function(rowIndex, className) {
          _this.getRows()[rowIndex].classList.add(className);
        },
        getRowCount: function() {
          return _this.getRows().length;
        },
        getRowElements: function() {
          return [].slice.call(_this.root.querySelectorAll(selectors2.ROW));
        },
        getRowIdAtIndex: function(rowIndex) {
          return _this.getRows()[rowIndex].getAttribute(dataAttributes.ROW_ID);
        },
        getRowIndexByChildElement: function(el) {
          return _this.getRows().indexOf(closest(el, selectors2.ROW));
        },
        getSelectedRowCount: function() {
          return _this.root.querySelectorAll(selectors2.ROW_SELECTED).length;
        },
        isCheckboxAtRowIndexChecked: function(rowIndex) {
          return _this.rowCheckboxList[rowIndex].checked;
        },
        isHeaderRowCheckboxChecked: function() {
          return _this.headerRowCheckbox.checked;
        },
        isRowsSelectable: function() {
          return !!_this.root.querySelector(selectors2.ROW_CHECKBOX) || !!_this.root.querySelector(selectors2.HEADER_ROW_CHECKBOX);
        },
        notifyRowSelectionChanged: function(data) {
          _this.emit(
            events2.ROW_SELECTION_CHANGED,
            {
              row: _this.getRowByIndex(data.rowIndex),
              rowId: _this.getRowIdByIndex(data.rowIndex),
              rowIndex: data.rowIndex,
              selected: data.selected
            },
            /** shouldBubble */
            true
          );
        },
        notifySelectedAll: function() {
          _this.emit(
            events2.SELECTED_ALL,
            {},
            /** shouldBubble */
            true
          );
        },
        notifyUnselectedAll: function() {
          _this.emit(
            events2.UNSELECTED_ALL,
            {},
            /** shouldBubble */
            true
          );
        },
        notifyRowClick: function(data) {
          _this.emit(
            events2.ROW_CLICK,
            data,
            /** shouldBubble */
            true
          );
        },
        registerHeaderRowCheckbox: function() {
          if (_this.headerRowCheckbox) {
            _this.headerRowCheckbox.destroy();
          }
          var checkboxEl = _this.root.querySelector(selectors2.HEADER_ROW_CHECKBOX);
          _this.headerRowCheckbox = _this.checkboxFactory(checkboxEl);
        },
        registerRowCheckboxes: function() {
          if (_this.rowCheckboxList) {
            _this.rowCheckboxList.forEach(function(checkbox) {
              checkbox.destroy();
            });
          }
          _this.rowCheckboxList = [];
          _this.getRows().forEach(function(rowEl) {
            var checkbox = _this.checkboxFactory(rowEl.querySelector(selectors2.ROW_CHECKBOX));
            _this.rowCheckboxList.push(checkbox);
          });
        },
        removeClassAtRowIndex: function(rowIndex, className) {
          _this.getRows()[rowIndex].classList.remove(className);
        },
        setAttributeAtRowIndex: function(rowIndex, attr, value) {
          _this.getRows()[rowIndex].setAttribute(attr, value);
        },
        setHeaderRowCheckboxChecked: function(checked) {
          _this.headerRowCheckbox.checked = checked;
        },
        setHeaderRowCheckboxIndeterminate: function(indeterminate) {
          _this.headerRowCheckbox.indeterminate = indeterminate;
        },
        setRowCheckboxCheckedAtIndex: function(rowIndex, checked) {
          _this.rowCheckboxList[rowIndex].checked = checked;
        },
        setSortStatusLabelByHeaderCellIndex: function(columnIndex, sortValue) {
          var headerCell = _this.getHeaderCells()[columnIndex];
          var sortStatusLabel = headerCell.querySelector(selectors2.SORT_STATUS_LABEL);
          if (!sortStatusLabel)
            return;
          sortStatusLabel.textContent = _this.getSortStatusMessageBySortValue(sortValue);
        }
      };
      return new MDCDataTableFoundation(adapter);
    };
    MDCDataTable2.prototype.getRowByIndex = function(index) {
      return this.getRows()[index];
    };
    MDCDataTable2.prototype.getRowIdByIndex = function(index) {
      return this.getRowByIndex(index).getAttribute(dataAttributes.ROW_ID);
    };
    MDCDataTable2.prototype.handleHeaderRowClick = function(event) {
      var headerCell = closest(event.target, selectors2.HEADER_CELL_WITH_SORT);
      if (!headerCell) {
        return;
      }
      var columnId = headerCell.getAttribute(dataAttributes.COLUMN_ID);
      var columnIndex = this.getHeaderCells().indexOf(headerCell);
      if (columnIndex === -1) {
        return;
      }
      this.foundation.handleSortAction({ columnId, columnIndex, headerCell });
    };
    MDCDataTable2.prototype.getSortStatusMessageBySortValue = function(sortValue) {
      switch (sortValue) {
        case SortValue.ASCENDING:
          return messages.SORTED_IN_ASCENDING;
        case SortValue.DESCENDING:
          return messages.SORTED_IN_DESCENDING;
        default:
          return "";
      }
    };
    MDCDataTable2.prototype.getLinearProgressElement = function() {
      var el = this.root.querySelector("." + cssClasses10.LINEAR_PROGRESS);
      if (!el) {
        throw new Error("MDCDataTable: linear progress element is not found.");
      }
      return el;
    };
    MDCDataTable2.prototype.getLinearProgress = function() {
      if (!this.linearProgress) {
        var el = this.getLinearProgressElement();
        this.linearProgress = new MDCLinearProgress(el);
      }
      return this.linearProgress;
    };
    MDCDataTable2.prototype.getRowIdByRowElement = function(rowElement) {
      return rowElement.getAttribute(dataAttributes.ROW_ID);
    };
    return MDCDataTable2;
  }(MDCComponent)
);

// node_modules/@material/data-table/types.js
var import_dist445 = __toESM(require_dist());
var import_dist446 = __toESM(require_dist2());
var import_dist447 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/data-table/dist/mdc-data-table.html?raw
var mdc_data_table_default = `<template class="mdc-data-table \${stickyHeader ? 'mdc-data-table--sticky-header' : ''}">
  <div class="mdc-data-table__table-container">
    <au-slot></au-slot>
  </div>
  <div class="mdc-data-table__pagination" if.bind="pagination">
    <div class="mdc-data-table__pagination-trailing">
      <div class="mdc-data-table__pagination-rows-per-page">
        <div class="mdc-data-table__pagination-rows-per-page-label">\${rowsPerPageLabel}</div>

        <mdc-select value.bind="pageSize" outlined class="mdc-data-table__pagination-rows-per-page-select"
          hoist-to-body.bind="hoistPageSelectToBody">
          <mdc-list>
            <mdc-list-item repeat.for="ps of pageSizes" value.bind="ps">\${ps}</mdc-list-item>
          </mdc-list>
        </mdc-select>
      </div>

      <div class="mdc-data-table__pagination-navigation">
        <div class="mdc-data-table__pagination-total">
          <au-slot name="pagination-total">\${paginationTotal}</au-slot>
        </div>
        <button mdc-icon-button class="mdc-data-table__pagination-button" data-first-page="true"
          disabled.bind="!paginationPosition || paginationPosition === 'first'"
          click.trigger="handleNavigationClick('first')">
          <mdc-icon>first_page</mdc-icon>
        </button>
        <button mdc-icon-button class="mdc-data-table__pagination-button" data-prev-page="true"
          disabled.bind="!paginationPosition || paginationPosition === 'first'"
          click.trigger="handleNavigationClick('prev')">
          <mdc-icon>chevron_left</mdc-icon>
        </button>
        <button mdc-icon-button class="mdc-data-table__pagination-button" data-next-page="true"
          disabled.bind="!paginationPosition || paginationPosition === 'last'"
          click.trigger="handleNavigationClick('next')">
          <mdc-icon>chevron_right</mdc-icon>
        </button>
        <button mdc-icon-button class="mdc-data-table__pagination-button" data-last-page="true"
          disabled.bind="!paginationPosition || paginationPosition === 'last'"
          click.trigger="handleNavigationClick('last')">
          <mdc-icon>last_page</mdc-icon>
        </button>
      </div>
    </div>
  </div>
  <div class="mdc-data-table__progress-indicator">
    <div class="mdc-data-table__scrim"></div>
    <mdc-linear-progress class="mdc-data-table__linear-progress"></mdc-linear-progress>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/data-table/dist/mdc-data-table.js
events2.ROW_CLICK = events2.ROW_CLICK.toLowerCase();
events2.ROW_SELECTION_CHANGED = events2.ROW_SELECTION_CHANGED.toLowerCase();
events2.SELECTED_ALL = events2.SELECTED_ALL.toLowerCase();
events2.SORTED = events2.SORTED.toLowerCase();
events2.UNSELECTED_ALL = events2.UNSELECTED_ALL.toLowerCase();
var NAVIGATION_EVENT2 = "mdcdatatable:navigation";
var MdcDataTable = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-data-table", template: mdc_data_table_default }), processContent(function processContent2(node) {
    const element = node;
    const table = element.querySelector("table");
    if (!table) {
      throw new Error("Have you forgotten the <table> tag in you data table markup?");
    }
    table.classList.add("mdc-data-table__table");
    table.setAttribute("aria-label", "${ariaLabel}");
    const headerRow = element.querySelector("thead>tr");
    if (!headerRow) {
      throw new Error("Have you forgotten the <thead><tr> tags in you data table markup?");
    }
    headerRow.classList.add(cssClasses10.HEADER_ROW);
    headerRow.setAttribute("ref", "headerRow");
    const headerCells = headerRow.querySelectorAll("th");
    for (const th of Array.from(headerCells)) {
      th.classList.add(cssClasses10.HEADER_CELL);
      th.classList.toggle("mdc-data-table__header-cell--numeric", th.hasAttribute("numeric"));
      th.setAttribute("role", "columnheader");
      th.setAttribute("scope", "col");
    }
    const tbody = element.querySelector("tbody");
    if (!tbody) {
      throw new Error("Have you forgotten the <tbody> tag in you data table markup?");
    }
    tbody.classList.add(cssClasses10.CONTENT);
    tbody.setAttribute("ref", "content");
    const paginationTotalSlot = element.querySelector('[au-slot="pagination-total"]');
    paginationTotalSlot == null ? void 0 : paginationTotalSlot.remove();
    if (paginationTotalSlot) {
      element.appendChild(paginationTotalSlot);
    }
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent8;
  let _pagination_decorators;
  let _pagination_initializers = [];
  let _pagination_extraInitializers = [];
  let _rowsPerPageLabel_decorators;
  let _rowsPerPageLabel_initializers = [];
  let _rowsPerPageLabel_extraInitializers = [];
  let _pageSizes_decorators;
  let _pageSizes_initializers = [];
  let _pageSizes_extraInitializers = [];
  let _pageSize_decorators;
  let _pageSize_initializers = [];
  let _pageSize_extraInitializers = [];
  let _stickyHeader_decorators;
  let _stickyHeader_initializers = [];
  let _stickyHeader_extraInitializers = [];
  let _recordsCount_decorators;
  let _recordsCount_initializers = [];
  let _recordsCount_extraInitializers = [];
  let _activePage_decorators;
  let _activePage_initializers = [];
  let _activePage_extraInitializers = [];
  let _busy_decorators;
  let _busy_initializers = [];
  let _busy_extraInitializers = [];
  let _hoistPageSelectToBody_decorators;
  let _hoistPageSelectToBody_initializers = [];
  let _hoistPageSelectToBody_extraInitializers = [];
  var MdcDataTable2 = _classThis = class extends _classSuper {
    get paginationPosition() {
      if (typeof this.pageSize !== "number" || this.pageSize === void 0 || isNaN(this.activePage) || isNaN(this.recordsCount)) {
        return void 0;
      }
      const pagesCount = Math.ceil(this.recordsCount / this.pageSize);
      return this.activePage === 1 ? pagesCount === 1 ? void 0 : "first" : this.activePage === pagesCount ? "last" : "between";
    }
    get paginationTotal() {
      if (typeof this.pageSize !== "number" || this.pageSize === void 0 || isNaN(this.activePage) || isNaN(this.recordsCount)) {
        return void 0;
      }
      const firstRecord = this.pageSize * (this.activePage - 1) + 1;
      const lastRecord = Math.min(this.pageSize * this.activePage, this.recordsCount);
      return `${firstRecord}-${lastRecord} of ${this.recordsCount}`;
    }
    busyChanged() {
      var _a2, _b;
      if (this.busy) {
        (_a2 = this.foundation) == null ? void 0 : _a2.showProgress();
      } else {
        (_b = this.foundation) == null ? void 0 : _b.hideProgress();
      }
    }
    get rowCheckboxList() {
      return Array.from(this.root.querySelectorAll(`.${cssClasses10.ROW} .mdc-checkbox`)).map((x) => CustomElement.for(x).viewModel);
    }
    get headerRowCheckbox() {
      const el = this.root.querySelector(`.${cssClasses10.HEADER_ROW} .mdc-checkbox`);
      return el ? CustomElement.for(el).viewModel : void 0;
    }
    handleHeaderRowCheckboxChange() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleHeaderRowCheckboxChange();
    }
    handleRowCheckboxChange(event) {
      var _a2;
      if (event.target.type === "checkbox") {
        (_a2 = this.foundation) == null ? void 0 : _a2.handleRowCheckboxChange(event);
      }
    }
    headerRowClickListener(event) {
      this.handleHeaderRowClick(event);
    }
    handleNavigationClick(type) {
      this.emit(NAVIGATION_EVENT2, { type }, true);
    }
    handleContentClick(event) {
      var _a2;
      const dataRowEl = closest(event.target, selectors2.ROW);
      if (!dataRowEl) {
        return;
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.handleRowClick({
        rowId: this.getRowIdByRowElement(dataRowEl),
        row: dataRowEl
      });
    }
    /**
     * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.
     */
    layout() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    /**
     * @return Returns array of header row cell elements.
     */
    getHeaderCells() {
      return [].slice.call(this.root.querySelectorAll(selectors2.HEADER_CELL));
    }
    /**
     * @return Returns array of row elements.
     */
    getRows() {
      return this.foundation.getRows();
    }
    /**
     * @return Returns array of selected row ids.
     */
    getSelectedRowIds() {
      return this.foundation.getSelectedRowIds();
    }
    /**
     * Sets selected row ids. Overwrites previously selected rows.
     * @param rowIds Array of row ids that needs to be selected.
     */
    setSelectedRowIds(rowIds) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelectedRowIds(rowIds);
    }
    handleEvent(evt) {
      switch (evt.currentTarget) {
        case this.header:
          switch (evt.type) {
            case "change":
              this.handleHeaderRowCheckboxChange();
              break;
            case "click":
              this.handleHeaderRowClick(evt);
              break;
          }
          break;
        case this.content:
          switch (evt.type) {
            case "change":
              this.handleRowCheckboxChange(evt);
              break;
          }
          break;
      }
    }
    beforeFoundationCreated() {
      this.header = this.root.querySelector(`.${cssClasses10.HEADER_ROW}`);
      this.header.addEventListener("change", this);
      this.header.addEventListener("click", this);
      this.content = this.root.querySelector(`.${cssClasses10.CONTENT}`);
      this.content.addEventListener("change", this);
      this.content.addEventListener("click", this);
      const rowCheckboxList = this.rowCheckboxList;
      this.rowCheckboxList.forEach((x) => x.root.classList.add(cssClasses10.ROW_CHECKBOX));
      if (this.headerRowCheckbox) {
        this.headerRowCheckbox.root.classList.add(cssClasses10.HEADER_ROW_CHECKBOX);
        rowCheckboxList.push(this.headerRowCheckbox);
      }
    }
    initialSyncWithDOM() {
      var _a2;
      if (this.busy !== void 0) {
        this.busyChanged();
      }
      const rowCheckboxList = this.rowCheckboxList;
      for (let i = 0; i < rowCheckboxList.length; ++i) {
        if (rowCheckboxList[i].checked) {
          this.getRowByIndex(i).classList.add(cssClasses10.ROW_SELECTED);
        }
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    destroy() {
      this.header.removeEventListener("change", this);
      this.header.removeEventListener("click", this);
      this.content.removeEventListener("change", this);
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        getHeaderCellElements: () => this.getHeaderCells(),
        getHeaderCellCount: () => this.getHeaderCells().length,
        getAttributeByHeaderCellIndex: (index, attribute) => this.getHeaderCells()[index].getAttribute(attribute),
        setAttributeByHeaderCellIndex: (index, attribute, value) => this.getHeaderCells()[index].setAttribute(attribute, value),
        setClassNameByHeaderCellIndex: (index, className) => this.getHeaderCells()[index].classList.add(className),
        removeClassNameByHeaderCellIndex: (index, className) => {
          this.getHeaderCells()[index].classList.remove(className);
        },
        notifySortAction: (data) => {
          this.emit(
            events2.SORTED,
            data,
            /** shouldBubble */
            true
          );
        },
        getTableContainerHeight: () => {
          const tableContainer = this.root.querySelector(`.${cssClasses10.TABLE_CONTAINER}`);
          if (!tableContainer) {
            throw new Error("MDCDataTable: Table container element not found.");
          }
          return tableContainer.getBoundingClientRect().height;
        },
        getTableHeaderHeight: () => {
          const tableHeader = this.root.querySelector(selectors2.HEADER_ROW);
          if (!tableHeader) {
            throw new Error("MDCDataTable: Table header element not found.");
          }
          return tableHeader.getBoundingClientRect().height;
        },
        setProgressIndicatorStyles: (styles) => {
          const progressIndicator = this.root.querySelector(selectors2.PROGRESS_INDICATOR);
          if (!progressIndicator) {
            throw new Error("MDCDataTable: Progress indicator element not found.");
          }
          Object.assign(progressIndicator.style, styles);
        },
        addClassAtRowIndex: (rowIndex, className) => {
          this.getRows()[rowIndex].classList.add(className);
        },
        getRowCount: () => this.getRows().length,
        getRowElements: () => [].slice.call(this.root.querySelectorAll(selectors2.ROW)),
        getRowIdAtIndex: (rowIndex) => this.getRows()[rowIndex].getAttribute(dataAttributes.ROW_ID),
        getRowIndexByChildElement: (el) => this.getRows().indexOf(closest(el, selectors2.ROW)),
        getSelectedRowCount: () => this.root.querySelectorAll(selectors2.ROW_SELECTED).length,
        isCheckboxAtRowIndexChecked: (rowIndex) => this.rowCheckboxList[rowIndex].checked,
        isHeaderRowCheckboxChecked: () => {
          var _a2;
          return ((_a2 = this.headerRowCheckbox) == null ? void 0 : _a2.checked) ?? false;
        },
        isRowsSelectable: () => !!this.root.querySelector(selectors2.ROW_CHECKBOX),
        notifyRowSelectionChanged: (data) => {
          this.emit(
            events2.ROW_SELECTION_CHANGED,
            {
              row: this.getRowByIndex(data.rowIndex),
              rowId: this.getRowIdByIndex(data.rowIndex),
              rowIndex: data.rowIndex,
              selected: data.selected
            },
            /** shouldBubble */
            true
          );
        },
        notifySelectedAll: () => {
          this.emit(
            events2.SELECTED_ALL,
            {},
            /** shouldBubble */
            true
          );
        },
        notifyUnselectedAll: () => {
          this.emit(
            events2.UNSELECTED_ALL,
            {},
            /** shouldBubble */
            true
          );
        },
        notifyRowClick: (data) => {
          this.emit(
            events2.ROW_CLICK,
            data,
            /** shouldBubble */
            true
          );
        },
        registerHeaderRowCheckbox: () => {
        },
        registerRowCheckboxes: () => {
        },
        removeClassAtRowIndex: (rowIndex, className) => {
          this.getRows()[rowIndex].classList.remove(className);
        },
        setAttributeAtRowIndex: (rowIndex, attr, value) => {
          this.getRows()[rowIndex].setAttribute(attr, value);
        },
        setHeaderRowCheckboxChecked: (checked) => {
          if (this.headerRowCheckbox) {
            this.headerRowCheckbox.checked = checked;
          }
        },
        setHeaderRowCheckboxIndeterminate: (indeterminate) => {
          if (this.headerRowCheckbox) {
            this.headerRowCheckbox.indeterminate = indeterminate;
          }
        },
        setRowCheckboxCheckedAtIndex: (rowIndex, checked) => {
          this.rowCheckboxList[rowIndex].checked = checked;
        },
        setSortStatusLabelByHeaderCellIndex: (columnIndex, sortValue) => {
          const headerCell = this.getHeaderCells()[columnIndex];
          const sortStatusLabel = headerCell.querySelector(selectors2.SORT_STATUS_LABEL);
          if (!sortStatusLabel) {
            return;
          }
          sortStatusLabel.textContent = this.getSortStatusMessageBySortValue(sortValue);
        }
      };
      return new MDCDataTableFoundation(adapter);
    }
    getRowByIndex(index) {
      return this.getRows()[index];
    }
    getRowIdByIndex(index) {
      return this.getRowByIndex(index).getAttribute(dataAttributes.ROW_ID);
    }
    handleHeaderRowClick(event) {
      var _a2;
      const headerCell = closest(event.target, selectors2.HEADER_CELL_WITH_SORT);
      if (!headerCell) {
        return;
      }
      const columnId = headerCell.getAttribute(dataAttributes.COLUMN_ID);
      const columnIndex = this.getHeaderCells().indexOf(headerCell);
      if (columnIndex === -1) {
        return;
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.handleSortAction({ columnId, columnIndex, headerCell });
    }
    getSortStatusMessageBySortValue(sortValue) {
      switch (sortValue) {
        case SortValue.ASCENDING:
          return messages.SORTED_IN_ASCENDING;
        case SortValue.DESCENDING:
          return messages.SORTED_IN_DESCENDING;
        default:
          return "";
      }
    }
    getRowIdByRowElement(rowElement) {
      return rowElement.getAttribute(dataAttributes.ROW_ID);
    }
    constructor() {
      super(...arguments);
      this.pagination = __runInitializers(this, _pagination_initializers, void 0);
      this.rowsPerPageLabel = (__runInitializers(this, _pagination_extraInitializers), __runInitializers(this, _rowsPerPageLabel_initializers, "Rows per page"));
      this.pageSizes = (__runInitializers(this, _rowsPerPageLabel_extraInitializers), __runInitializers(this, _pageSizes_initializers, [10, 25, 100]));
      this.pageSize = (__runInitializers(this, _pageSizes_extraInitializers), __runInitializers(this, _pageSize_initializers, 10));
      this.stickyHeader = (__runInitializers(this, _pageSize_extraInitializers), __runInitializers(this, _stickyHeader_initializers, void 0));
      this.recordsCount = (__runInitializers(this, _stickyHeader_extraInitializers), __runInitializers(this, _recordsCount_initializers, void 0));
      this.activePage = (__runInitializers(this, _recordsCount_extraInitializers), __runInitializers(this, _activePage_initializers, void 0));
      this.busy = (__runInitializers(this, _activePage_extraInitializers), __runInitializers(this, _busy_initializers, void 0));
      this.hoistPageSelectToBody = (__runInitializers(this, _busy_extraInitializers), __runInitializers(this, _hoistPageSelectToBody_initializers, void 0));
      __runInitializers(this, _hoistPageSelectToBody_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDataTable");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _pagination_decorators = [bindable({ set: booleanAttr8 })];
    _rowsPerPageLabel_decorators = [bindable()];
    _pageSizes_decorators = [bindable()];
    _pageSize_decorators = [bindable({ mode: BindingMode.twoWay })];
    _stickyHeader_decorators = [bindable({ set: booleanAttr8 })];
    _recordsCount_decorators = [bindable({ set: number8 })];
    _activePage_decorators = [bindable({ set: number8 })];
    _busy_decorators = [bindable({ set: booleanAttr8 })];
    _hoistPageSelectToBody_decorators = [bindable({ set: booleanAttr8 })];
    __esDecorate(null, null, _pagination_decorators, { kind: "field", name: "pagination", static: false, private: false, access: { has: (obj) => "pagination" in obj, get: (obj) => obj.pagination, set: (obj, value) => {
      obj.pagination = value;
    } }, metadata: _metadata }, _pagination_initializers, _pagination_extraInitializers);
    __esDecorate(null, null, _rowsPerPageLabel_decorators, { kind: "field", name: "rowsPerPageLabel", static: false, private: false, access: { has: (obj) => "rowsPerPageLabel" in obj, get: (obj) => obj.rowsPerPageLabel, set: (obj, value) => {
      obj.rowsPerPageLabel = value;
    } }, metadata: _metadata }, _rowsPerPageLabel_initializers, _rowsPerPageLabel_extraInitializers);
    __esDecorate(null, null, _pageSizes_decorators, { kind: "field", name: "pageSizes", static: false, private: false, access: { has: (obj) => "pageSizes" in obj, get: (obj) => obj.pageSizes, set: (obj, value) => {
      obj.pageSizes = value;
    } }, metadata: _metadata }, _pageSizes_initializers, _pageSizes_extraInitializers);
    __esDecorate(null, null, _pageSize_decorators, { kind: "field", name: "pageSize", static: false, private: false, access: { has: (obj) => "pageSize" in obj, get: (obj) => obj.pageSize, set: (obj, value) => {
      obj.pageSize = value;
    } }, metadata: _metadata }, _pageSize_initializers, _pageSize_extraInitializers);
    __esDecorate(null, null, _stickyHeader_decorators, { kind: "field", name: "stickyHeader", static: false, private: false, access: { has: (obj) => "stickyHeader" in obj, get: (obj) => obj.stickyHeader, set: (obj, value) => {
      obj.stickyHeader = value;
    } }, metadata: _metadata }, _stickyHeader_initializers, _stickyHeader_extraInitializers);
    __esDecorate(null, null, _recordsCount_decorators, { kind: "field", name: "recordsCount", static: false, private: false, access: { has: (obj) => "recordsCount" in obj, get: (obj) => obj.recordsCount, set: (obj, value) => {
      obj.recordsCount = value;
    } }, metadata: _metadata }, _recordsCount_initializers, _recordsCount_extraInitializers);
    __esDecorate(null, null, _activePage_decorators, { kind: "field", name: "activePage", static: false, private: false, access: { has: (obj) => "activePage" in obj, get: (obj) => obj.activePage, set: (obj, value) => {
      obj.activePage = value;
    } }, metadata: _metadata }, _activePage_initializers, _activePage_extraInitializers);
    __esDecorate(null, null, _busy_decorators, { kind: "field", name: "busy", static: false, private: false, access: { has: (obj) => "busy" in obj, get: (obj) => obj.busy, set: (obj, value) => {
      obj.busy = value;
    } }, metadata: _metadata }, _busy_initializers, _busy_extraInitializers);
    __esDecorate(null, null, _hoistPageSelectToBody_decorators, { kind: "field", name: "hoistPageSelectToBody", static: false, private: false, access: { has: (obj) => "hoistPageSelectToBody" in obj, get: (obj) => obj.hoistPageSelectToBody, set: (obj, value) => {
      obj.hoistPageSelectToBody = value;
    } }, metadata: _metadata }, _hoistPageSelectToBody_initializers, _hoistPageSelectToBody_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDataTable2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDataTable2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/data-table/dist/mdc-data-table-row.js
var import_dist454 = __toESM(require_dist());
var import_dist455 = __toESM(require_dist2());
var import_dist456 = __toESM(require_dist3());
var MdcDataTableRow = (() => {
  let _classDecorators = [customAttribute("mdc-data-table-row"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDataTableRow2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add(cssClasses10.ROW);
      const cells = this.root.querySelectorAll("th,td");
      for (const cell of Array.from(cells)) {
        cell.classList.add(cssClasses10.CELL);
        cell.classList.toggle(cssClasses10.CELL_NUMERIC, cell.hasAttribute("numeric"));
        if (cell.tagName === "TH") {
          cell.setAttribute("scope", "row");
        }
      }
    }
  };
  __setFunctionName(_classThis, "MdcDataTableRow");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDataTableRow2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDataTableRow2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/data-table/dist/index.js
var registered6 = false;
var DataTableConfiguration = {
  register(container) {
    if (registered6) {
      return container;
    } else {
      registered6 = true;
      return container.register(MdcDataTable, MdcDataTableRow, CheckboxConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/dialog/dist/index.js
var import_dist517 = __toESM(require_dist());
var import_dist518 = __toESM(require_dist2());
var import_dist519 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog.js
var import_dist502 = __toESM(require_dist());
var import_dist503 = __toESM(require_dist2());
var import_dist504 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist478 = __toESM(require_dist());
var import_dist479 = __toESM(require_dist2());
var import_dist480 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist463 = __toESM(require_dist());
var import_dist464 = __toESM(require_dist2());
var import_dist465 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist460 = __toESM(require_dist());
var import_dist461 = __toESM(require_dist2());
var import_dist462 = __toESM(require_dist3());
function booleanAttr9(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap9 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr9 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr9 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr9 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist466 = __toESM(require_dist());
var import_dist467 = __toESM(require_dist2());
var import_dist468 = __toESM(require_dist3());
var MdcPromisifyReference9 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist469 = __toESM(require_dist());
var import_dist470 = __toESM(require_dist2());
var import_dist471 = __toESM(require_dist3());
var MdcComponent9 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist472 = __toESM(require_dist());
var import_dist473 = __toESM(require_dist2());
var import_dist474 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist475 = __toESM(require_dist());
var import_dist476 = __toESM(require_dist2());
var import_dist477 = __toESM(require_dist3());

// node_modules/@material/dialog/index.js
var import_dist499 = __toESM(require_dist());
var import_dist500 = __toESM(require_dist2());
var import_dist501 = __toESM(require_dist3());

// node_modules/@material/dialog/util.js
var util_exports2 = {};
__export(util_exports2, {
  areTopsMisaligned: () => areTopsMisaligned,
  createFocusTrapInstance: () => createFocusTrapInstance,
  isScrollAtBottom: () => isScrollAtBottom,
  isScrollAtTop: () => isScrollAtTop,
  isScrollable: () => isScrollable
});
var import_dist481 = __toESM(require_dist());
var import_dist482 = __toESM(require_dist2());
var import_dist483 = __toESM(require_dist3());
function createFocusTrapInstance(surfaceEl, focusTrapFactory, initialFocusEl) {
  return focusTrapFactory(surfaceEl, { initialFocusEl });
}
function isScrollable(el) {
  return el ? el.scrollHeight > el.offsetHeight : false;
}
function isScrollAtTop(el) {
  return el ? el.scrollTop === 0 : false;
}
function isScrollAtBottom(el) {
  return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight : false;
}
function areTopsMisaligned(els) {
  var tops = /* @__PURE__ */ new Set();
  [].forEach.call(els, function(el) {
    return tops.add(el.offsetTop);
  });
  return tops.size > 1;
}

// node_modules/@material/dialog/adapter.js
var import_dist484 = __toESM(require_dist());
var import_dist485 = __toESM(require_dist2());
var import_dist486 = __toESM(require_dist3());

// node_modules/@material/dialog/component.js
var import_dist493 = __toESM(require_dist());
var import_dist494 = __toESM(require_dist2());
var import_dist495 = __toESM(require_dist3());

// node_modules/@material/dialog/foundation.js
var import_dist490 = __toESM(require_dist());
var import_dist491 = __toESM(require_dist2());
var import_dist492 = __toESM(require_dist3());

// node_modules/@material/dialog/constants.js
var import_dist487 = __toESM(require_dist());
var import_dist488 = __toESM(require_dist2());
var import_dist489 = __toESM(require_dist3());
var cssClasses11 = {
  CLOSING: "mdc-dialog--closing",
  OPEN: "mdc-dialog--open",
  OPENING: "mdc-dialog--opening",
  SCROLLABLE: "mdc-dialog--scrollable",
  SCROLL_LOCK: "mdc-dialog-scroll-lock",
  STACKED: "mdc-dialog--stacked",
  FULLSCREEN: "mdc-dialog--fullscreen",
  // Class for showing a scroll divider on full-screen dialog header element.
  // Should only be displayed on scrollable content, when the dialog content is
  // scrolled "underneath" the header.
  SCROLL_DIVIDER_HEADER: "mdc-dialog-scroll-divider-header",
  // Class for showing a scroll divider on a full-screen dialog footer element.
  // Should only be displayed on scrolalble content, when the dialog content is
  // obscured "underneath" the footer.
  SCROLL_DIVIDER_FOOTER: "mdc-dialog-scroll-divider-footer",
  // The "surface scrim" is a scrim covering only the surface of a dialog. This
  // is used in situations where a confirmation dialog is shown over an already
  // opened full-screen dialog. On larger screen-sizes, the full-screen dialog
  // is sized as a modal and so in these situations we display a "surface scrim"
  // to prevent a "double scrim" (where the scrim from the secondary
  // confirmation dialog would overlap with the scrim from the full-screen
  // dialog).
  SURFACE_SCRIM_SHOWN: "mdc-dialog__surface-scrim--shown",
  // "Showing" animating class for the surface-scrim.
  SURFACE_SCRIM_SHOWING: "mdc-dialog__surface-scrim--showing",
  // "Hiding" animating class for the surface-scrim.
  SURFACE_SCRIM_HIDING: "mdc-dialog__surface-scrim--hiding",
  // Class to hide a dialog's scrim (used in conjunction with a surface-scrim).
  // Note that we only hide the original scrim rather than removing it entirely
  // to prevent interactions with the content behind this scrim, and to capture
  // scrim clicks.
  SCRIM_HIDDEN: "mdc-dialog__scrim--hidden"
};
var strings11 = {
  ACTION_ATTRIBUTE: "data-mdc-dialog-action",
  BUTTON_DEFAULT_ATTRIBUTE: "data-mdc-dialog-button-default",
  BUTTON_SELECTOR: ".mdc-dialog__button",
  CLOSED_EVENT: "MDCDialog:closed",
  CLOSE_ACTION: "close",
  CLOSING_EVENT: "MDCDialog:closing",
  CONTAINER_SELECTOR: ".mdc-dialog__container",
  CONTENT_SELECTOR: ".mdc-dialog__content",
  DESTROY_ACTION: "destroy",
  INITIAL_FOCUS_ATTRIBUTE: "data-mdc-dialog-initial-focus",
  OPENED_EVENT: "MDCDialog:opened",
  OPENING_EVENT: "MDCDialog:opening",
  SCRIM_SELECTOR: ".mdc-dialog__scrim",
  SUPPRESS_DEFAULT_PRESS_SELECTOR: [
    "textarea",
    ".mdc-menu .mdc-list-item",
    ".mdc-menu .mdc-deprecated-list-item"
  ].join(", "),
  SURFACE_SELECTOR: ".mdc-dialog__surface"
};
var numbers4 = {
  DIALOG_ANIMATION_CLOSE_TIME_MS: 75,
  DIALOG_ANIMATION_OPEN_TIME_MS: 150
};

// node_modules/@material/dialog/foundation.js
var AnimationKeys2;
(function(AnimationKeys5) {
  AnimationKeys5["POLL_SCROLL_POS"] = "poll_scroll_position";
  AnimationKeys5["POLL_LAYOUT_CHANGE"] = "poll_layout_change";
})(AnimationKeys2 || (AnimationKeys2 = {}));
var MDCDialogFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCDialogFoundation2, _super);
    function MDCDialogFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCDialogFoundation2.defaultAdapter), adapter)) || this;
      _this.dialogOpen = false;
      _this.isFullscreen = false;
      _this.animationFrame = 0;
      _this.animationTimer = 0;
      _this.escapeKeyAction = strings11.CLOSE_ACTION;
      _this.scrimClickAction = strings11.CLOSE_ACTION;
      _this.autoStackButtons = true;
      _this.areButtonsStacked = false;
      _this.suppressDefaultPressSelector = strings11.SUPPRESS_DEFAULT_PRESS_SELECTOR;
      _this.animFrame = new AnimationFrame();
      _this.contentScrollHandler = function() {
        _this.handleScrollEvent();
      };
      _this.windowResizeHandler = function() {
        _this.layout();
      };
      _this.windowOrientationChangeHandler = function() {
        _this.layout();
      };
      return _this;
    }
    Object.defineProperty(MDCDialogFoundation2, "cssClasses", {
      get: function() {
        return cssClasses11;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation2, "strings", {
      get: function() {
        return strings11;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation2, "numbers", {
      get: function() {
        return numbers4;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialogFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addBodyClass: function() {
            return void 0;
          },
          addClass: function() {
            return void 0;
          },
          areButtonsStacked: function() {
            return false;
          },
          clickDefaultButton: function() {
            return void 0;
          },
          eventTargetMatches: function() {
            return false;
          },
          getActionFromEvent: function() {
            return "";
          },
          getInitialFocusEl: function() {
            return null;
          },
          hasClass: function() {
            return false;
          },
          isContentScrollable: function() {
            return false;
          },
          notifyClosed: function() {
            return void 0;
          },
          notifyClosing: function() {
            return void 0;
          },
          notifyOpened: function() {
            return void 0;
          },
          notifyOpening: function() {
            return void 0;
          },
          releaseFocus: function() {
            return void 0;
          },
          removeBodyClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          reverseButtons: function() {
            return void 0;
          },
          trapFocus: function() {
            return void 0;
          },
          registerContentEventHandler: function() {
            return void 0;
          },
          deregisterContentEventHandler: function() {
            return void 0;
          },
          isScrollableContentAtTop: function() {
            return false;
          },
          isScrollableContentAtBottom: function() {
            return false;
          },
          registerWindowEventHandler: function() {
            return void 0;
          },
          deregisterWindowEventHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCDialogFoundation2.prototype.init = function() {
      if (this.adapter.hasClass(cssClasses11.STACKED)) {
        this.setAutoStackButtons(false);
      }
      this.isFullscreen = this.adapter.hasClass(cssClasses11.FULLSCREEN);
    };
    MDCDialogFoundation2.prototype.destroy = function() {
      if (this.animationTimer) {
        clearTimeout(this.animationTimer);
        this.handleAnimationTimerEnd();
      }
      if (this.isFullscreen) {
        this.adapter.deregisterContentEventHandler("scroll", this.contentScrollHandler);
      }
      this.animFrame.cancelAll();
      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
      this.adapter.deregisterWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
    };
    MDCDialogFoundation2.prototype.open = function(dialogOptions) {
      var _this = this;
      this.dialogOpen = true;
      this.adapter.notifyOpening();
      this.adapter.addClass(cssClasses11.OPENING);
      if (this.isFullscreen) {
        this.adapter.registerContentEventHandler("scroll", this.contentScrollHandler);
      }
      if (dialogOptions && dialogOptions.isAboveFullscreenDialog) {
        this.adapter.addClass(cssClasses11.SCRIM_HIDDEN);
      }
      this.adapter.registerWindowEventHandler("resize", this.windowResizeHandler);
      this.adapter.registerWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
      this.runNextAnimationFrame(function() {
        _this.adapter.addClass(cssClasses11.OPEN);
        _this.adapter.addBodyClass(cssClasses11.SCROLL_LOCK);
        _this.layout();
        _this.animationTimer = setTimeout(function() {
          _this.handleAnimationTimerEnd();
          _this.adapter.trapFocus(_this.adapter.getInitialFocusEl());
          _this.adapter.notifyOpened();
        }, numbers4.DIALOG_ANIMATION_OPEN_TIME_MS);
      });
    };
    MDCDialogFoundation2.prototype.close = function(action) {
      var _this = this;
      if (action === void 0) {
        action = "";
      }
      if (!this.dialogOpen) {
        return;
      }
      this.dialogOpen = false;
      this.adapter.notifyClosing(action);
      this.adapter.addClass(cssClasses11.CLOSING);
      this.adapter.removeClass(cssClasses11.OPEN);
      this.adapter.removeBodyClass(cssClasses11.SCROLL_LOCK);
      if (this.isFullscreen) {
        this.adapter.deregisterContentEventHandler("scroll", this.contentScrollHandler);
      }
      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
      this.adapter.deregisterWindowEventHandler("orientationchange", this.windowOrientationChangeHandler);
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = 0;
      clearTimeout(this.animationTimer);
      this.animationTimer = setTimeout(function() {
        _this.adapter.releaseFocus();
        _this.handleAnimationTimerEnd();
        _this.adapter.notifyClosed(action);
      }, numbers4.DIALOG_ANIMATION_CLOSE_TIME_MS);
    };
    MDCDialogFoundation2.prototype.showSurfaceScrim = function() {
      var _this = this;
      this.adapter.addClass(cssClasses11.SURFACE_SCRIM_SHOWING);
      this.runNextAnimationFrame(function() {
        _this.adapter.addClass(cssClasses11.SURFACE_SCRIM_SHOWN);
      });
    };
    MDCDialogFoundation2.prototype.hideSurfaceScrim = function() {
      this.adapter.removeClass(cssClasses11.SURFACE_SCRIM_SHOWN);
      this.adapter.addClass(cssClasses11.SURFACE_SCRIM_HIDING);
    };
    MDCDialogFoundation2.prototype.handleSurfaceScrimTransitionEnd = function() {
      this.adapter.removeClass(cssClasses11.SURFACE_SCRIM_HIDING);
      this.adapter.removeClass(cssClasses11.SURFACE_SCRIM_SHOWING);
    };
    MDCDialogFoundation2.prototype.isOpen = function() {
      return this.dialogOpen;
    };
    MDCDialogFoundation2.prototype.getEscapeKeyAction = function() {
      return this.escapeKeyAction;
    };
    MDCDialogFoundation2.prototype.setEscapeKeyAction = function(action) {
      this.escapeKeyAction = action;
    };
    MDCDialogFoundation2.prototype.getScrimClickAction = function() {
      return this.scrimClickAction;
    };
    MDCDialogFoundation2.prototype.setScrimClickAction = function(action) {
      this.scrimClickAction = action;
    };
    MDCDialogFoundation2.prototype.getAutoStackButtons = function() {
      return this.autoStackButtons;
    };
    MDCDialogFoundation2.prototype.setAutoStackButtons = function(autoStack) {
      this.autoStackButtons = autoStack;
    };
    MDCDialogFoundation2.prototype.getSuppressDefaultPressSelector = function() {
      return this.suppressDefaultPressSelector;
    };
    MDCDialogFoundation2.prototype.setSuppressDefaultPressSelector = function(selector) {
      this.suppressDefaultPressSelector = selector;
    };
    MDCDialogFoundation2.prototype.layout = function() {
      var _this = this;
      this.animFrame.request(AnimationKeys2.POLL_LAYOUT_CHANGE, function() {
        _this.layoutInternal();
      });
    };
    MDCDialogFoundation2.prototype.handleClick = function(evt) {
      var isScrim = this.adapter.eventTargetMatches(evt.target, strings11.SCRIM_SELECTOR);
      if (isScrim && this.scrimClickAction !== "") {
        this.close(this.scrimClickAction);
      } else {
        var action = this.adapter.getActionFromEvent(evt);
        if (action) {
          this.close(action);
        }
      }
    };
    MDCDialogFoundation2.prototype.handleKeydown = function(evt) {
      var isEnter = evt.key === "Enter" || evt.keyCode === 13;
      if (!isEnter) {
        return;
      }
      var action = this.adapter.getActionFromEvent(evt);
      if (action) {
        return;
      }
      var target = evt.composedPath ? evt.composedPath()[0] : evt.target;
      var isDefault = this.suppressDefaultPressSelector ? !this.adapter.eventTargetMatches(target, this.suppressDefaultPressSelector) : true;
      if (isEnter && isDefault) {
        this.adapter.clickDefaultButton();
      }
    };
    MDCDialogFoundation2.prototype.handleDocumentKeydown = function(evt) {
      var isEscape = evt.key === "Escape" || evt.keyCode === 27;
      if (isEscape && this.escapeKeyAction !== "") {
        this.close(this.escapeKeyAction);
      }
    };
    MDCDialogFoundation2.prototype.handleScrollEvent = function() {
      var _this = this;
      this.animFrame.request(AnimationKeys2.POLL_SCROLL_POS, function() {
        _this.toggleScrollDividerHeader();
        _this.toggleScrollDividerFooter();
      });
    };
    MDCDialogFoundation2.prototype.layoutInternal = function() {
      if (this.autoStackButtons) {
        this.detectStackedButtons();
      }
      this.toggleScrollableClasses();
    };
    MDCDialogFoundation2.prototype.handleAnimationTimerEnd = function() {
      this.animationTimer = 0;
      this.adapter.removeClass(cssClasses11.OPENING);
      this.adapter.removeClass(cssClasses11.CLOSING);
    };
    MDCDialogFoundation2.prototype.runNextAnimationFrame = function(callback) {
      var _this = this;
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = requestAnimationFrame(function() {
        _this.animationFrame = 0;
        clearTimeout(_this.animationTimer);
        _this.animationTimer = setTimeout(callback, 0);
      });
    };
    MDCDialogFoundation2.prototype.detectStackedButtons = function() {
      this.adapter.removeClass(cssClasses11.STACKED);
      var areButtonsStacked = this.adapter.areButtonsStacked();
      if (areButtonsStacked) {
        this.adapter.addClass(cssClasses11.STACKED);
      }
      if (areButtonsStacked !== this.areButtonsStacked) {
        this.adapter.reverseButtons();
        this.areButtonsStacked = areButtonsStacked;
      }
    };
    MDCDialogFoundation2.prototype.toggleScrollableClasses = function() {
      this.adapter.removeClass(cssClasses11.SCROLLABLE);
      if (this.adapter.isContentScrollable()) {
        this.adapter.addClass(cssClasses11.SCROLLABLE);
        if (this.isFullscreen) {
          this.toggleScrollDividerHeader();
          this.toggleScrollDividerFooter();
        }
      }
    };
    MDCDialogFoundation2.prototype.toggleScrollDividerHeader = function() {
      if (!this.adapter.isScrollableContentAtTop()) {
        this.adapter.addClass(cssClasses11.SCROLL_DIVIDER_HEADER);
      } else if (this.adapter.hasClass(cssClasses11.SCROLL_DIVIDER_HEADER)) {
        this.adapter.removeClass(cssClasses11.SCROLL_DIVIDER_HEADER);
      }
    };
    MDCDialogFoundation2.prototype.toggleScrollDividerFooter = function() {
      if (!this.adapter.isScrollableContentAtBottom()) {
        this.adapter.addClass(cssClasses11.SCROLL_DIVIDER_FOOTER);
      } else if (this.adapter.hasClass(cssClasses11.SCROLL_DIVIDER_FOOTER)) {
        this.adapter.removeClass(cssClasses11.SCROLL_DIVIDER_FOOTER);
      }
    };
    return MDCDialogFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/dialog/component.js
var strings12 = MDCDialogFoundation.strings;
var MDCDialog = (
  /** @class */
  function(_super) {
    __extends(MDCDialog2, _super);
    function MDCDialog2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCDialog2.prototype, "isOpen", {
      get: function() {
        return this.foundation.isOpen();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialog2.prototype, "escapeKeyAction", {
      get: function() {
        return this.foundation.getEscapeKeyAction();
      },
      set: function(action) {
        this.foundation.setEscapeKeyAction(action);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialog2.prototype, "scrimClickAction", {
      get: function() {
        return this.foundation.getScrimClickAction();
      },
      set: function(action) {
        this.foundation.setScrimClickAction(action);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCDialog2.prototype, "autoStackButtons", {
      get: function() {
        return this.foundation.getAutoStackButtons();
      },
      set: function(autoStack) {
        this.foundation.setAutoStackButtons(autoStack);
      },
      enumerable: false,
      configurable: true
    });
    MDCDialog2.attachTo = function(root) {
      return new MDCDialog2(root);
    };
    MDCDialog2.prototype.initialize = function(focusTrapFactory) {
      var e_1, _a2;
      if (focusTrapFactory === void 0) {
        focusTrapFactory = function(el, focusOptions) {
          return new FocusTrap(el, focusOptions);
        };
      }
      var container = this.root.querySelector(strings12.CONTAINER_SELECTOR);
      if (!container) {
        throw new Error("Dialog component requires a " + strings12.CONTAINER_SELECTOR + " container element");
      }
      this.container = container;
      this.content = this.root.querySelector(strings12.CONTENT_SELECTOR);
      this.buttons = [].slice.call(this.root.querySelectorAll(strings12.BUTTON_SELECTOR));
      this.defaultButton = this.root.querySelector("[" + strings12.BUTTON_DEFAULT_ATTRIBUTE + "]");
      this.focusTrapFactory = focusTrapFactory;
      this.buttonRipples = [];
      try {
        for (var _b = __values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
          var buttonEl = _c.value;
          this.buttonRipples.push(new MDCRipple(buttonEl));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    MDCDialog2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.focusTrap = createFocusTrapInstance(this.container, this.focusTrapFactory, this.getInitialFocusEl() || void 0);
      this.handleClick = this.foundation.handleClick.bind(this.foundation);
      this.handleKeydown = this.foundation.handleKeydown.bind(this.foundation);
      this.handleDocumentKeydown = this.foundation.handleDocumentKeydown.bind(this.foundation);
      this.handleOpening = function() {
        document.addEventListener("keydown", _this.handleDocumentKeydown);
      };
      this.handleClosing = function() {
        document.removeEventListener("keydown", _this.handleDocumentKeydown);
      };
      this.listen("click", this.handleClick);
      this.listen("keydown", this.handleKeydown);
      this.listen(strings12.OPENING_EVENT, this.handleOpening);
      this.listen(strings12.CLOSING_EVENT, this.handleClosing);
    };
    MDCDialog2.prototype.destroy = function() {
      this.unlisten("click", this.handleClick);
      this.unlisten("keydown", this.handleKeydown);
      this.unlisten(strings12.OPENING_EVENT, this.handleOpening);
      this.unlisten(strings12.CLOSING_EVENT, this.handleClosing);
      this.handleClosing();
      this.buttonRipples.forEach(function(ripple) {
        ripple.destroy();
      });
      _super.prototype.destroy.call(this);
    };
    MDCDialog2.prototype.layout = function() {
      this.foundation.layout();
    };
    MDCDialog2.prototype.open = function() {
      this.foundation.open();
    };
    MDCDialog2.prototype.close = function(action) {
      if (action === void 0) {
        action = "";
      }
      this.foundation.close(action);
    };
    MDCDialog2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addBodyClass: function(className) {
          return document.body.classList.add(className);
        },
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        areButtonsStacked: function() {
          return areTopsMisaligned(_this.buttons);
        },
        clickDefaultButton: function() {
          if (_this.defaultButton && !_this.defaultButton.disabled) {
            _this.defaultButton.click();
          }
        },
        eventTargetMatches: function(target, selector) {
          return target ? matches(target, selector) : false;
        },
        getActionFromEvent: function(evt) {
          if (!evt.target) {
            return "";
          }
          var element = closest(evt.target, "[" + strings12.ACTION_ATTRIBUTE + "]");
          return element && element.getAttribute(strings12.ACTION_ATTRIBUTE);
        },
        getInitialFocusEl: function() {
          return _this.getInitialFocusEl();
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isContentScrollable: function() {
          return isScrollable(_this.content);
        },
        notifyClosed: function(action) {
          return _this.emit(strings12.CLOSED_EVENT, action ? { action } : {});
        },
        notifyClosing: function(action) {
          return _this.emit(strings12.CLOSING_EVENT, action ? { action } : {});
        },
        notifyOpened: function() {
          return _this.emit(strings12.OPENED_EVENT, {});
        },
        notifyOpening: function() {
          return _this.emit(strings12.OPENING_EVENT, {});
        },
        releaseFocus: function() {
          _this.focusTrap.releaseFocus();
        },
        removeBodyClass: function(className) {
          return document.body.classList.remove(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        reverseButtons: function() {
          _this.buttons.reverse();
          _this.buttons.forEach(function(button) {
            button.parentElement.appendChild(button);
          });
        },
        trapFocus: function() {
          _this.focusTrap.trapFocus();
        },
        registerContentEventHandler: function(evt, handler) {
          if (_this.content instanceof HTMLElement) {
            _this.content.addEventListener(evt, handler);
          }
        },
        deregisterContentEventHandler: function(evt, handler) {
          if (_this.content instanceof HTMLElement) {
            _this.content.removeEventListener(evt, handler);
          }
        },
        isScrollableContentAtTop: function() {
          return isScrollAtTop(_this.content);
        },
        isScrollableContentAtBottom: function() {
          return isScrollAtBottom(_this.content);
        },
        registerWindowEventHandler: function(evt, handler) {
          window.addEventListener(evt, handler);
        },
        deregisterWindowEventHandler: function(evt, handler) {
          window.removeEventListener(evt, handler);
        }
      };
      return new MDCDialogFoundation(adapter);
    };
    MDCDialog2.prototype.getInitialFocusEl = function() {
      return this.root.querySelector("[" + strings12.INITIAL_FOCUS_ATTRIBUTE + "]");
    };
    return MDCDialog2;
  }(MDCComponent)
);

// node_modules/@material/dialog/types.js
var import_dist496 = __toESM(require_dist());
var import_dist497 = __toESM(require_dist2());
var import_dist498 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog.html?raw
var mdc_dialog_default = `<template class="mdc-dialog \${fullscreen ? 'mdc-dialog--fullscreen' : ''} \${sheet ? 'mdc-dialog--sheet' : ''}"
  click.trigger="handleClick_($event)" keydown.trigger="handleKeydown_($event)"
  mdcdialog:opening.trigger="handleOpening_()" mdcdialog:closing.trigger="handleClosing_()" aria-modal="true"
  mdc-focus-trap="initial-focus-el.bind: getInitialFocusEl" mdc-focus-trap.ref="mdcFocusTrap">
  <div class="mdc-dialog__container">
    <div class="mdc-dialog__surface" role="alertdialog" aria-modal="true" aria-labelledby="\${titleId}"
      aria-describedby="\${contentId}">
      <button if.bind="sheet" class="mdc-icon-button material-icons mdc-dialog__close"
        data-mdc-dialog-action="close">close</button>
      <au-slot></au-slot>
    </div>
  </div>
  <div class="mdc-dialog__scrim"></div>
</template>
`;

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog.js
var LAYOUT_EVENTS = ["resize", "orientationchange"];
var dialogId = 0;
strings11.OPENING_EVENT = strings11.OPENING_EVENT.toLowerCase();
strings11.CLOSING_EVENT = strings11.CLOSING_EVENT.toLowerCase();
strings11.OPENED_EVENT = strings11.OPENED_EVENT.toLowerCase();
strings11.CLOSED_EVENT = strings11.CLOSED_EVENT.toLowerCase();
var MdcDialog = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-dialog", template: mdc_dialog_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent9;
  let _scrimClickAction_decorators;
  let _scrimClickAction_initializers = [];
  let _scrimClickAction_extraInitializers = [];
  let _escapeKeyAction_decorators;
  let _escapeKeyAction_initializers = [];
  let _escapeKeyAction_extraInitializers = [];
  let _fullscreen_decorators;
  let _fullscreen_initializers = [];
  let _fullscreen_extraInitializers = [];
  let _sheet_decorators;
  let _sheet_initializers = [];
  let _sheet_extraInitializers = [];
  var MdcDialog2 = _classThis = class extends _classSuper {
    constructor() {
      super(...arguments);
      this.id = ++dialogId;
      this.contentId = `mdc-dialog-content-${this.id}`;
      this.titleId = `mdc-dialog-title-${this.id}`;
      this.scrimClickAction = __runInitializers(this, _scrimClickAction_initializers, void 0);
      this.escapeKeyAction = (__runInitializers(this, _scrimClickAction_extraInitializers), __runInitializers(this, _escapeKeyAction_initializers, void 0));
      this.fullscreen = (__runInitializers(this, _escapeKeyAction_extraInitializers), __runInitializers(this, _fullscreen_initializers, void 0));
      this.sheet = (__runInitializers(this, _fullscreen_extraInitializers), __runInitializers(this, _sheet_initializers, void 0));
      this.getInitialFocusEl = (__runInitializers(this, _sheet_extraInitializers), () => {
        return this.root.querySelector(`[${strings11.INITIAL_FOCUS_ATTRIBUTE}] input, [${strings11.INITIAL_FOCUS_ATTRIBUTE}] .mdc-select__anchor`);
      });
    }
    scrimClickActionChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setScrimClickAction(this.scrimClickAction);
    }
    escapeKeyActionChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setEscapeKeyAction(this.escapeKeyAction);
    }
    get defaultButton() {
      return this.root.querySelector(`[${strings11.BUTTON_DEFAULT_ATTRIBUTE}]`);
    }
    get content() {
      return this.root.querySelector(`${strings11.CONTENT_SELECTOR}`);
    }
    beforeFoundationCreated() {
      this.buttons = [].slice.call(this.root.querySelectorAll(strings11.BUTTON_SELECTOR));
      const content = this.root.querySelector("mdc-dialog-content");
      content == null ? void 0 : content.setAttribute("id", this.contentId);
      const title = this.root.querySelector("mdc-dialog-title");
      title == null ? void 0 : title.setAttribute("id", this.titleId);
    }
    destroy() {
      this.handleClosing_();
      super.destroy();
    }
    handleClick_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick(evt);
      return true;
    }
    handleKeydown_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt);
      return true;
    }
    handleEvent(evt) {
      var _a2, _b;
      switch (evt.currentTarget) {
        case window:
          switch (evt.type) {
            case "resize":
            case "orientationchange":
              (_a2 = this.foundation) == null ? void 0 : _a2.layout();
              break;
          }
          break;
        case document:
          switch (evt.type) {
            case "keydown":
              (_b = this.foundation) == null ? void 0 : _b.handleDocumentKeydown(evt);
              break;
          }
          break;
      }
    }
    handleOpening_() {
      LAYOUT_EVENTS.forEach((evtType) => window.addEventListener(evtType, this));
      document.addEventListener("keydown", this);
    }
    handleClosing_() {
      LAYOUT_EVENTS.forEach((evtType) => window.removeEventListener(evtType, this));
      document.removeEventListener("keydown", this);
    }
    /** Opens the dialog */
    open() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.open();
    }
    /**
     * Closes the dialog
     * @param action Action to close the dialog with
     */
    close(action = "") {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.close(action);
    }
    getDefaultFoundation() {
      const adapter = {
        addBodyClass: (className) => document.body.classList.add(className),
        addClass: (className) => this.root.classList.add(className),
        areButtonsStacked: () => util_exports2.areTopsMisaligned(this.buttons),
        clickDefaultButton: () => {
          if (this.defaultButton) {
            this.defaultButton.click();
          }
        },
        eventTargetMatches: (target, selector) => target ? matches(target, selector) : false,
        getActionFromEvent: (evt) => {
          if (!evt.target) {
            return "";
          }
          const element = closest(evt.target, `[${strings11.ACTION_ATTRIBUTE}]`);
          return (element == null ? void 0 : element.getAttribute(strings11.ACTION_ATTRIBUTE)) ?? null;
        },
        getInitialFocusEl: () => this.getInitialFocusEl(),
        hasClass: (className) => this.root.classList.contains(className),
        isContentScrollable: () => util_exports2.isScrollable(this.content),
        notifyClosed: (action) => this.emit(strings11.CLOSED_EVENT, action ? { action } : {}),
        notifyClosing: (action) => this.emit(strings11.CLOSING_EVENT, action ? { action } : {}),
        notifyOpened: () => this.emit(strings11.OPENED_EVENT, {}),
        notifyOpening: () => this.emit(strings11.OPENING_EVENT, {}),
        releaseFocus: () => {
          var _a2;
          (_a2 = this.mdcFocusTrap) == null ? void 0 : _a2.releaseFocus();
        },
        removeBodyClass: (className) => document.body.classList.remove(className),
        removeClass: (className) => this.root.classList.remove(className),
        reverseButtons: () => {
          this.buttons.reverse();
          this.buttons.forEach((button) => {
            button.parentElement.appendChild(button);
          });
        },
        trapFocus: () => {
          var _a2;
          (_a2 = this.mdcFocusTrap) == null ? void 0 : _a2.trapFocus();
        },
        registerContentEventHandler: (evt, handler) => {
          if (this.content instanceof HTMLElement) {
            this.content.addEventListener(evt, handler);
          }
        },
        deregisterContentEventHandler: (evt, handler) => {
          if (this.content instanceof HTMLElement) {
            this.content.removeEventListener(evt, handler);
          }
        },
        isScrollableContentAtTop: () => {
          return util_exports2.isScrollAtTop(this.content);
        },
        isScrollableContentAtBottom: () => {
          return util_exports2.isScrollAtBottom(this.content);
        },
        registerWindowEventHandler: (evt, handler) => {
          window.addEventListener(evt, handler);
        },
        deregisterWindowEventHandler: (evt, handler) => {
          window.removeEventListener(evt, handler);
        }
      };
      return new MDCDialogFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcDialog");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _scrimClickAction_decorators = [bindable()];
    _escapeKeyAction_decorators = [bindable()];
    _fullscreen_decorators = [bindable({ set: booleanAttr9 })];
    _sheet_decorators = [bindable({ set: booleanAttr9 })];
    __esDecorate(null, null, _scrimClickAction_decorators, { kind: "field", name: "scrimClickAction", static: false, private: false, access: { has: (obj) => "scrimClickAction" in obj, get: (obj) => obj.scrimClickAction, set: (obj, value) => {
      obj.scrimClickAction = value;
    } }, metadata: _metadata }, _scrimClickAction_initializers, _scrimClickAction_extraInitializers);
    __esDecorate(null, null, _escapeKeyAction_decorators, { kind: "field", name: "escapeKeyAction", static: false, private: false, access: { has: (obj) => "escapeKeyAction" in obj, get: (obj) => obj.escapeKeyAction, set: (obj, value) => {
      obj.escapeKeyAction = value;
    } }, metadata: _metadata }, _escapeKeyAction_initializers, _escapeKeyAction_extraInitializers);
    __esDecorate(null, null, _fullscreen_decorators, { kind: "field", name: "fullscreen", static: false, private: false, access: { has: (obj) => "fullscreen" in obj, get: (obj) => obj.fullscreen, set: (obj, value) => {
      obj.fullscreen = value;
    } }, metadata: _metadata }, _fullscreen_initializers, _fullscreen_extraInitializers);
    __esDecorate(null, null, _sheet_decorators, { kind: "field", name: "sheet", static: false, private: false, access: { has: (obj) => "sheet" in obj, get: (obj) => obj.sheet, set: (obj, value) => {
      obj.sheet = value;
    } }, metadata: _metadata }, _sheet_initializers, _sheet_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDialog2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDialog2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog-actions.js
var import_dist505 = __toESM(require_dist());
var import_dist506 = __toESM(require_dist2());
var import_dist507 = __toESM(require_dist3());
var MdcDialogActions = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-dialog-actions", template: '<template class="mdc-dialog__actions"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _buttons_decorators;
  let _buttons_initializers = [];
  let _buttons_extraInitializers = [];
  var MdcDialogActions2 = _classThis = class {
    buttonsChanged() {
      for (let i = 0; i < this.buttons.length; ++i) {
        this.buttons[i].classList.add("mdc-dialog__button");
      }
    }
    attached() {
      if (this.buttons) {
        this.buttonsChanged();
      }
    }
    constructor() {
      this.buttons = __runInitializers(this, _buttons_initializers, void 0);
      __runInitializers(this, _buttons_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDialogActions");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _buttons_decorators = [slotted({ query: ".mdc-button" })];
    __esDecorate(null, null, _buttons_decorators, { kind: "field", name: "buttons", static: false, private: false, access: { has: (obj) => "buttons" in obj, get: (obj) => obj.buttons, set: (obj, value) => {
      obj.buttons = value;
    } }, metadata: _metadata }, _buttons_initializers, _buttons_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDialogActions2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDialogActions2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog-title.js
var import_dist508 = __toESM(require_dist());
var import_dist509 = __toESM(require_dist2());
var import_dist510 = __toESM(require_dist3());
var MdcDialogTitle = (() => {
  let _classDecorators = [customElement({ name: "mdc-dialog-title", template: '<template class="mdc-dialog__title"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDialogTitle2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcDialogTitle");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDialogTitle2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDialogTitle2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog-content.js
var import_dist511 = __toESM(require_dist());
var import_dist512 = __toESM(require_dist2());
var import_dist513 = __toESM(require_dist3());
var MdcDialogContent = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-dialog-content", template: '<template class="mdc-dialog__content"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDialogContent2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
  };
  __setFunctionName(_classThis, "MdcDialogContent");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDialogContent2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDialogContent2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/dialog/dist/mdc-dialog-service.js
var import_dist514 = __toESM(require_dist());
var import_dist515 = __toESM(require_dist2());
var import_dist516 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/dialog/dist/index.js
var registered7 = false;
var DialogConfiguration = {
  register(container) {
    if (registered7) {
      return container;
    } else {
      registered7 = true;
      return container.register(MdcDialog, MdcDialogActions, MdcDialogTitle, MdcDialogContent);
    }
  }
};
FocusTrap.prototype.getFocusableElements = function(root) {
  const focusableEls = [].slice.call(root.querySelectorAll("[autofocus], [tabindex], a, input, textarea, select, button, .mdc-select__anchor"));
  return focusableEls.filter((el) => {
    const isDisabledOrHidden = el.getAttribute("aria-disabled") === "true" || el.getAttribute("disabled") !== null || el.getAttribute("hidden") !== null || el.getAttribute("aria-hidden") === "true";
    const isTabbableAndVisible = (el.tabIndex >= 0 || el.classList.contains("mdc-select__anchor")) && el.getBoundingClientRect().width > 0 && !el.classList.contains("mdc-dom-focus-sentinel") && !isDisabledOrHidden;
    let isProgrammaticallyHidden = false;
    if (isTabbableAndVisible) {
      const style = getComputedStyle(el);
      isProgrammaticallyHidden = style.display === "none" || style.visibility === "hidden";
    }
    return isTabbableAndVisible && !isProgrammaticallyHidden;
  });
};

// node_modules/@aurelia-mdc-web/drawer/dist/index.js
var import_dist553 = __toESM(require_dist());
var import_dist554 = __toESM(require_dist2());
var import_dist555 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer.js
var import_dist541 = __toESM(require_dist());
var import_dist542 = __toESM(require_dist2());
var import_dist543 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist538 = __toESM(require_dist());
var import_dist539 = __toESM(require_dist2());
var import_dist540 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist523 = __toESM(require_dist());
var import_dist524 = __toESM(require_dist2());
var import_dist525 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist520 = __toESM(require_dist());
var import_dist521 = __toESM(require_dist2());
var import_dist522 = __toESM(require_dist3());
function booleanAttr10(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap10 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr10 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr10 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr10 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist526 = __toESM(require_dist());
var import_dist527 = __toESM(require_dist2());
var import_dist528 = __toESM(require_dist3());
var MdcPromisifyReference10 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist529 = __toESM(require_dist());
var import_dist530 = __toESM(require_dist2());
var import_dist531 = __toESM(require_dist3());
var MdcComponent10 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist532 = __toESM(require_dist());
var import_dist533 = __toESM(require_dist2());
var import_dist534 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist535 = __toESM(require_dist());
var import_dist536 = __toESM(require_dist2());
var import_dist537 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer.html?raw
var mdc_drawer_default = `<template class="mdc-drawer
  \${type === 'dismissible' ? 'mdc-drawer--dismissible' : ''}
  \${ type === 'modal' ? 'mdc-drawer--modal' : ''}" transitionend.trigger="handleTransitionEnd_($event)"
  keydown.trigger="handleKeydown_($event)" mdc-focus-trap mdc-focus-trap.ref="mdcFocusTrap">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer.js
strings2.CLOSE_EVENT = strings2.CLOSE_EVENT.toLowerCase();
strings2.OPEN_EVENT = strings2.OPEN_EVENT.toLowerCase();
var MdcDrawer = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-drawer", template: mdc_drawer_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent10;
  let _type_decorators;
  let _type_initializers = [];
  let _type_extraInitializers = [];
  var MdcDrawer2 = _classThis = class extends _classSuper {
    constructor() {
      super(...arguments);
      this.type = __runInitializers(this, _type_initializers, "standard");
      this.previousFocus_ = __runInitializers(this, _type_extraInitializers);
      this.handleScrimClick_ = () => {
        this.open = false;
        return this.foundation.handleScrimClick();
      };
    }
    /**
     * @return boolean Proxies to the foundation's `open`/`close` methods.
     * Also returns true if drawer is in the open position.
     */
    get open() {
      return this.foundation.isOpen();
    }
    /**
     * Toggles the drawer open and closed.
     */
    set open(isOpen) {
      var _a2, _b;
      if (isOpen) {
        (_a2 = this.foundation) == null ? void 0 : _a2.open();
      } else {
        (_b = this.foundation) == null ? void 0 : _b.close();
      }
    }
    attaching() {
      if (this.root.parentElement.clientWidth < 900) {
        this.type = "modal";
      }
    }
    initialSyncWithDOM() {
      if (this.type === "modal") {
        this.scrim_ = document.createElement("div");
        this.scrim_.classList.add("mdc-drawer-scrim");
        this.root.insertAdjacentElement("afterend", this.scrim_);
        if (this.scrim_) {
          this.scrim_.addEventListener("click", this.handleScrimClick_);
        }
      }
    }
    handleKeydown_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt);
      return true;
    }
    handleTransitionEnd_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleTransitionEnd(evt);
      return true;
    }
    destroy() {
      const { MODAL } = cssClasses2;
      if (this.scrim_ && this.handleScrimClick_ && this.root.classList.contains(MODAL)) {
        this.scrim_.removeEventListener("click", this.handleScrimClick_);
        this.open = false;
      }
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        elementHasClass: (element, className) => element.classList.contains(className),
        saveFocus: () => this.previousFocus_ = document.activeElement,
        restoreFocus: () => {
          const previousFocus = this.previousFocus_;
          if ((previousFocus == null ? void 0 : previousFocus.focus) && this.root.contains(document.activeElement)) {
            previousFocus.focus();
          }
        },
        focusActiveNavigationItem: () => {
          const activeNavItemEl = this.root.querySelector(".mdc-deprecated-list-item--activated");
          if (activeNavItemEl) {
            activeNavItemEl.focus();
          }
        },
        notifyClose: () => this.emit(
          strings2.CLOSE_EVENT,
          {},
          true
          /* shouldBubble */
        ),
        notifyOpen: () => this.emit(
          strings2.OPEN_EVENT,
          {},
          true
          /* shouldBubble */
        ),
        trapFocus: () => this.mdcFocusTrap.trapFocus(),
        releaseFocus: () => this.mdcFocusTrap.releaseFocus()
      };
      if (this.type === "modal") {
        return new MDCModalDrawerFoundation(adapter);
      } else {
        return new MDCDismissibleDrawerFoundation(adapter);
      }
    }
    toggle() {
      this.open = !this.open;
    }
  };
  __setFunctionName(_classThis, "MdcDrawer");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _type_decorators = [bindable()];
    __esDecorate(null, null, _type_decorators, { kind: "field", name: "type", static: false, private: false, access: { has: (obj) => "type" in obj, get: (obj) => obj.type, set: (obj, value) => {
      obj.type = value;
    } }, metadata: _metadata }, _type_initializers, _type_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDrawer2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDrawer2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer-content.js
var import_dist544 = __toESM(require_dist());
var import_dist545 = __toESM(require_dist2());
var import_dist546 = __toESM(require_dist3());
var MdcDrawerContent = (() => {
  let _classDecorators = [customElement({
    name: "mdc-drawer-content",
    template: '<template class="mdc-drawer__content"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDrawerContent2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcDrawerContent");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDrawerContent2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDrawerContent2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer-app-content.js
var import_dist547 = __toESM(require_dist());
var import_dist548 = __toESM(require_dist2());
var import_dist549 = __toESM(require_dist3());
var MdcDrawerAppContent = (() => {
  let _classDecorators = [customElement({
    name: "mdc-drawer-app-content",
    template: '<template class="mdc-drawer-app-content"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDrawerAppContent2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcDrawerAppContent");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDrawerAppContent2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDrawerAppContent2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer-header/mdc-drawer-header.js
var import_dist550 = __toESM(require_dist());
var import_dist551 = __toESM(require_dist2());
var import_dist552 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer-header/mdc-drawer-header.html?raw
var mdc_drawer_header_default = '<template class="mdc-drawer__header">\n  <h3 class="mdc-drawer__title" if.bind="title">${title}</h3>\n  <h6 class="mdc-drawer__subtitle" if.bind="subtitle">${subtitle}</h6>\n  <au-slot></au-slot>\n</template>\n';

// node_modules/@aurelia-mdc-web/drawer/dist/mdc-drawer-header/mdc-drawer-header.js
var MdcDrawerHeader = (() => {
  let _classDecorators = [customElement({ name: "mdc-drawer-header", template: mdc_drawer_header_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _title_decorators;
  let _title_initializers = [];
  let _title_extraInitializers = [];
  let _subtitle_decorators;
  let _subtitle_initializers = [];
  let _subtitle_extraInitializers = [];
  var MdcDrawerHeader2 = _classThis = class {
    constructor() {
      this.title = __runInitializers(this, _title_initializers, void 0);
      this.subtitle = (__runInitializers(this, _title_extraInitializers), __runInitializers(this, _subtitle_initializers, void 0));
      __runInitializers(this, _subtitle_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDrawerHeader");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _title_decorators = [bindable()];
    _subtitle_decorators = [bindable()];
    __esDecorate(null, null, _title_decorators, { kind: "field", name: "title", static: false, private: false, access: { has: (obj) => "title" in obj, get: (obj) => obj.title, set: (obj, value) => {
      obj.title = value;
    } }, metadata: _metadata }, _title_initializers, _title_extraInitializers);
    __esDecorate(null, null, _subtitle_decorators, { kind: "field", name: "subtitle", static: false, private: false, access: { has: (obj) => "subtitle" in obj, get: (obj) => obj.subtitle, set: (obj, value) => {
      obj.subtitle = value;
    } }, metadata: _metadata }, _subtitle_initializers, _subtitle_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDrawerHeader2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDrawerHeader2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/drawer/dist/index.js
var registered8 = false;
var DrawerConfiguration = {
  register(container) {
    if (registered8) {
      return container;
    } else {
      registered8 = true;
      return container.register(MdcDrawer, MdcDrawerContent, MdcDrawerAppContent, MdcDrawerHeader);
    }
  }
};

// node_modules/@aurelia-mdc-web/floating-label/dist/index.js
var import_dist595 = __toESM(require_dist());
var import_dist596 = __toESM(require_dist2());
var import_dist597 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/floating-label/dist/mdc-floating-label.js
var import_dist592 = __toESM(require_dist());
var import_dist593 = __toESM(require_dist2());
var import_dist594 = __toESM(require_dist3());

// node_modules/@material/floating-label/index.js
var import_dist568 = __toESM(require_dist());
var import_dist569 = __toESM(require_dist2());
var import_dist570 = __toESM(require_dist3());

// node_modules/@material/floating-label/adapter.js
var import_dist556 = __toESM(require_dist());
var import_dist557 = __toESM(require_dist2());
var import_dist558 = __toESM(require_dist3());

// node_modules/@material/floating-label/component.js
var import_dist565 = __toESM(require_dist());
var import_dist566 = __toESM(require_dist2());
var import_dist567 = __toESM(require_dist3());

// node_modules/@material/floating-label/foundation.js
var import_dist562 = __toESM(require_dist());
var import_dist563 = __toESM(require_dist2());
var import_dist564 = __toESM(require_dist3());

// node_modules/@material/floating-label/constants.js
var import_dist559 = __toESM(require_dist());
var import_dist560 = __toESM(require_dist2());
var import_dist561 = __toESM(require_dist3());
var cssClasses12 = {
  LABEL_FLOAT_ABOVE: "mdc-floating-label--float-above",
  LABEL_REQUIRED: "mdc-floating-label--required",
  LABEL_SHAKE: "mdc-floating-label--shake",
  ROOT: "mdc-floating-label"
};

// node_modules/@material/floating-label/foundation.js
var MDCFloatingLabelFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCFloatingLabelFoundation2, _super);
    function MDCFloatingLabelFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCFloatingLabelFoundation2.defaultAdapter), adapter)) || this;
      _this.shakeAnimationEndHandler = function() {
        _this.handleShakeAnimationEnd();
      };
      return _this;
    }
    Object.defineProperty(MDCFloatingLabelFoundation2, "cssClasses", {
      get: function() {
        return cssClasses12;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCFloatingLabelFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCFloatingLabelAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          getWidth: function() {
            return 0;
          },
          registerInteractionHandler: function() {
            return void 0;
          },
          deregisterInteractionHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCFloatingLabelFoundation2.prototype.init = function() {
      this.adapter.registerInteractionHandler("animationend", this.shakeAnimationEndHandler);
    };
    MDCFloatingLabelFoundation2.prototype.destroy = function() {
      this.adapter.deregisterInteractionHandler("animationend", this.shakeAnimationEndHandler);
    };
    MDCFloatingLabelFoundation2.prototype.getWidth = function() {
      return this.adapter.getWidth();
    };
    MDCFloatingLabelFoundation2.prototype.shake = function(shouldShake) {
      var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
      if (shouldShake) {
        this.adapter.addClass(LABEL_SHAKE);
      } else {
        this.adapter.removeClass(LABEL_SHAKE);
      }
    };
    MDCFloatingLabelFoundation2.prototype.float = function(shouldFloat) {
      var _a2 = MDCFloatingLabelFoundation2.cssClasses, LABEL_FLOAT_ABOVE = _a2.LABEL_FLOAT_ABOVE, LABEL_SHAKE = _a2.LABEL_SHAKE;
      if (shouldFloat) {
        this.adapter.addClass(LABEL_FLOAT_ABOVE);
      } else {
        this.adapter.removeClass(LABEL_FLOAT_ABOVE);
        this.adapter.removeClass(LABEL_SHAKE);
      }
    };
    MDCFloatingLabelFoundation2.prototype.setRequired = function(isRequired) {
      var LABEL_REQUIRED = MDCFloatingLabelFoundation2.cssClasses.LABEL_REQUIRED;
      if (isRequired) {
        this.adapter.addClass(LABEL_REQUIRED);
      } else {
        this.adapter.removeClass(LABEL_REQUIRED);
      }
    };
    MDCFloatingLabelFoundation2.prototype.handleShakeAnimationEnd = function() {
      var LABEL_SHAKE = MDCFloatingLabelFoundation2.cssClasses.LABEL_SHAKE;
      this.adapter.removeClass(LABEL_SHAKE);
    };
    return MDCFloatingLabelFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/floating-label/component.js
var MDCFloatingLabel = (
  /** @class */
  function(_super) {
    __extends(MDCFloatingLabel2, _super);
    function MDCFloatingLabel2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCFloatingLabel2.attachTo = function(root) {
      return new MDCFloatingLabel2(root);
    };
    MDCFloatingLabel2.prototype.shake = function(shouldShake) {
      this.foundation.shake(shouldShake);
    };
    MDCFloatingLabel2.prototype.float = function(shouldFloat) {
      this.foundation.float(shouldFloat);
    };
    MDCFloatingLabel2.prototype.setRequired = function(isRequired) {
      this.foundation.setRequired(isRequired);
    };
    MDCFloatingLabel2.prototype.getWidth = function() {
      return this.foundation.getWidth();
    };
    MDCFloatingLabel2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        getWidth: function() {
          return estimateScrollWidth(_this.root);
        },
        registerInteractionHandler: function(evtType, handler) {
          return _this.listen(evtType, handler);
        },
        deregisterInteractionHandler: function(evtType, handler) {
          return _this.unlisten(evtType, handler);
        }
      };
      return new MDCFloatingLabelFoundation(adapter);
    };
    return MDCFloatingLabel2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist589 = __toESM(require_dist());
var import_dist590 = __toESM(require_dist2());
var import_dist591 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist574 = __toESM(require_dist());
var import_dist575 = __toESM(require_dist2());
var import_dist576 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist571 = __toESM(require_dist());
var import_dist572 = __toESM(require_dist2());
var import_dist573 = __toESM(require_dist3());
function booleanAttr11(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap11 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr11 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr11 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr11 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist577 = __toESM(require_dist());
var import_dist578 = __toESM(require_dist2());
var import_dist579 = __toESM(require_dist3());
var MdcPromisifyReference11 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist580 = __toESM(require_dist());
var import_dist581 = __toESM(require_dist2());
var import_dist582 = __toESM(require_dist3());
var MdcComponent11 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist583 = __toESM(require_dist());
var import_dist584 = __toESM(require_dist2());
var import_dist585 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/floating-label/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist586 = __toESM(require_dist());
var import_dist587 = __toESM(require_dist2());
var import_dist588 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/floating-label/dist/mdc-floating-label.html?raw
var mdc_floating_label_default = '<template class="mdc-floating-label"><au-slot></au-slot></template>\n';

// node_modules/@aurelia-mdc-web/floating-label/dist/mdc-floating-label.js
var MdcFloatingLabel = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-floating-label", template: mdc_floating_label_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent11;
  var MdcFloatingLabel2 = _classThis = class extends _classSuper {
    shake(shouldShake) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.shake(shouldShake);
    }
    /**
     * Styles the label to float/dock.
     * @param shouldFloat If true, floats the label by adding a CSS class; otherwise, docks it by removing the class.
     */
    float(shouldFloat) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.float(shouldFloat);
    }
    /**
     * Styles the label as required.
     * @param isRequired If true, adds an asterisk to the label, indicating that it is required.
     */
    setRequired(isRequired) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setRequired(isRequired);
    }
    getWidth() {
      return this.foundation.getWidth();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        getWidth: () => estimateScrollWidth(this.root),
        registerInteractionHandler: (evtType, handler) => this.listen(evtType, handler),
        deregisterInteractionHandler: (evtType, handler) => this.unlisten(evtType, handler)
      };
      return new MDCFloatingLabelFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcFloatingLabel");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFloatingLabel2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFloatingLabel2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/floating-label/dist/index.js
var registered9 = false;
var FloatingLabelConfiguration = {
  register(container) {
    if (registered9) {
      return container;
    } else {
      registered9 = true;
      return container.register(MdcFloatingLabel);
    }
  }
};

// node_modules/@aurelia-mdc-web/form-field/dist/index.js
var import_dist637 = __toESM(require_dist());
var import_dist638 = __toESM(require_dist2());
var import_dist639 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/form-field/dist/mdc-form-field.js
var import_dist634 = __toESM(require_dist());
var import_dist635 = __toESM(require_dist2());
var import_dist636 = __toESM(require_dist3());

// node_modules/@material/form-field/index.js
var import_dist610 = __toESM(require_dist());
var import_dist611 = __toESM(require_dist2());
var import_dist612 = __toESM(require_dist3());

// node_modules/@material/form-field/adapter.js
var import_dist598 = __toESM(require_dist());
var import_dist599 = __toESM(require_dist2());
var import_dist600 = __toESM(require_dist3());

// node_modules/@material/form-field/component.js
var import_dist607 = __toESM(require_dist());
var import_dist608 = __toESM(require_dist2());
var import_dist609 = __toESM(require_dist3());

// node_modules/@material/form-field/foundation.js
var import_dist604 = __toESM(require_dist());
var import_dist605 = __toESM(require_dist2());
var import_dist606 = __toESM(require_dist3());

// node_modules/@material/form-field/constants.js
var import_dist601 = __toESM(require_dist());
var import_dist602 = __toESM(require_dist2());
var import_dist603 = __toESM(require_dist3());
var cssClasses13 = {
  ROOT: "mdc-form-field"
};
var strings13 = {
  LABEL_SELECTOR: ".mdc-form-field > label"
};

// node_modules/@material/form-field/foundation.js
var MDCFormFieldFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCFormFieldFoundation2, _super);
    function MDCFormFieldFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCFormFieldFoundation2.defaultAdapter), adapter)) || this;
      _this.click = function() {
        _this.handleClick();
      };
      return _this;
    }
    Object.defineProperty(MDCFormFieldFoundation2, "cssClasses", {
      get: function() {
        return cssClasses13;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation2, "strings", {
      get: function() {
        return strings13;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCFormFieldFoundation2, "defaultAdapter", {
      get: function() {
        return {
          activateInputRipple: function() {
            return void 0;
          },
          deactivateInputRipple: function() {
            return void 0;
          },
          deregisterInteractionHandler: function() {
            return void 0;
          },
          registerInteractionHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCFormFieldFoundation2.prototype.init = function() {
      this.adapter.registerInteractionHandler("click", this.click);
    };
    MDCFormFieldFoundation2.prototype.destroy = function() {
      this.adapter.deregisterInteractionHandler("click", this.click);
    };
    MDCFormFieldFoundation2.prototype.handleClick = function() {
      var _this = this;
      this.adapter.activateInputRipple();
      requestAnimationFrame(function() {
        _this.adapter.deactivateInputRipple();
      });
    };
    return MDCFormFieldFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/form-field/component.js
var MDCFormField = (
  /** @class */
  function(_super) {
    __extends(MDCFormField2, _super);
    function MDCFormField2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCFormField2.attachTo = function(root) {
      return new MDCFormField2(root);
    };
    MDCFormField2.prototype.labelEl = function() {
      var LABEL_SELECTOR2 = MDCFormFieldFoundation.strings.LABEL_SELECTOR;
      return this.root.querySelector(LABEL_SELECTOR2);
    };
    MDCFormField2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        activateInputRipple: function() {
          if (_this.input && _this.input.ripple) {
            _this.input.ripple.activate();
          }
        },
        deactivateInputRipple: function() {
          if (_this.input && _this.input.ripple) {
            _this.input.ripple.deactivate();
          }
        },
        deregisterInteractionHandler: function(evtType, handler) {
          var labelEl = _this.labelEl();
          if (labelEl) {
            labelEl.removeEventListener(evtType, handler);
          }
        },
        registerInteractionHandler: function(evtType, handler) {
          var labelEl = _this.labelEl();
          if (labelEl) {
            labelEl.addEventListener(evtType, handler);
          }
        }
      };
      return new MDCFormFieldFoundation(adapter);
    };
    return MDCFormField2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist631 = __toESM(require_dist());
var import_dist632 = __toESM(require_dist2());
var import_dist633 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist616 = __toESM(require_dist());
var import_dist617 = __toESM(require_dist2());
var import_dist618 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist613 = __toESM(require_dist());
var import_dist614 = __toESM(require_dist2());
var import_dist615 = __toESM(require_dist3());
function booleanAttr12(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap12 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr12 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr12 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr12 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist619 = __toESM(require_dist());
var import_dist620 = __toESM(require_dist2());
var import_dist621 = __toESM(require_dist3());
var MdcPromisifyReference12 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist622 = __toESM(require_dist());
var import_dist623 = __toESM(require_dist2());
var import_dist624 = __toESM(require_dist3());
var MdcComponent12 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist625 = __toESM(require_dist());
var import_dist626 = __toESM(require_dist2());
var import_dist627 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/form-field/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist628 = __toESM(require_dist());
var import_dist629 = __toESM(require_dist2());
var import_dist630 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/form-field/dist/mdc-form-field.html?raw
var mdc_form_field_default = "<template class=\"mdc-form-field\n    ${cssClasses.ROOT}--au ${nowrap ? cssClasses.ROOT + '--nowrap' : ''}\n    ${alignEnd ? cssClasses.ROOT + '--align-end' : ''}\n    ${spaceBetween ? cssClasses.ROOT + '--space-between' : ''}\">\n  <au-slot></au-slot>\n</template>\n";

// node_modules/@aurelia-mdc-web/form-field/dist/mdc-form-field.js
var MdcFormField = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-form-field", template: mdc_form_field_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent12;
  let _nowrap_decorators;
  let _nowrap_initializers = [];
  let _nowrap_extraInitializers = [];
  let _alignEnd_decorators;
  let _alignEnd_initializers = [];
  let _alignEnd_extraInitializers = [];
  let _spaceBetween_decorators;
  let _spaceBetween_initializers = [];
  let _spaceBetween_extraInitializers = [];
  var MdcFormField2 = _classThis = class extends _classSuper {
    initialSyncWithDOM() {
      var _a2;
      let rippleUpgraded = this.root.querySelector("mdc-checkbox");
      if (!rippleUpgraded) {
        rippleUpgraded = this.root.querySelector("mdc-radio");
      }
      this.ripple = rippleUpgraded ? (_a2 = CustomAttribute.for(rippleUpgraded, "mdc-ripple")) == null ? void 0 : _a2.viewModel : void 0;
      const input = this.root.querySelector("input, button");
      if (input == null ? void 0 : input.hasAttribute("id")) {
        this.label = this.root.querySelector("label");
        if (this.label) {
          this.label.setAttribute("for", input.getAttribute("id"));
        }
      }
    }
    getDefaultFoundation() {
      const adapter = {
        activateInputRipple: () => {
          var _a2;
          return (_a2 = this.ripple) == null ? void 0 : _a2.activate();
        },
        deactivateInputRipple: () => {
          var _a2;
          return (_a2 = this.ripple) == null ? void 0 : _a2.deactivate();
        },
        deregisterInteractionHandler: (evtType, handler) => {
          var _a2;
          return (_a2 = this.label) == null ? void 0 : _a2.removeEventListener(evtType, handler);
        },
        registerInteractionHandler: (evtType, handler) => {
          var _a2;
          return (_a2 = this.label) == null ? void 0 : _a2.addEventListener(evtType, handler);
        }
      };
      return new MDCFormFieldFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.cssClasses = cssClasses13;
      this.nowrap = __runInitializers(this, _nowrap_initializers, void 0);
      this.alignEnd = (__runInitializers(this, _nowrap_extraInitializers), __runInitializers(this, _alignEnd_initializers, void 0));
      this.spaceBetween = (__runInitializers(this, _alignEnd_extraInitializers), __runInitializers(this, _spaceBetween_initializers, void 0));
      __runInitializers(this, _spaceBetween_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcFormField");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _nowrap_decorators = [bindable({ set: booleanAttr12 })];
    _alignEnd_decorators = [bindable({ set: booleanAttr12 })];
    _spaceBetween_decorators = [bindable({ set: booleanAttr12 })];
    __esDecorate(null, null, _nowrap_decorators, { kind: "field", name: "nowrap", static: false, private: false, access: { has: (obj) => "nowrap" in obj, get: (obj) => obj.nowrap, set: (obj, value) => {
      obj.nowrap = value;
    } }, metadata: _metadata }, _nowrap_initializers, _nowrap_extraInitializers);
    __esDecorate(null, null, _alignEnd_decorators, { kind: "field", name: "alignEnd", static: false, private: false, access: { has: (obj) => "alignEnd" in obj, get: (obj) => obj.alignEnd, set: (obj, value) => {
      obj.alignEnd = value;
    } }, metadata: _metadata }, _alignEnd_initializers, _alignEnd_extraInitializers);
    __esDecorate(null, null, _spaceBetween_decorators, { kind: "field", name: "spaceBetween", static: false, private: false, access: { has: (obj) => "spaceBetween" in obj, get: (obj) => obj.spaceBetween, set: (obj, value) => {
      obj.spaceBetween = value;
    } }, metadata: _metadata }, _spaceBetween_initializers, _spaceBetween_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFormField2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFormField2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/form-field/dist/index.js
var registered10 = false;
var FormFieldConfiguration = {
  register(container) {
    if (registered10) {
      return container;
    } else {
      registered10 = true;
      return container.register(MdcFormField);
    }
  }
};

// node_modules/@aurelia-mdc-web/icon/dist/index.js
var import_dist643 = __toESM(require_dist());
var import_dist644 = __toESM(require_dist2());
var import_dist645 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon/dist/mdc-icon.js
var import_dist640 = __toESM(require_dist());
var import_dist641 = __toESM(require_dist2());
var import_dist642 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon/dist/mdc-icon.html?raw
var mdc_icon_default = '<template class="material-icons">\n  <au-slot></au-slot>\n</template>\n';

// node_modules/@aurelia-mdc-web/icon/dist/mdc-icon.js
var MdcIcon = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-icon", template: mdc_icon_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcIcon2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
  };
  __setFunctionName(_classThis, "MdcIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon/dist/index.js
var registered11 = false;
var IconConfiguration = {
  register(container) {
    if (registered11) {
      return container;
    } else {
      registered11 = true;
      return container.register(MdcIcon);
    }
  }
};

// node_modules/@aurelia-mdc-web/icon-button/dist/index.js
var import_dist694 = __toESM(require_dist());
var import_dist695 = __toESM(require_dist2());
var import_dist696 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button-icon/mdc-icon-button-icon.js
var import_dist667 = __toESM(require_dist());
var import_dist668 = __toESM(require_dist2());
var import_dist669 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist664 = __toESM(require_dist());
var import_dist665 = __toESM(require_dist2());
var import_dist666 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist649 = __toESM(require_dist());
var import_dist650 = __toESM(require_dist2());
var import_dist651 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist646 = __toESM(require_dist());
var import_dist647 = __toESM(require_dist2());
var import_dist648 = __toESM(require_dist3());
function booleanAttr13(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap13 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr13 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr13 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr13 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist652 = __toESM(require_dist());
var import_dist653 = __toESM(require_dist2());
var import_dist654 = __toESM(require_dist3());
var MdcPromisifyReference13 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist655 = __toESM(require_dist());
var import_dist656 = __toESM(require_dist2());
var import_dist657 = __toESM(require_dist3());
var MdcComponent13 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist658 = __toESM(require_dist());
var import_dist659 = __toESM(require_dist2());
var import_dist660 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist661 = __toESM(require_dist());
var import_dist662 = __toESM(require_dist2());
var import_dist663 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button-icon/mdc-icon-button-icon.html?raw
var mdc_icon_button_icon_default = `<template class="mdc-icon-button__icon \${on ? 'mdc-icon-button__icon--on' : ''} material-icons">
  <au-slot></au-slot>
  <span class="material-icons" if.bind="icon">\${icon}</span>
</template>
`;

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button-icon/mdc-icon-button-icon.js
var MdcIconButtonIcon = (() => {
  let _classDecorators = [customElement({ name: "mdc-icon-button-icon", template: mdc_icon_button_icon_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _on_decorators;
  let _on_initializers = [];
  let _on_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  var MdcIconButtonIcon2 = _classThis = class {
    constructor() {
      this.on = __runInitializers(this, _on_initializers, void 0);
      this.icon = (__runInitializers(this, _on_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      __runInitializers(this, _icon_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcIconButtonIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _on_decorators = [bindable({ set: booleanAttr13 })];
    _icon_decorators = [bindable()];
    __esDecorate(null, null, _on_decorators, { kind: "field", name: "on", static: false, private: false, access: { has: (obj) => "on" in obj, get: (obj) => obj.on, set: (obj, value) => {
      obj.on = value;
    } }, metadata: _metadata }, _on_initializers, _on_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcIconButtonIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcIconButtonIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button.js
var import_dist688 = __toESM(require_dist());
var import_dist689 = __toESM(require_dist2());
var import_dist690 = __toESM(require_dist3());

// node_modules/@material/icon-button/index.js
var import_dist685 = __toESM(require_dist());
var import_dist686 = __toESM(require_dist2());
var import_dist687 = __toESM(require_dist3());

// node_modules/@material/icon-button/adapter.js
var import_dist670 = __toESM(require_dist());
var import_dist671 = __toESM(require_dist2());
var import_dist672 = __toESM(require_dist3());

// node_modules/@material/icon-button/component.js
var import_dist679 = __toESM(require_dist());
var import_dist680 = __toESM(require_dist2());
var import_dist681 = __toESM(require_dist3());

// node_modules/@material/icon-button/foundation.js
var import_dist676 = __toESM(require_dist());
var import_dist677 = __toESM(require_dist2());
var import_dist678 = __toESM(require_dist3());

// node_modules/@material/icon-button/constants.js
var import_dist673 = __toESM(require_dist());
var import_dist674 = __toESM(require_dist2());
var import_dist675 = __toESM(require_dist3());
var cssClasses14 = {
  ICON_BUTTON_ON: "mdc-icon-button--on",
  ROOT: "mdc-icon-button"
};
var strings14 = {
  ARIA_LABEL: "aria-label",
  ARIA_PRESSED: "aria-pressed",
  DATA_ARIA_LABEL_OFF: "data-aria-label-off",
  DATA_ARIA_LABEL_ON: "data-aria-label-on",
  CHANGE_EVENT: "MDCIconButtonToggle:change"
};

// node_modules/@material/icon-button/foundation.js
var MDCIconButtonToggleFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCIconButtonToggleFoundation2, _super);
    function MDCIconButtonToggleFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCIconButtonToggleFoundation2.defaultAdapter), adapter)) || this;
      _this.hasToggledAriaLabel = false;
      return _this;
    }
    Object.defineProperty(MDCIconButtonToggleFoundation2, "cssClasses", {
      get: function() {
        return cssClasses14;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCIconButtonToggleFoundation2, "strings", {
      get: function() {
        return strings14;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCIconButtonToggleFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          notifyChange: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          getAttr: function() {
            return null;
          },
          setAttr: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCIconButtonToggleFoundation2.prototype.init = function() {
      var ariaLabelOn = this.adapter.getAttr(strings14.DATA_ARIA_LABEL_ON);
      var ariaLabelOff = this.adapter.getAttr(strings14.DATA_ARIA_LABEL_OFF);
      if (ariaLabelOn && ariaLabelOff) {
        if (this.adapter.getAttr(strings14.ARIA_PRESSED) !== null) {
          throw new Error("MDCIconButtonToggleFoundation: Button should not set `aria-pressed` if it has a toggled aria label.");
        }
        this.hasToggledAriaLabel = true;
      } else {
        this.adapter.setAttr(strings14.ARIA_PRESSED, String(this.isOn()));
      }
    };
    MDCIconButtonToggleFoundation2.prototype.handleClick = function() {
      this.toggle();
      this.adapter.notifyChange({ isOn: this.isOn() });
    };
    MDCIconButtonToggleFoundation2.prototype.isOn = function() {
      return this.adapter.hasClass(cssClasses14.ICON_BUTTON_ON);
    };
    MDCIconButtonToggleFoundation2.prototype.toggle = function(isOn) {
      if (isOn === void 0) {
        isOn = !this.isOn();
      }
      if (isOn) {
        this.adapter.addClass(cssClasses14.ICON_BUTTON_ON);
      } else {
        this.adapter.removeClass(cssClasses14.ICON_BUTTON_ON);
      }
      if (this.hasToggledAriaLabel) {
        var ariaLabel = isOn ? this.adapter.getAttr(strings14.DATA_ARIA_LABEL_ON) : this.adapter.getAttr(strings14.DATA_ARIA_LABEL_OFF);
        this.adapter.setAttr(strings14.ARIA_LABEL, ariaLabel || "");
      } else {
        this.adapter.setAttr(strings14.ARIA_PRESSED, "" + isOn);
      }
    };
    return MDCIconButtonToggleFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/icon-button/component.js
var strings15 = MDCIconButtonToggleFoundation.strings;
var MDCIconButtonToggle = (
  /** @class */
  function(_super) {
    __extends(MDCIconButtonToggle2, _super);
    function MDCIconButtonToggle2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rippleComponent = _this.createRipple();
      return _this;
    }
    MDCIconButtonToggle2.attachTo = function(root) {
      return new MDCIconButtonToggle2(root);
    };
    MDCIconButtonToggle2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.listen("click", this.handleClick);
    };
    MDCIconButtonToggle2.prototype.destroy = function() {
      this.unlisten("click", this.handleClick);
      this.ripple.destroy();
      _super.prototype.destroy.call(this);
    };
    MDCIconButtonToggle2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        notifyChange: function(evtData) {
          _this.emit(strings15.CHANGE_EVENT, evtData);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        getAttr: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        setAttr: function(attrName, attrValue) {
          return _this.root.setAttribute(attrName, attrValue);
        }
      };
      return new MDCIconButtonToggleFoundation(adapter);
    };
    Object.defineProperty(MDCIconButtonToggle2.prototype, "ripple", {
      get: function() {
        return this.rippleComponent;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCIconButtonToggle2.prototype, "on", {
      get: function() {
        return this.foundation.isOn();
      },
      set: function(isOn) {
        this.foundation.toggle(isOn);
      },
      enumerable: false,
      configurable: true
    });
    MDCIconButtonToggle2.prototype.createRipple = function() {
      var ripple = new MDCRipple(this.root);
      ripple.unbounded = true;
      return ripple;
    };
    return MDCIconButtonToggle2;
  }(MDCComponent)
);

// node_modules/@material/icon-button/types.js
var import_dist682 = __toESM(require_dist());
var import_dist683 = __toESM(require_dist2());
var import_dist684 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button.html?raw
var mdc_icon_button_default = `<template class="
    mdc-icon-button mdc-icon-button--display-flex
    \${on ? 'mdc-icon-button--on' : ''}
    \${icon ? 'material-icons' : ''}
    \${touch ? 'mdc-icon-button--touch' : ''}
  " mdc-ripple="no-class.bind: true; unbounded.bind: true" click.trigger="handleClick()">
  <div class="mdc-icon-button__ripple"></div>
  <au-slot></au-slot>
  <span if.bind="icon">\${icon}</span>
  <div class="mdc-icon-button__touch" if.bind="touch"></div>
</template>
`;

// node_modules/@aurelia-mdc-web/icon-button/dist/mdc-icon-button.js
var MdcIconButton = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-icon-button", template: mdc_icon_button_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent13;
  let _on_decorators;
  let _on_initializers = [];
  let _on_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _href_decorators;
  let _href_initializers = [];
  let _href_extraInitializers = [];
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  var MdcIconButton2 = _classThis = class extends _classSuper {
    hrefChanged() {
      if (this.href) {
        this.root.setAttribute("href", this.href);
      } else {
        this.root.removeAttribute("href");
      }
    }
    attached() {
      this.hrefChanged();
      if (this.root.querySelector("mdc-icon-button-icon")) {
        this.foundation = this.getDefaultFoundation();
        this.foundation.init();
      }
    }
    handleClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick();
      return true;
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        hasClass: (className) => this.root.classList.contains(className),
        notifyChange: (evtData) => {
          this.emit(strings14.CHANGE_EVENT, evtData);
          this.on = evtData.isOn;
        },
        removeClass: (className) => this.root.classList.remove(className),
        getAttr: (attrName) => this.root.getAttribute(attrName),
        setAttr: (attrName, attrValue) => this.root.setAttribute(attrName, attrValue)
      };
      return new MDCIconButtonToggleFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.on = __runInitializers(this, _on_initializers, void 0);
      this.icon = (__runInitializers(this, _on_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.href = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _href_initializers, void 0));
      this.touch = (__runInitializers(this, _href_extraInitializers), __runInitializers(this, _touch_initializers, void 0));
      __runInitializers(this, _touch_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcIconButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _on_decorators = [bindable({ set: booleanAttr13, mode: BindingMode.twoWay })];
    _icon_decorators = [bindable()];
    _href_decorators = [bindable()];
    _touch_decorators = [bindable({ set: booleanAttr13, mode: BindingMode.twoWay })];
    __esDecorate(null, null, _on_decorators, { kind: "field", name: "on", static: false, private: false, access: { has: (obj) => "on" in obj, get: (obj) => obj.on, set: (obj, value) => {
      obj.on = value;
    } }, metadata: _metadata }, _on_initializers, _on_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _href_decorators, { kind: "field", name: "href", static: false, private: false, access: { has: (obj) => "href" in obj, get: (obj) => obj.href, set: (obj, value) => {
      obj.href = value;
    } }, metadata: _metadata }, _href_initializers, _href_extraInitializers);
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcIconButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcIconButton2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon-button/dist/enhance-mdc-icon-button.js
var import_dist691 = __toESM(require_dist());
var import_dist692 = __toESM(require_dist2());
var import_dist693 = __toESM(require_dist3());
var EnhanceMdcIconButton = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcIconButton2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-icon-button=""', 'as-element="mdc-icon-button"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcIconButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcIconButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcIconButton2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/icon-button/dist/index.js
var registered12 = false;
var IconButtonConfiguration = {
  register(container) {
    if (registered12) {
      return container;
    } else {
      registered12 = true;
      return container.register(MdcIconButton, MdcIconButtonIcon, EnhanceMdcIconButton);
    }
  }
};

// node_modules/@aurelia-mdc-web/line-ripple/dist/index.js
var import_dist736 = __toESM(require_dist());
var import_dist737 = __toESM(require_dist2());
var import_dist738 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/line-ripple/dist/mdc-line-ripple.js
var import_dist733 = __toESM(require_dist());
var import_dist734 = __toESM(require_dist2());
var import_dist735 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist715 = __toESM(require_dist());
var import_dist716 = __toESM(require_dist2());
var import_dist717 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist700 = __toESM(require_dist());
var import_dist701 = __toESM(require_dist2());
var import_dist702 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist697 = __toESM(require_dist());
var import_dist698 = __toESM(require_dist2());
var import_dist699 = __toESM(require_dist3());
function booleanAttr14(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap14 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr14 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr14 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr14 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist703 = __toESM(require_dist());
var import_dist704 = __toESM(require_dist2());
var import_dist705 = __toESM(require_dist3());
var MdcPromisifyReference14 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist706 = __toESM(require_dist());
var import_dist707 = __toESM(require_dist2());
var import_dist708 = __toESM(require_dist3());
var MdcComponent14 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist709 = __toESM(require_dist());
var import_dist710 = __toESM(require_dist2());
var import_dist711 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/line-ripple/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist712 = __toESM(require_dist());
var import_dist713 = __toESM(require_dist2());
var import_dist714 = __toESM(require_dist3());

// node_modules/@material/line-ripple/index.js
var import_dist730 = __toESM(require_dist());
var import_dist731 = __toESM(require_dist2());
var import_dist732 = __toESM(require_dist3());

// node_modules/@material/line-ripple/adapter.js
var import_dist718 = __toESM(require_dist());
var import_dist719 = __toESM(require_dist2());
var import_dist720 = __toESM(require_dist3());

// node_modules/@material/line-ripple/component.js
var import_dist727 = __toESM(require_dist());
var import_dist728 = __toESM(require_dist2());
var import_dist729 = __toESM(require_dist3());

// node_modules/@material/line-ripple/foundation.js
var import_dist724 = __toESM(require_dist());
var import_dist725 = __toESM(require_dist2());
var import_dist726 = __toESM(require_dist3());

// node_modules/@material/line-ripple/constants.js
var import_dist721 = __toESM(require_dist());
var import_dist722 = __toESM(require_dist2());
var import_dist723 = __toESM(require_dist3());
var cssClasses15 = {
  LINE_RIPPLE_ACTIVE: "mdc-line-ripple--active",
  LINE_RIPPLE_DEACTIVATING: "mdc-line-ripple--deactivating"
};

// node_modules/@material/line-ripple/foundation.js
var MDCLineRippleFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCLineRippleFoundation2, _super);
    function MDCLineRippleFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCLineRippleFoundation2.defaultAdapter), adapter)) || this;
      _this.transitionEndHandler = function(evt) {
        _this.handleTransitionEnd(evt);
      };
      return _this;
    }
    Object.defineProperty(MDCLineRippleFoundation2, "cssClasses", {
      get: function() {
        return cssClasses15;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCLineRippleFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCLineRippleAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          setStyle: function() {
            return void 0;
          },
          registerEventHandler: function() {
            return void 0;
          },
          deregisterEventHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCLineRippleFoundation2.prototype.init = function() {
      this.adapter.registerEventHandler("transitionend", this.transitionEndHandler);
    };
    MDCLineRippleFoundation2.prototype.destroy = function() {
      this.adapter.deregisterEventHandler("transitionend", this.transitionEndHandler);
    };
    MDCLineRippleFoundation2.prototype.activate = function() {
      this.adapter.removeClass(cssClasses15.LINE_RIPPLE_DEACTIVATING);
      this.adapter.addClass(cssClasses15.LINE_RIPPLE_ACTIVE);
    };
    MDCLineRippleFoundation2.prototype.setRippleCenter = function(xCoordinate) {
      this.adapter.setStyle("transform-origin", xCoordinate + "px center");
    };
    MDCLineRippleFoundation2.prototype.deactivate = function() {
      this.adapter.addClass(cssClasses15.LINE_RIPPLE_DEACTIVATING);
    };
    MDCLineRippleFoundation2.prototype.handleTransitionEnd = function(evt) {
      var isDeactivating = this.adapter.hasClass(cssClasses15.LINE_RIPPLE_DEACTIVATING);
      if (evt.propertyName === "opacity") {
        if (isDeactivating) {
          this.adapter.removeClass(cssClasses15.LINE_RIPPLE_ACTIVE);
          this.adapter.removeClass(cssClasses15.LINE_RIPPLE_DEACTIVATING);
        }
      }
    };
    return MDCLineRippleFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/line-ripple/component.js
var MDCLineRipple = (
  /** @class */
  function(_super) {
    __extends(MDCLineRipple2, _super);
    function MDCLineRipple2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCLineRipple2.attachTo = function(root) {
      return new MDCLineRipple2(root);
    };
    MDCLineRipple2.prototype.activate = function() {
      this.foundation.activate();
    };
    MDCLineRipple2.prototype.deactivate = function() {
      this.foundation.deactivate();
    };
    MDCLineRipple2.prototype.setRippleCenter = function(xCoordinate) {
      this.foundation.setRippleCenter(xCoordinate);
    };
    MDCLineRipple2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        setStyle: function(propertyName, value) {
          return _this.root.style.setProperty(propertyName, value);
        },
        registerEventHandler: function(evtType, handler) {
          return _this.listen(evtType, handler);
        },
        deregisterEventHandler: function(evtType, handler) {
          return _this.unlisten(evtType, handler);
        }
      };
      return new MDCLineRippleFoundation(adapter);
    };
    return MDCLineRipple2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/line-ripple/dist/mdc-line-ripple.js
var MdcLineRipple = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-line-ripple", template: '<template class="mdc-line-ripple"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent14;
  var MdcLineRipple2 = _classThis = class extends _classSuper {
    /**
     * Activates the line ripple
     */
    activate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activate();
    }
    /**
     * Deactivates the line ripple
     */
    deactivate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.deactivate();
    }
    /**
     * Sets the transform origin given a user's click location.
     * The `rippleCenter` is the x-coordinate of the middle of the ripple.
     */
    setRippleCenter(xCoordinate) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setRippleCenter(xCoordinate);
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        setStyle: (propertyName, value) => this.root.style.setProperty(propertyName, value),
        registerEventHandler: (evtType, handler) => this.listen(evtType, handler),
        deregisterEventHandler: (evtType, handler) => this.unlisten(evtType, handler)
      };
      return new MDCLineRippleFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcLineRipple");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLineRipple2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLineRipple2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/line-ripple/dist/index.js
var registered13 = false;
var LineRippleConfiguration = {
  register(container) {
    if (registered13) {
      return container;
    } else {
      registered13 = true;
      return container.register(MdcLineRipple);
    }
  }
};

// node_modules/@aurelia-mdc-web/list/dist/index.js
var import_dist826 = __toESM(require_dist());
var import_dist827 = __toESM(require_dist2());
var import_dist828 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-list.js
var import_dist769 = __toESM(require_dist());
var import_dist770 = __toESM(require_dist2());
var import_dist771 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist757 = __toESM(require_dist());
var import_dist758 = __toESM(require_dist2());
var import_dist759 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist742 = __toESM(require_dist());
var import_dist743 = __toESM(require_dist2());
var import_dist744 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist739 = __toESM(require_dist());
var import_dist740 = __toESM(require_dist2());
var import_dist741 = __toESM(require_dist3());
function booleanAttr15(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap15 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr15 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr15 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist745 = __toESM(require_dist());
var import_dist746 = __toESM(require_dist2());
var import_dist747 = __toESM(require_dist3());
var MdcPromisifyReference15 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist748 = __toESM(require_dist());
var import_dist749 = __toESM(require_dist2());
var import_dist750 = __toESM(require_dist3());
var MdcComponent15 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist751 = __toESM(require_dist());
var import_dist752 = __toESM(require_dist2());
var import_dist753 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist754 = __toESM(require_dist());
var import_dist755 = __toESM(require_dist2());
var import_dist756 = __toESM(require_dist3());

// node_modules/@material/list/index.js
var import_dist766 = __toESM(require_dist());
var import_dist767 = __toESM(require_dist2());
var import_dist768 = __toESM(require_dist3());

// node_modules/@material/list/adapter.js
var import_dist760 = __toESM(require_dist());
var import_dist761 = __toESM(require_dist2());
var import_dist762 = __toESM(require_dist3());

// node_modules/@material/list/types.js
var import_dist763 = __toESM(require_dist());
var import_dist764 = __toESM(require_dist2());
var import_dist765 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-list.html?raw
var mdc_list_default = `<template class="\${cssClasses.ROOT}" keydown.trigger="handleKeydownEvent_($event)"
  click.trigger="handleClickEvent_($event)" focusin.trigger="handleFocusInEvent_($event)"
  focusout.trigger="handleFocusOutEvent_($event)" aria-orientation="\${vertical ? 'vertical' : 'horizontal' }">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-list.js
strings.ACTION_EVENT = strings.ACTION_EVENT.toLowerCase();
strings.SELECTION_CHANGE_EVENT = strings.SELECTION_CHANGE_EVENT.toLowerCase();
var mdcListStrings = {
  ITEMS_CHANGED: "mdclist:itemschanged"
};
var MdcList = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-list", template: mdc_list_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent15;
  let _singleSelection_decorators;
  let _singleSelection_initializers = [];
  let _singleSelection_extraInitializers = [];
  let _activated_decorators;
  let _activated_initializers = [];
  let _activated_extraInitializers = [];
  let _itemElements_decorators;
  let _itemElements_initializers = [];
  let _itemElements_extraInitializers = [];
  let _typeahead_decorators;
  let _typeahead_initializers = [];
  let _typeahead_extraInitializers = [];
  let _nonInteractive_decorators;
  let _nonInteractive_initializers = [];
  let _nonInteractive_extraInitializers = [];
  let _wrapFocus_decorators;
  let _wrapFocus_initializers = [];
  let _wrapFocus_extraInitializers = [];
  var MdcList2 = _classThis = class extends _classSuper {
    singleSelectionChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSingleSelection(this.singleSelection);
    }
    activatedChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setUseActivatedClass(this.activated);
    }
    itemsChanged() {
      this.emit(mdcListStrings.ITEMS_CHANGED, { items: this.itemElements }, true);
    }
    get items() {
      return (this.itemElements ?? []).map((x) => CustomElement.for(x).viewModel);
    }
    typeaheadChanged(hasTypeahead) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setHasTypeahead(hasTypeahead);
    }
    wrapFocusChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setWrapFocus(this.wrapFocus);
    }
    initialSyncWithDOM() {
      this.singleSelectionChanged();
      this.activatedChanged();
      this.typeaheadChanged(this.typeahead);
      this.wrapFocusChanged();
      this.layout();
      this.initializeListType();
    }
    get listElements() {
      return Array.from(this.root.querySelectorAll(`.${cssClasses.LIST_ITEM_CLASS}`));
    }
    /**
     * Extracts the primary text from a list item.
     * @param item The list item element.
     * @return The primary text in the element.
     */
    getPrimaryText(item) {
      const primaryText = item.querySelector(`.${cssClasses.LIST_ITEM_PRIMARY_TEXT_CLASS}`);
      if (primaryText) {
        return primaryText.textContent ?? "";
      }
      const singleLineText = item.querySelector(`.${cssClasses.LIST_ITEM_TEXT_CLASS}`);
      return (singleLineText == null ? void 0 : singleLineText.textContent) ?? "";
    }
    getDefaultFoundation() {
      const adapter = {
        addClassForElementIndex: (index, className) => {
          const element = this.listElements[index];
          if (element) {
            element.classList.add(className);
          }
        },
        focusItemAtIndex: (index) => {
          const element = this.listElements[index];
          if (element) {
            element.focus();
          }
        },
        getAttributeForElementIndex: (index, attr) => this.listElements[index].getAttribute(attr),
        getFocusedElementIndex: () => this.listElements.indexOf(document.activeElement),
        getListItemCount: () => this.listElements.length,
        getPrimaryTextAtIndex: (index) => this.getPrimaryText(this.listElements[index]),
        hasCheckboxAtIndex: (index) => {
          const listItem = this.listElements[index];
          return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);
        },
        hasRadioAtIndex: (index) => {
          const listItem = this.listElements[index];
          return !!listItem.querySelector(strings.RADIO_SELECTOR);
        },
        isCheckboxCheckedAtIndex: (index) => {
          const listItem = this.listElements[index];
          const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);
          return toggleEl.checked;
        },
        isFocusInsideList: () => {
          return this.root !== document.activeElement && this.root.contains(document.activeElement);
        },
        isRootFocused: () => document.activeElement === this.root,
        listItemAtIndexHasClass: (index, className) => this.listElements[index].classList.contains(className),
        notifyAction: (index) => {
          const listItem = this.listElements[index];
          if (!listItem.hasAttribute("no-list-action")) {
            const data = CustomElement.for(listItem).viewModel.value;
            this.emit(
              strings.ACTION_EVENT,
              { index, data },
              /** shouldBubble */
              true
            );
          }
        },
        notifySelectionChange: (changedIndices) => {
          this.emit(
            strings.SELECTION_CHANGE_EVENT,
            { changedIndices },
            /** shouldBubble */
            true
          );
        },
        removeClassForElementIndex: (index, className) => {
          const element = this.listElements[index];
          if (element) {
            element.classList.remove(className);
          }
        },
        setAttributeForElementIndex: (index, attr, value) => {
          const element = this.listElements[index];
          if (element) {
            element.setAttribute(attr, value);
          }
        },
        setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {
          const listItem = this.listElements[index];
          const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);
          if (toggleEl == null ? void 0 : toggleEl.disabled) {
            return;
          }
          toggleEl.checked = isChecked;
          const event = document.createEvent("Event");
          event.initEvent("change", true, true);
          toggleEl.dispatchEvent(event);
        },
        setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {
          const element = this.listElements[listItemIndex];
          const listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
          listItemChildren.forEach((el) => el.setAttribute("tabindex", tabIndexValue));
        }
      };
      return new MDCListFoundation(adapter);
    }
    /**
     * @hidden
     * Used to figure out which list item this event is targetting. Or returns -1 if
     * there is no list item
     */
    getListItemIndex_(evt) {
      const eventTarget = evt.target;
      const nearestParent = closest(eventTarget, `.${cssClasses.LIST_ITEM_CLASS}, .${cssClasses.ROOT}`);
      if (nearestParent && matches(nearestParent, `.${cssClasses.LIST_ITEM_CLASS}`)) {
        return this.listElements.indexOf(nearestParent);
      }
      return -1;
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleFocusInEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleFocusIn(index);
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleFocusOutEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleFocusOut(index);
    }
    /**
     * @hidden
     * Used to figure out which element was focused when keydown event occurred before sending the event to the
     * foundation.
     */
    handleKeydownEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      const target = evt.target;
      if (!target.hasAttribute("not-selectable")) {
        (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt, target.classList.contains(cssClasses.LIST_ITEM_CLASS), index);
      }
      return true;
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleClickEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      const target = evt.target;
      const isCheckboxAlreadyUpdatedInAdapter = matches(target, strings.CHECKBOX_RADIO_SELECTOR);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick(index, isCheckboxAlreadyUpdatedInAdapter, evt);
      return true;
    }
    /**
     * @hidden
     * @return Whether typeahead is currently matching a user-specified prefix.
     */
    get typeaheadInProgress() {
      return this.foundation.isTypeaheadInProgress();
    }
    /**
     * @hidden
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Defaults to
     *     the currently focused index.
     * @return The index of the matched item.
     */
    typeaheadMatchItem(nextChar, startingIndex) {
      return this.foundation.typeaheadMatchItem(
        nextChar,
        startingIndex,
        /** skipFocus */
        true
      );
    }
    layout() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    get selectedIndex() {
      return this.foundation.getSelectedIndex();
    }
    set selectedIndex(index) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelectedIndex(index);
    }
    /**
     * @hidden
     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
     */
    initializeListType() {
      const checkboxListItems = this.root.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);
      const radioSelectedListItem = this.root.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);
      if (checkboxListItems.length) {
        const preselectedItems = this.root.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
        this.selectedIndex = [].map.call(preselectedItems, (listItem) => this.listElements.indexOf(listItem));
      } else if (radioSelectedListItem) {
        this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
      }
    }
    constructor() {
      super(...arguments);
      this.cssClasses = cssClasses;
      this.singleSelection = __runInitializers(this, _singleSelection_initializers, void 0);
      this.activated = (__runInitializers(this, _singleSelection_extraInitializers), __runInitializers(this, _activated_initializers, void 0));
      this.itemElements = (__runInitializers(this, _activated_extraInitializers), __runInitializers(this, _itemElements_initializers, void 0));
      this.typeahead = (__runInitializers(this, _itemElements_extraInitializers), __runInitializers(this, _typeahead_initializers, void 0));
      this.nonInteractive = (__runInitializers(this, _typeahead_extraInitializers), __runInitializers(this, _nonInteractive_initializers, void 0));
      this.wrapFocus = (__runInitializers(this, _nonInteractive_extraInitializers), __runInitializers(this, _wrapFocus_initializers, void 0));
      __runInitializers(this, _wrapFocus_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcList");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _singleSelection_decorators = [bindable({ set: booleanAttr15 })];
    _activated_decorators = [bindable({ set: booleanAttr15 })];
    _itemElements_decorators = [slotted({ query: "mdc-list-item" })];
    _typeahead_decorators = [bindable({ set: booleanAttr15 })];
    _nonInteractive_decorators = [bindable({ set: booleanAttr15 })];
    _wrapFocus_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _singleSelection_decorators, { kind: "field", name: "singleSelection", static: false, private: false, access: { has: (obj) => "singleSelection" in obj, get: (obj) => obj.singleSelection, set: (obj, value) => {
      obj.singleSelection = value;
    } }, metadata: _metadata }, _singleSelection_initializers, _singleSelection_extraInitializers);
    __esDecorate(null, null, _activated_decorators, { kind: "field", name: "activated", static: false, private: false, access: { has: (obj) => "activated" in obj, get: (obj) => obj.activated, set: (obj, value) => {
      obj.activated = value;
    } }, metadata: _metadata }, _activated_initializers, _activated_extraInitializers);
    __esDecorate(null, null, _itemElements_decorators, { kind: "field", name: "itemElements", static: false, private: false, access: { has: (obj) => "itemElements" in obj, get: (obj) => obj.itemElements, set: (obj, value) => {
      obj.itemElements = value;
    } }, metadata: _metadata }, _itemElements_initializers, _itemElements_extraInitializers);
    __esDecorate(null, null, _typeahead_decorators, { kind: "field", name: "typeahead", static: false, private: false, access: { has: (obj) => "typeahead" in obj, get: (obj) => obj.typeahead, set: (obj, value) => {
      obj.typeahead = value;
    } }, metadata: _metadata }, _typeahead_initializers, _typeahead_extraInitializers);
    __esDecorate(null, null, _nonInteractive_decorators, { kind: "field", name: "nonInteractive", static: false, private: false, access: { has: (obj) => "nonInteractive" in obj, get: (obj) => obj.nonInteractive, set: (obj, value) => {
      obj.nonInteractive = value;
    } }, metadata: _metadata }, _nonInteractive_initializers, _nonInteractive_extraInitializers);
    __esDecorate(null, null, _wrapFocus_decorators, { kind: "field", name: "wrapFocus", static: false, private: false, access: { has: (obj) => "wrapFocus" in obj, get: (obj) => obj.wrapFocus, set: (obj, value) => {
      obj.wrapFocus = value;
    } }, metadata: _metadata }, _wrapFocus_initializers, _wrapFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcList2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcList2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-divider/mdc-list-divider.js
var import_dist772 = __toESM(require_dist());
var import_dist773 = __toESM(require_dist2());
var import_dist774 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-divider/mdc-list-divider.html?raw
var mdc_list_divider_default = `<template role="separator" class="
  mdc-list-divider
  \${leadingType ? 'mdc-list-divider--with-leading-inset mdc-list-divider--with-leading-' + leadingType : ''}
  \${trailingType ? 'mdc-list-divider--with-trailing-inset mdc-list-divider--with-trailing-' + trailingType : ''}
  \${padded ? 'mdc-list-divider--with-leading-padding' : ''}
  ">
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-divider/mdc-list-divider.js
var MdcListDivider = (() => {
  let _classDecorators = [customElement({ name: "mdc-list-divider", template: mdc_list_divider_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _padded_decorators;
  let _padded_initializers = [];
  let _padded_extraInitializers = [];
  let _leadingType_decorators;
  let _leadingType_initializers = [];
  let _leadingType_extraInitializers = [];
  let _trailingType_decorators;
  let _trailingType_initializers = [];
  let _trailingType_extraInitializers = [];
  var MdcListDivider2 = _classThis = class {
    constructor() {
      this.padded = __runInitializers(this, _padded_initializers, void 0);
      this.leadingType = (__runInitializers(this, _padded_extraInitializers), __runInitializers(this, _leadingType_initializers, void 0));
      this.trailingType = (__runInitializers(this, _leadingType_extraInitializers), __runInitializers(this, _trailingType_initializers, void 0));
      __runInitializers(this, _trailingType_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcListDivider");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _padded_decorators = [bindable({ set: booleanAttr15 })];
    _leadingType_decorators = [bindable()];
    _trailingType_decorators = [bindable()];
    __esDecorate(null, null, _padded_decorators, { kind: "field", name: "padded", static: false, private: false, access: { has: (obj) => "padded" in obj, get: (obj) => obj.padded, set: (obj, value) => {
      obj.padded = value;
    } }, metadata: _metadata }, _padded_initializers, _padded_extraInitializers);
    __esDecorate(null, null, _leadingType_decorators, { kind: "field", name: "leadingType", static: false, private: false, access: { has: (obj) => "leadingType" in obj, get: (obj) => obj.leadingType, set: (obj, value) => {
      obj.leadingType = value;
    } }, metadata: _metadata }, _leadingType_initializers, _leadingType_extraInitializers);
    __esDecorate(null, null, _trailingType_decorators, { kind: "field", name: "trailingType", static: false, private: false, access: { has: (obj) => "trailingType" in obj, get: (obj) => obj.trailingType, set: (obj, value) => {
      obj.trailingType = value;
    } }, metadata: _metadata }, _trailingType_initializers, _trailingType_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListDivider2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListDivider2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-group.js
var import_dist775 = __toESM(require_dist());
var import_dist776 = __toESM(require_dist2());
var import_dist777 = __toESM(require_dist3());
var MdcListGroup = (() => {
  let _classDecorators = [customElement({
    name: "mdc-list-group",
    template: '<template class="mdc-list-group"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _headers_decorators;
  let _headers_initializers = [];
  let _headers_extraInitializers = [];
  var MdcListGroup2 = _classThis = class {
    headersChanged() {
      this.headers.forEach((x) => x.classList.add("mdc-list-group__subheader"));
    }
    constructor() {
      this.headers = __runInitializers(this, _headers_initializers, void 0);
      __runInitializers(this, _headers_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcListGroup");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _headers_decorators = [slotted({ query: "h1,h2,h3,h4,h5,h6" })];
    __esDecorate(null, null, _headers_decorators, { kind: "field", name: "headers", static: false, private: false, access: { has: (obj) => "headers" in obj, get: (obj) => obj.headers, set: (obj, value) => {
      obj.headers = value;
    } }, metadata: _metadata }, _headers_initializers, _headers_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListGroup2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListGroup2 = _classThis;
})();
var MdcListGroupSubheader = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-list-group-subheader")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListGroupSubheader2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-list-group__subheader");
    }
  };
  __setFunctionName(_classThis, "MdcListGroupSubheader");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListGroupSubheader2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListGroupSubheader2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/mdc-list-item.js
var import_dist778 = __toESM(require_dist());
var import_dist779 = __toESM(require_dist2());
var import_dist780 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/mdc-list-item.html?raw
var mdc_list_item_default = `<template class="
    \${cssClasses.LIST_ITEM_CLASS}
    \${disabled ? 'mdc-list-item--disabled' : ''}
    \${activated ? 'mdc-list-item--activated' : ''}
    \${selected ? 'mdc-list-item--selected' : ''}
    \${nonInteractive ? 'non-interactive' : ''}
    \${twoLine ? 'mdc-list-item--with-two-lines' : (threeLine ? 'mdc-list-item--with-three-lines' : 'mdc-list-item--with-one-line')}
    \${trailingType ? 'mdc-list-item--with-trailing-' + trailingType : ''}
  " id1="mdc-list-item-\${id}" mdc-ripple="disabled.bind: disabled || disableRipple" keydown.trigger="onKeydown($event)"
  click.trigger="onClick()" tabindex="-1">
  <span class="mdc-list-item__ripple"></span>
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/mdc-list-item.js
var ENTER = 13;
var SPACE = 32;
var LIST_ITEM_ACTION = "mdclistitem:action";
var id = 0;
var MdcListItem = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-list-item", template: mdc_list_item_default }), processContent(function processContent2(node) {
    const element = node;
    const leading = element.querySelector("[mdc-list-item-leading]");
    if (leading) {
      element.removeChild(leading);
    }
    const trailing = element.querySelector("[mdc-list-item-trailing]");
    if (trailing) {
      element.removeChild(trailing);
    }
    const content = document.createElement("span");
    content.classList.add("mdc-list-item__content");
    const texts = element.querySelectorAll("mdc-list-item-overline-text, mdc-list-item-primary-text, mdc-list-item-secondary-text, au-slot");
    const children = Array.from(element.childNodes);
    if (!texts.length) {
      const primary = document.createElement("span");
      primary.classList.add("mdc-list-item__primary-text");
      for (let i = 0; i < children.length; ++i) {
        primary.appendChild(children[i]);
      }
      content.appendChild(primary);
    } else {
      for (let i = 0; i < children.length; ++i) {
        content.appendChild(children[i]);
      }
    }
    if (leading) {
      const start = document.createElement("span");
      start.classList.add("mdc-list-item__start");
      start.appendChild(leading);
      element.appendChild(start);
    }
    element.appendChild(content);
    if (trailing) {
      const end = document.createElement("span");
      end.classList.add("mdc-list-item__end");
      end.appendChild(trailing);
      element.appendChild(end);
    }
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _activated_decorators;
  let _activated_initializers = [];
  let _activated_extraInitializers = [];
  let _selected_decorators;
  let _selected_initializers = [];
  let _selected_extraInitializers = [];
  let _nonInteractive_decorators;
  let _nonInteractive_initializers = [];
  let _nonInteractive_extraInitializers = [];
  let _twoLine_decorators;
  let _twoLine_initializers = [];
  let _twoLine_extraInitializers = [];
  let _threeLine_decorators;
  let _threeLine_initializers = [];
  let _threeLine_extraInitializers = [];
  let _value_decorators;
  let _value_initializers = [];
  let _value_extraInitializers = [];
  let _disableRipple_decorators;
  let _disableRipple_initializers = [];
  let _disableRipple_extraInitializers = [];
  var MdcListItem2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.cssClasses = cssClasses;
      this.id = `mdc-list-item-${++id}`;
      this.disabled = __runInitializers(this, _disabled_initializers, void 0);
      this.activated = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _activated_initializers, void 0));
      this.selected = (__runInitializers(this, _activated_extraInitializers), __runInitializers(this, _selected_initializers, void 0));
      this.nonInteractive = (__runInitializers(this, _selected_extraInitializers), __runInitializers(this, _nonInteractive_initializers, void 0));
      this.twoLine = (__runInitializers(this, _nonInteractive_extraInitializers), __runInitializers(this, _twoLine_initializers, void 0));
      this.threeLine = (__runInitializers(this, _twoLine_extraInitializers), __runInitializers(this, _threeLine_initializers, void 0));
      this.value = (__runInitializers(this, _threeLine_extraInitializers), __runInitializers(this, _value_initializers, void 0));
      this.disableRipple = (__runInitializers(this, _value_extraInitializers), __runInitializers(this, _disableRipple_initializers, void 0));
      __runInitializers(this, _disableRipple_extraInitializers);
      this.root = root;
    }
    attached() {
      Array.from(this.root.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS)).forEach((el) => el.setAttribute("tabindex", "-1"));
    }
    onKeydown(evt) {
      if ((evt.keyCode === ENTER || evt.keyCode === SPACE) && !this.disabled) {
        this.root.dispatchEvent(new CustomEvent(LIST_ITEM_ACTION, { detail: { item: this, data: this.value }, bubbles: true }));
      }
      return true;
    }
    onClick() {
      if (!this.disabled) {
        this.root.dispatchEvent(new CustomEvent(LIST_ITEM_ACTION, { detail: { item: this, data: this.value }, bubbles: true }));
      }
      return true;
    }
  };
  __setFunctionName(_classThis, "MdcListItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _disabled_decorators = [bindable({ set: booleanAttr15 })];
    _activated_decorators = [bindable({ set: booleanAttr15 })];
    _selected_decorators = [bindable({ set: booleanAttr15 })];
    _nonInteractive_decorators = [bindable({ set: booleanAttr15 })];
    _twoLine_decorators = [bindable({ set: booleanAttr15 })];
    _threeLine_decorators = [bindable({ set: booleanAttr15 })];
    _value_decorators = [bindable()];
    _disableRipple_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _activated_decorators, { kind: "field", name: "activated", static: false, private: false, access: { has: (obj) => "activated" in obj, get: (obj) => obj.activated, set: (obj, value) => {
      obj.activated = value;
    } }, metadata: _metadata }, _activated_initializers, _activated_extraInitializers);
    __esDecorate(null, null, _selected_decorators, { kind: "field", name: "selected", static: false, private: false, access: { has: (obj) => "selected" in obj, get: (obj) => obj.selected, set: (obj, value) => {
      obj.selected = value;
    } }, metadata: _metadata }, _selected_initializers, _selected_extraInitializers);
    __esDecorate(null, null, _nonInteractive_decorators, { kind: "field", name: "nonInteractive", static: false, private: false, access: { has: (obj) => "nonInteractive" in obj, get: (obj) => obj.nonInteractive, set: (obj, value) => {
      obj.nonInteractive = value;
    } }, metadata: _metadata }, _nonInteractive_initializers, _nonInteractive_extraInitializers);
    __esDecorate(null, null, _twoLine_decorators, { kind: "field", name: "twoLine", static: false, private: false, access: { has: (obj) => "twoLine" in obj, get: (obj) => obj.twoLine, set: (obj, value) => {
      obj.twoLine = value;
    } }, metadata: _metadata }, _twoLine_initializers, _twoLine_extraInitializers);
    __esDecorate(null, null, _threeLine_decorators, { kind: "field", name: "threeLine", static: false, private: false, access: { has: (obj) => "threeLine" in obj, get: (obj) => obj.threeLine, set: (obj, value) => {
      obj.threeLine = value;
    } }, metadata: _metadata }, _threeLine_initializers, _threeLine_extraInitializers);
    __esDecorate(null, null, _value_decorators, { kind: "field", name: "value", static: false, private: false, access: { has: (obj) => "value" in obj, get: (obj) => obj.value, set: (obj, value) => {
      obj.value = value;
    } }, metadata: _metadata }, _value_initializers, _value_extraInitializers);
    __esDecorate(null, null, _disableRipple_decorators, { kind: "field", name: "disableRipple", static: false, private: false, access: { has: (obj) => "disableRipple" in obj, get: (obj) => obj.disableRipple, set: (obj, value) => {
      obj.disableRipple = value;
    } }, metadata: _metadata }, _disableRipple_initializers, _disableRipple_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/mdc-list-item-leading.js
var import_dist781 = __toESM(require_dist());
var import_dist782 = __toESM(require_dist2());
var import_dist783 = __toESM(require_dist3());
var MdcListItemLeading = (() => {
  let _classDecorators = [customAttribute("mdc-list-item-leading"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListItemLeading2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      var _a2, _b;
      let value = this.value;
      if (!value) {
        if (this.root.classList.contains("mdc-checkbox")) {
          value = "checkbox";
        } else if (this.root.classList.contains("mdc-radio")) {
          value = "radio";
        } else if (this.root.classList.contains("mdc-switch")) {
          value = "switch";
        } else if (this.root.classList.contains("material-icons")) {
          value = "icon";
        } else if (this.root.tagName === "IMG") {
          value = "image";
        }
      }
      (_b = (_a2 = this.root.parentElement) == null ? void 0 : _a2.parentElement) == null ? void 0 : _b.classList.add(`mdc-list-item--with-leading-${value}`);
    }
  };
  __setFunctionName(_classThis, "MdcListItemLeading");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItemLeading2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItemLeading2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/mdc-list-item-trailing.js
var import_dist784 = __toESM(require_dist());
var import_dist785 = __toESM(require_dist2());
var import_dist786 = __toESM(require_dist3());
var MdcListItemTrailing = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-list-item-trailing")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListItemTrailing2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      var _a2, _b;
      let value = this.value;
      if (!value) {
        if (this.root.classList.contains("mdc-checkbox")) {
          value = "checkbox";
        } else if (this.root.classList.contains("mdc-radio")) {
          value = "radio";
        } else if (this.root.classList.contains("mdc-switch")) {
          value = "switch";
        } else if (this.root.classList.contains("mdc-icon-button")) {
          value = void 0;
        } else if (this.root.classList.contains("material-icons")) {
          value = "icon";
        }
      }
      if (value !== void 0) {
        (_b = (_a2 = this.root.parentElement) == null ? void 0 : _a2.parentElement) == null ? void 0 : _b.classList.add(`mdc-list-item--with-trailing-${value}`);
      }
    }
  };
  __setFunctionName(_classThis, "MdcListItemTrailing");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItemTrailing2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItemTrailing2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item-primary-text.js
var import_dist787 = __toESM(require_dist());
var import_dist788 = __toESM(require_dist2());
var import_dist789 = __toESM(require_dist3());
var MdcListItemPrimaryText = (() => {
  let _classDecorators = [customElement({
    name: "mdc-list-item-primary-text",
    template: '<template class="mdc-list-item__primary-text"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListItemPrimaryText2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcListItemPrimaryText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItemPrimaryText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItemPrimaryText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item-secondary-text.js
var import_dist790 = __toESM(require_dist());
var import_dist791 = __toESM(require_dist2());
var import_dist792 = __toESM(require_dist3());
var MdcListItemSecondaryText = (() => {
  let _classDecorators = [customElement({
    name: "mdc-list-item-secondary-text",
    template: '<template class="mdc-list-item__secondary-text"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListItemSecondaryText2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcListItemSecondaryText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItemSecondaryText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItemSecondaryText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item-overline-text.js
var import_dist793 = __toESM(require_dist());
var import_dist794 = __toESM(require_dist2());
var import_dist795 = __toESM(require_dist3());
var MdcListItemOverlineText = (() => {
  let _classDecorators = [customElement({ name: "mdc-list-item-overline-text", template: '<template class="mdc-list-item__overline-text"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcListItemOverlineText2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcListItemOverlineText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcListItemOverlineText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcListItemOverlineText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-list-item/enhance-mdc-list-item.js
var import_dist796 = __toESM(require_dist());
var import_dist797 = __toESM(require_dist2());
var import_dist798 = __toESM(require_dist3());
var EnhanceMdcListItem = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcListItem2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-list-item=""', 'as-element="mdc-list-item"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcListItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcListItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcListItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list.js
var import_dist799 = __toESM(require_dist());
var import_dist800 = __toESM(require_dist2());
var import_dist801 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list.html?raw
var mdc_deprecated_list_default = `<template class="
    mdc-deprecated-list
    \${twoLine ? 'mdc-deprecated-list--two-line' : ''}
    \${dense ? 'mdc-deprecated-list--dense' : ''}
    \${textual ? 'mdc-deprecated-list--textual-list' : ''}
    \${avatar ? 'mdc-deprecated-list--avatar-list' : ''}
    \${icon ? 'mdc-deprecated-list--icon-list' : ''}
    \${image ? 'mdc-deprecated-list--image-list' : ''}
    \${thumbnail ? 'mdc-deprecated-list--thumbnail-list' : ''}
    \${video ? 'mdc-deprecated-list--video-list' : ''}
  " keydown.trigger="handleKeydownEvent_($event)" click.trigger="handleClickEvent_($event)"
  focusin.trigger="handleFocusInEvent_($event)" focusout.trigger="handleFocusOutEvent_($event)"
  aria-orientation="\${vertical ? 'vertical' : 'horizontal' }">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list.js
strings.ACTION_EVENT = strings.ACTION_EVENT.toLowerCase();
var mdcListStrings2 = {
  ITEMS_CHANGED: "mdclist:itemschanged"
};
var MdcDeprecatedList = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-deprecated-list", template: mdc_deprecated_list_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent15;
  let _twoLine_decorators;
  let _twoLine_initializers = [];
  let _twoLine_extraInitializers = [];
  let _singleSelection_decorators;
  let _singleSelection_initializers = [];
  let _singleSelection_extraInitializers = [];
  let _activated_decorators;
  let _activated_initializers = [];
  let _activated_extraInitializers = [];
  let _vertical_decorators;
  let _vertical_initializers = [];
  let _vertical_extraInitializers = [];
  let _dense_decorators;
  let _dense_initializers = [];
  let _dense_extraInitializers = [];
  let _textual_decorators;
  let _textual_initializers = [];
  let _textual_extraInitializers = [];
  let _avatar_decorators;
  let _avatar_initializers = [];
  let _avatar_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _image_decorators;
  let _image_initializers = [];
  let _image_extraInitializers = [];
  let _thumbnail_decorators;
  let _thumbnail_initializers = [];
  let _thumbnail_extraInitializers = [];
  let _video_decorators;
  let _video_initializers = [];
  let _video_extraInitializers = [];
  let _itemElements_decorators;
  let _itemElements_initializers = [];
  let _itemElements_extraInitializers = [];
  let _typeahead_decorators;
  let _typeahead_initializers = [];
  let _typeahead_extraInitializers = [];
  let _wrapFocus_decorators;
  let _wrapFocus_initializers = [];
  let _wrapFocus_extraInitializers = [];
  var MdcDeprecatedList2 = _classThis = class extends _classSuper {
    async singleSelectionChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSingleSelection(this.singleSelection);
    }
    async activatedChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setUseActivatedClass(this.activated);
    }
    itemsChanged() {
      this.emit(mdcListStrings2.ITEMS_CHANGED, { items: this.itemElements }, true);
    }
    get items() {
      return (this.itemElements ?? []).map((x) => CustomElement.for(x).viewModel);
    }
    async typeaheadChanged(hasTypeahead) {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setHasTypeahead(hasTypeahead);
    }
    async wrapFocusChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setWrapFocus(this.wrapFocus);
    }
    initialSyncWithDOM() {
      this.layout();
      this.initializeListType();
    }
    get listElements() {
      return Array.from(this.root.querySelectorAll(".mdc-deprecated-list-item"));
    }
    /**
     * Extracts the primary text from a list item.
     * @param item The list item element.
     * @return The primary text in the element.
     */
    getPrimaryText(item) {
      const primaryText = item.querySelector(".mdc-deprecated-list-item__primary-text");
      if (primaryText) {
        return primaryText.textContent ?? "";
      }
      const singleLineText = item.querySelector(".mdc-deprecated-list-item__text");
      return (singleLineText == null ? void 0 : singleLineText.textContent) ?? "";
    }
    getDefaultFoundation() {
      const adapter = {
        addClassForElementIndex: (index, className) => {
          const element = this.listElements[index];
          if (element) {
            element.classList.add(className);
          }
        },
        focusItemAtIndex: (index) => {
          const element = this.listElements[index];
          if (element) {
            element.focus();
          }
        },
        getAttributeForElementIndex: (index, attr) => this.listElements[index].getAttribute(attr),
        getFocusedElementIndex: () => this.listElements.indexOf(document.activeElement),
        getListItemCount: () => this.listElements.length,
        getPrimaryTextAtIndex: (index) => this.getPrimaryText(this.listElements[index]),
        hasCheckboxAtIndex: (index) => {
          const listItem = this.listElements[index];
          return !!listItem.querySelector(strings.CHECKBOX_SELECTOR);
        },
        hasRadioAtIndex: (index) => {
          const listItem = this.listElements[index];
          return !!listItem.querySelector(strings.RADIO_SELECTOR);
        },
        isCheckboxCheckedAtIndex: (index) => {
          const listItem = this.listElements[index];
          const toggleEl = listItem.querySelector(strings.CHECKBOX_SELECTOR);
          return toggleEl.checked;
        },
        isFocusInsideList: () => {
          return this.root !== document.activeElement && this.root.contains(document.activeElement);
        },
        isRootFocused: () => document.activeElement === this.root,
        listItemAtIndexHasClass: (index, className) => this.listElements[index].classList.contains(className),
        notifyAction: (index) => {
          const listItem = this.listElements[index];
          if (!listItem.hasAttribute("no-list-action")) {
            const data = CustomElement.for(listItem).viewModel.value;
            this.emit(
              strings.ACTION_EVENT,
              { index, data },
              /** shouldBubble */
              true
            );
          }
        },
        notifySelectionChange: (changedIndices) => {
          this.emit(
            strings.SELECTION_CHANGE_EVENT,
            { changedIndices },
            /** shouldBubble */
            true
          );
        },
        removeClassForElementIndex: (index, className) => {
          const element = this.listElements[index];
          if (element) {
            element.classList.remove(className);
          }
        },
        setAttributeForElementIndex: (index, attr, value) => {
          const element = this.listElements[index];
          if (element) {
            element.setAttribute(attr, value);
          }
        },
        setCheckedCheckboxOrRadioAtIndex: (index, isChecked) => {
          const listItem = this.listElements[index];
          const toggleEl = listItem.querySelector(strings.CHECKBOX_RADIO_SELECTOR);
          if (toggleEl == null ? void 0 : toggleEl.disabled) {
            return;
          }
          toggleEl.checked = isChecked;
          const event = document.createEvent("Event");
          event.initEvent("change", true, true);
          toggleEl.dispatchEvent(event);
        },
        setTabIndexForListItemChildren: (listItemIndex, tabIndexValue) => {
          const element = this.listElements[listItemIndex];
          const listItemChildren = [].slice.call(element.querySelectorAll(strings.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX));
          listItemChildren.forEach((el) => el.setAttribute("tabindex", tabIndexValue));
        }
      };
      return new MDCListFoundation(adapter);
    }
    /**
     * @hidden
     * Used to figure out which list item this event is targetting. Or returns -1 if
     * there is no list item
     */
    getListItemIndex_(evt) {
      const eventTarget = evt.target;
      const nearestParent = closest(eventTarget, ".mdc-deprecated-list-item, .mdc-deprecated-list");
      if (nearestParent && matches(nearestParent, ".mdc-deprecated-list-item")) {
        return this.listElements.indexOf(nearestParent);
      }
      return -1;
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleFocusInEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleFocusIn(index);
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleFocusOutEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleFocusOut(index);
    }
    /**
     * @hidden
     * Used to figure out which element was focused when keydown event occurred before sending the event to the
     * foundation.
     */
    handleKeydownEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      const target = evt.target;
      if (!target.hasAttribute("not-selectable")) {
        (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt, target.classList.contains("mdc-deprecated-list-item"), index);
      }
      return true;
    }
    /**
     * @hidden
     * Used to figure out which element was clicked before sending the event to the foundation.
     */
    handleClickEvent_(evt) {
      var _a2;
      const index = this.getListItemIndex_(evt);
      const target = evt.target;
      const toggleCheckbox = !matches(target, strings.CHECKBOX_RADIO_SELECTOR);
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick(index, toggleCheckbox);
      return true;
    }
    /**
     * @hidden
     * @return Whether typeahead is currently matching a user-specified prefix.
     */
    get typeaheadInProgress() {
      return this.foundation.isTypeaheadInProgress();
    }
    /**
     * @hidden
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Defaults to
     *     the currently focused index.
     * @return The index of the matched item.
     */
    typeaheadMatchItem(nextChar, startingIndex) {
      return this.foundation.typeaheadMatchItem(
        nextChar,
        startingIndex,
        /** skipFocus */
        true
      );
    }
    layout() {
      var _a2;
      const direction = this.root.getAttribute(strings.ARIA_ORIENTATION);
      this.vertical = direction !== strings.ARIA_ORIENTATION_HORIZONTAL;
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    get selectedIndex() {
      return this.foundation.getSelectedIndex();
    }
    set selectedIndex(index) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelectedIndex(index);
    }
    /**
     * @hidden
     * Initialize selectedIndex value based on pre-selected checkbox list items, single selection or radio.
     */
    initializeListType() {
      const checkboxListItems = this.root.querySelectorAll(strings.ARIA_ROLE_CHECKBOX_SELECTOR);
      const radioSelectedListItem = this.root.querySelector(strings.ARIA_CHECKED_RADIO_SELECTOR);
      if (checkboxListItems.length) {
        const preselectedItems = this.root.querySelectorAll(strings.ARIA_CHECKED_CHECKBOX_SELECTOR);
        this.selectedIndex = [].map.call(preselectedItems, (listItem) => this.listElements.indexOf(listItem));
      } else if (radioSelectedListItem) {
        this.selectedIndex = this.listElements.indexOf(radioSelectedListItem);
      }
    }
    constructor() {
      super(...arguments);
      this.twoLine = __runInitializers(this, _twoLine_initializers, void 0);
      this.singleSelection = (__runInitializers(this, _twoLine_extraInitializers), __runInitializers(this, _singleSelection_initializers, void 0));
      this.activated = (__runInitializers(this, _singleSelection_extraInitializers), __runInitializers(this, _activated_initializers, void 0));
      this.vertical = (__runInitializers(this, _activated_extraInitializers), __runInitializers(this, _vertical_initializers, true));
      this.dense = (__runInitializers(this, _vertical_extraInitializers), __runInitializers(this, _dense_initializers, void 0));
      this.textual = (__runInitializers(this, _dense_extraInitializers), __runInitializers(this, _textual_initializers, void 0));
      this.avatar = (__runInitializers(this, _textual_extraInitializers), __runInitializers(this, _avatar_initializers, void 0));
      this.icon = (__runInitializers(this, _avatar_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.image = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _image_initializers, void 0));
      this.thumbnail = (__runInitializers(this, _image_extraInitializers), __runInitializers(this, _thumbnail_initializers, void 0));
      this.video = (__runInitializers(this, _thumbnail_extraInitializers), __runInitializers(this, _video_initializers, void 0));
      this.itemElements = (__runInitializers(this, _video_extraInitializers), __runInitializers(this, _itemElements_initializers, void 0));
      this.typeahead = (__runInitializers(this, _itemElements_extraInitializers), __runInitializers(this, _typeahead_initializers, void 0));
      this.wrapFocus = (__runInitializers(this, _typeahead_extraInitializers), __runInitializers(this, _wrapFocus_initializers, void 0));
      __runInitializers(this, _wrapFocus_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedList");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _twoLine_decorators = [bindable({ set: booleanAttr15 })];
    _singleSelection_decorators = [bindable({ set: booleanAttr15 })];
    _activated_decorators = [bindable({ set: booleanAttr15 })];
    _vertical_decorators = [bindable({ set: booleanAttr15 })];
    _dense_decorators = [bindable({ set: booleanAttr15 })];
    _textual_decorators = [bindable({ set: booleanAttr15 })];
    _avatar_decorators = [bindable({ set: booleanAttr15 })];
    _icon_decorators = [bindable({ set: booleanAttr15 })];
    _image_decorators = [bindable({ set: booleanAttr15 })];
    _thumbnail_decorators = [bindable({ set: booleanAttr15 })];
    _video_decorators = [bindable({ set: booleanAttr15 })];
    _itemElements_decorators = [slotted({ query: "mdc-deprecated-list-item" })];
    _typeahead_decorators = [bindable({ set: booleanAttr15 })];
    _wrapFocus_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _twoLine_decorators, { kind: "field", name: "twoLine", static: false, private: false, access: { has: (obj) => "twoLine" in obj, get: (obj) => obj.twoLine, set: (obj, value) => {
      obj.twoLine = value;
    } }, metadata: _metadata }, _twoLine_initializers, _twoLine_extraInitializers);
    __esDecorate(null, null, _singleSelection_decorators, { kind: "field", name: "singleSelection", static: false, private: false, access: { has: (obj) => "singleSelection" in obj, get: (obj) => obj.singleSelection, set: (obj, value) => {
      obj.singleSelection = value;
    } }, metadata: _metadata }, _singleSelection_initializers, _singleSelection_extraInitializers);
    __esDecorate(null, null, _activated_decorators, { kind: "field", name: "activated", static: false, private: false, access: { has: (obj) => "activated" in obj, get: (obj) => obj.activated, set: (obj, value) => {
      obj.activated = value;
    } }, metadata: _metadata }, _activated_initializers, _activated_extraInitializers);
    __esDecorate(null, null, _vertical_decorators, { kind: "field", name: "vertical", static: false, private: false, access: { has: (obj) => "vertical" in obj, get: (obj) => obj.vertical, set: (obj, value) => {
      obj.vertical = value;
    } }, metadata: _metadata }, _vertical_initializers, _vertical_extraInitializers);
    __esDecorate(null, null, _dense_decorators, { kind: "field", name: "dense", static: false, private: false, access: { has: (obj) => "dense" in obj, get: (obj) => obj.dense, set: (obj, value) => {
      obj.dense = value;
    } }, metadata: _metadata }, _dense_initializers, _dense_extraInitializers);
    __esDecorate(null, null, _textual_decorators, { kind: "field", name: "textual", static: false, private: false, access: { has: (obj) => "textual" in obj, get: (obj) => obj.textual, set: (obj, value) => {
      obj.textual = value;
    } }, metadata: _metadata }, _textual_initializers, _textual_extraInitializers);
    __esDecorate(null, null, _avatar_decorators, { kind: "field", name: "avatar", static: false, private: false, access: { has: (obj) => "avatar" in obj, get: (obj) => obj.avatar, set: (obj, value) => {
      obj.avatar = value;
    } }, metadata: _metadata }, _avatar_initializers, _avatar_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _image_decorators, { kind: "field", name: "image", static: false, private: false, access: { has: (obj) => "image" in obj, get: (obj) => obj.image, set: (obj, value) => {
      obj.image = value;
    } }, metadata: _metadata }, _image_initializers, _image_extraInitializers);
    __esDecorate(null, null, _thumbnail_decorators, { kind: "field", name: "thumbnail", static: false, private: false, access: { has: (obj) => "thumbnail" in obj, get: (obj) => obj.thumbnail, set: (obj, value) => {
      obj.thumbnail = value;
    } }, metadata: _metadata }, _thumbnail_initializers, _thumbnail_extraInitializers);
    __esDecorate(null, null, _video_decorators, { kind: "field", name: "video", static: false, private: false, access: { has: (obj) => "video" in obj, get: (obj) => obj.video, set: (obj, value) => {
      obj.video = value;
    } }, metadata: _metadata }, _video_initializers, _video_extraInitializers);
    __esDecorate(null, null, _itemElements_decorators, { kind: "field", name: "itemElements", static: false, private: false, access: { has: (obj) => "itemElements" in obj, get: (obj) => obj.itemElements, set: (obj, value) => {
      obj.itemElements = value;
    } }, metadata: _metadata }, _itemElements_initializers, _itemElements_extraInitializers);
    __esDecorate(null, null, _typeahead_decorators, { kind: "field", name: "typeahead", static: false, private: false, access: { has: (obj) => "typeahead" in obj, get: (obj) => obj.typeahead, set: (obj, value) => {
      obj.typeahead = value;
    } }, metadata: _metadata }, _typeahead_initializers, _typeahead_extraInitializers);
    __esDecorate(null, null, _wrapFocus_decorators, { kind: "field", name: "wrapFocus", static: false, private: false, access: { has: (obj) => "wrapFocus" in obj, get: (obj) => obj.wrapFocus, set: (obj, value) => {
      obj.wrapFocus = value;
    } }, metadata: _metadata }, _wrapFocus_initializers, _wrapFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedList2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedList2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/mdc-deprecated-list-item.js
var import_dist802 = __toESM(require_dist());
var import_dist803 = __toESM(require_dist2());
var import_dist804 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/mdc-deprecated-list-item.html?raw
var mdc_deprecated_list_item_default = `<template class="mdc-deprecated-list-item
    \${disabled ? 'mdc-deprecated-list-item--disabled' : ''}
    \${activated ? 'mdc-deprecated-list-item--activated' : ''}
  " mdc-ripple="disabled.bind: disabled || disableRipple"
  keydown.trigger="onKeydown($event)" click.trigger="onClick()" tabindex="-1">
  <div class="mdc-deprecated-list-item__ripple"></div>
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/mdc-deprecated-list-item.js
var ENTER2 = 13;
var SPACE2 = 32;
var LIST_ITEM_ACTION2 = "mdclistitem:action";
var id2 = 0;
var MdcDeprecatedListItem = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-deprecated-list-item", template: mdc_deprecated_list_item_default }), processContent(function processContent2(node) {
    const element = node;
    const graphic = element.querySelector("mdc-checkbox:not([mdc-deprecated-list-item-meta]),[mdc-deprecated-list-item-graphic]");
    if (graphic) {
      element.removeChild(graphic);
    }
    const meta = element.querySelector("[mdc-deprecated-list-item-meta]");
    if (meta) {
      element.removeChild(meta);
    }
    const itemText = document.createElement("span");
    itemText.classList.add("mdc-deprecated-list-item__text");
    const children = [].slice.call(element.childNodes);
    for (let i = 0; i < children.length; ++i) {
      itemText.appendChild(children[i]);
    }
    if (graphic) {
      element.appendChild(graphic);
    }
    element.appendChild(itemText);
    if (meta) {
      element.appendChild(meta);
    }
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _activated_decorators;
  let _activated_initializers = [];
  let _activated_extraInitializers = [];
  let _value_decorators;
  let _value_initializers = [];
  let _value_extraInitializers = [];
  let _disableRipple_decorators;
  let _disableRipple_initializers = [];
  let _disableRipple_extraInitializers = [];
  var MdcDeprecatedListItem2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.cssClasses = cssClasses;
      this.id = `mdc-deprecated-list-item-${++id2}`;
      this.disabled = __runInitializers(this, _disabled_initializers, void 0);
      this.activated = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _activated_initializers, void 0));
      this.value = (__runInitializers(this, _activated_extraInitializers), __runInitializers(this, _value_initializers, void 0));
      this.disableRipple = (__runInitializers(this, _value_extraInitializers), __runInitializers(this, _disableRipple_initializers, void 0));
      __runInitializers(this, _disableRipple_extraInitializers);
      this.root = root;
      this.root.id = `mdc-deprecated-list-item-${this.id}`;
    }
    attached() {
      Array.from(this.root.querySelectorAll(strings.FOCUSABLE_CHILD_ELEMENTS)).forEach((el) => el.setAttribute("tabindex", "-1"));
    }
    onKeydown(evt) {
      if ((evt.keyCode === ENTER2 || evt.keyCode === SPACE2) && !this.disabled) {
        this.root.dispatchEvent(new CustomEvent(LIST_ITEM_ACTION2, { detail: { item: this, data: this.value }, bubbles: true }));
      }
      return true;
    }
    onClick() {
      if (!this.disabled) {
        this.root.dispatchEvent(new CustomEvent(LIST_ITEM_ACTION2, { detail: { item: this, data: this.value }, bubbles: true }));
      }
      return true;
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _disabled_decorators = [bindable({ set: booleanAttr15 })];
    _activated_decorators = [bindable({ set: booleanAttr15 })];
    _value_decorators = [bindable()];
    _disableRipple_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _activated_decorators, { kind: "field", name: "activated", static: false, private: false, access: { has: (obj) => "activated" in obj, get: (obj) => obj.activated, set: (obj, value) => {
      obj.activated = value;
    } }, metadata: _metadata }, _activated_initializers, _activated_extraInitializers);
    __esDecorate(null, null, _value_decorators, { kind: "field", name: "value", static: false, private: false, access: { has: (obj) => "value" in obj, get: (obj) => obj.value, set: (obj, value) => {
      obj.value = value;
    } }, metadata: _metadata }, _value_initializers, _value_extraInitializers);
    __esDecorate(null, null, _disableRipple_decorators, { kind: "field", name: "disableRipple", static: false, private: false, access: { has: (obj) => "disableRipple" in obj, get: (obj) => obj.disableRipple, set: (obj, value) => {
      obj.disableRipple = value;
    } }, metadata: _metadata }, _disableRipple_initializers, _disableRipple_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/enhance-mdc-deprecated-list-item.js
var import_dist805 = __toESM(require_dist());
var import_dist806 = __toESM(require_dist2());
var import_dist807 = __toESM(require_dist3());
var EnhanceMdcDeprecatedListItem = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcDeprecatedListItem2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-deprecated-list-item=""', 'as-element="mdc-deprecated-list-item"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcDeprecatedListItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcDeprecatedListItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcDeprecatedListItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item-primary-text.js
var import_dist808 = __toESM(require_dist());
var import_dist809 = __toESM(require_dist2());
var import_dist810 = __toESM(require_dist3());
var MdcDeprecatedListItemPrimaryText = (() => {
  let _classDecorators = [customElement({
    name: "mdc-deprecated-list-item-primary-text",
    template: '<template class="mdc-deprecated-list-item__primary-text"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDeprecatedListItemPrimaryText2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcDeprecatedListItemPrimaryText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListItemPrimaryText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListItemPrimaryText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item-secondary-text.js
var import_dist811 = __toESM(require_dist());
var import_dist812 = __toESM(require_dist2());
var import_dist813 = __toESM(require_dist3());
var MdcDeprecatedListItemSecondaryText = (() => {
  let _classDecorators = [customElement({
    name: "mdc-deprecated-list-item-secondary-text",
    template: '<template class="mdc-deprecated-list-item__secondary-text"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDeprecatedListItemSecondaryText2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcDeprecatedListItemSecondaryText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListItemSecondaryText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListItemSecondaryText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/mdc-deprecated-list-item-graphic.js
var import_dist814 = __toESM(require_dist());
var import_dist815 = __toESM(require_dist2());
var import_dist816 = __toESM(require_dist3());
var MdcDeprecatedListItemGraphic = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-deprecated-list-item-graphic")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDeprecatedListItemGraphic2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-deprecated-list-item__graphic");
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListItemGraphic");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListItemGraphic2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListItemGraphic2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-item/mdc-deprecated-list-item-meta.js
var import_dist817 = __toESM(require_dist());
var import_dist818 = __toESM(require_dist2());
var import_dist819 = __toESM(require_dist3());
var MdcDeprecatedListItemMeta = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-deprecated-list-item-meta")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDeprecatedListItemMeta2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-deprecated-list-item__meta");
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListItemMeta");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListItemMeta2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListItemMeta2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-group.js
var import_dist820 = __toESM(require_dist());
var import_dist821 = __toESM(require_dist2());
var import_dist822 = __toESM(require_dist3());
var MdcDeprecatedListGroup = (() => {
  let _classDecorators = [customElement({
    name: "mdc-deprecated-list-group",
    template: '<template class="mdc-deprecated-list-group"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _headers_decorators;
  let _headers_initializers = [];
  let _headers_extraInitializers = [];
  var MdcDeprecatedListGroup2 = _classThis = class {
    headersChanged() {
      this.headers.forEach((x) => x.classList.add("mdc-deprecated-list-group__subheader"));
    }
    constructor() {
      this.headers = __runInitializers(this, _headers_initializers, void 0);
      __runInitializers(this, _headers_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListGroup");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _headers_decorators = [slotted({ query: "h1,h2,h3,h4,h5,h6" })];
    __esDecorate(null, null, _headers_decorators, { kind: "field", name: "headers", static: false, private: false, access: { has: (obj) => "headers" in obj, get: (obj) => obj.headers, set: (obj, value) => {
      obj.headers = value;
    } }, metadata: _metadata }, _headers_initializers, _headers_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListGroup2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListGroup2 = _classThis;
})();
var MdcDeprecatedListGroupSubheader = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-deprecated-list-group-subheader")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcDeprecatedListGroupSubheader2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-deprecated-list-group__subheader");
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListGroupSubheader");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListGroupSubheader2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListGroupSubheader2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-divider/mdc-deprecated-list-divider.js
var import_dist823 = __toESM(require_dist());
var import_dist824 = __toESM(require_dist2());
var import_dist825 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-divider/mdc-deprecated-list-divider.html?raw
var mdc_deprecated_list_divider_default = `<template role="separator"
  class="mdc-deprecated-list-divider \${padded ? 'mdc-deprecated-list-divider--padded' : ''} \${inset ? 'mdc-deprecated-list-divider--inset' : ''}">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/list/dist/mdc-deprecated-list/mdc-deprecated-list-divider/mdc-deprecated-list-divider.js
var MdcDeprecatedListDivider = (() => {
  let _classDecorators = [customElement({ name: "mdc-deprecated-list-divider", template: mdc_deprecated_list_divider_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _padded_decorators;
  let _padded_initializers = [];
  let _padded_extraInitializers = [];
  let _inset_decorators;
  let _inset_initializers = [];
  let _inset_extraInitializers = [];
  var MdcDeprecatedListDivider2 = _classThis = class {
    constructor() {
      this.padded = __runInitializers(this, _padded_initializers, void 0);
      this.inset = (__runInitializers(this, _padded_extraInitializers), __runInitializers(this, _inset_initializers, void 0));
      __runInitializers(this, _inset_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcDeprecatedListDivider");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _padded_decorators = [bindable({ set: booleanAttr15 })];
    _inset_decorators = [bindable({ set: booleanAttr15 })];
    __esDecorate(null, null, _padded_decorators, { kind: "field", name: "padded", static: false, private: false, access: { has: (obj) => "padded" in obj, get: (obj) => obj.padded, set: (obj, value) => {
      obj.padded = value;
    } }, metadata: _metadata }, _padded_initializers, _padded_extraInitializers);
    __esDecorate(null, null, _inset_decorators, { kind: "field", name: "inset", static: false, private: false, access: { has: (obj) => "inset" in obj, get: (obj) => obj.inset, set: (obj, value) => {
      obj.inset = value;
    } }, metadata: _metadata }, _inset_initializers, _inset_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcDeprecatedListDivider2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcDeprecatedListDivider2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/list/dist/index.js
var registered14 = false;
var ListConfiguration = {
  register(container) {
    if (registered14) {
      return container;
    } else {
      registered14 = true;
      return container.register(MdcList, MdcListDivider, MdcListGroup, MdcListGroupSubheader, MdcListItem, MdcListItemLeading, MdcListItemTrailing, MdcListItemPrimaryText, MdcListItemSecondaryText, EnhanceMdcListItem, MdcDeprecatedList, MdcDeprecatedListItem, EnhanceMdcDeprecatedListItem, MdcDeprecatedListItemPrimaryText, MdcDeprecatedListItemSecondaryText, MdcDeprecatedListItemGraphic, MdcDeprecatedListItemMeta, MdcDeprecatedListDivider, MdcDeprecatedListGroup, MdcDeprecatedListGroupSubheader);
    }
  }
};

// node_modules/@aurelia-mdc-web/lookup/dist/index.js
var import_dist859 = __toESM(require_dist());
var import_dist860 = __toESM(require_dist2());
var import_dist861 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/dist/mdc-lookup-configuration.js
var import_dist829 = __toESM(require_dist());
var import_dist830 = __toESM(require_dist2());
var import_dist831 = __toESM(require_dist3());
var MdcDefaultLookupConfiguration = class {
  constructor() {
    this.debounce = 850;
    this.searchingMessage = "Searching...";
    this.notFoundMessage = "Not found";
  }
};

// node_modules/@aurelia-mdc-web/lookup/dist/mdc-lookup.js
var import_dist856 = __toESM(require_dist());
var import_dist857 = __toESM(require_dist2());
var import_dist858 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/dist/discardable-promise.js
var import_dist832 = __toESM(require_dist());
var import_dist833 = __toESM(require_dist2());
var import_dist834 = __toESM(require_dist3());
var DiscardablePromise = class _DiscardablePromise {
  constructor(promise) {
    this.promise = promise;
  }
  then(onfulfilled, onrejected) {
    return this.promise.then(async (x) => {
      if (this.isDiscarded) {
        return Promise.reject(_DiscardablePromise.discarded);
      } else {
        return Promise.resolve(x);
      }
    }).then(onfulfilled, onrejected);
  }
  discard() {
    this.isDiscarded = true;
  }
};
DiscardablePromise.discarded = Symbol("discarded");

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist853 = __toESM(require_dist());
var import_dist854 = __toESM(require_dist2());
var import_dist855 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist838 = __toESM(require_dist());
var import_dist839 = __toESM(require_dist2());
var import_dist840 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist835 = __toESM(require_dist());
var import_dist836 = __toESM(require_dist2());
var import_dist837 = __toESM(require_dist3());
function number16(a) {
  return Number(a);
}
function booleanAttr16(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap16 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr16 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr16 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr16 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist841 = __toESM(require_dist());
var import_dist842 = __toESM(require_dist2());
var import_dist843 = __toESM(require_dist3());
var MdcPromisifyReference16 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist844 = __toESM(require_dist());
var import_dist845 = __toESM(require_dist2());
var import_dist846 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist847 = __toESM(require_dist());
var import_dist848 = __toESM(require_dist2());
var import_dist849 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist850 = __toESM(require_dist());
var import_dist851 = __toESM(require_dist2());
var import_dist852 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/lookup/dist/mdc-lookup.html?raw
var mdc_lookup_default = '<template class="mdc-lookup">\n  <mdc-menu component.ref="menu" mdcmenu:selected.trigger="handleMenuItemAction($event)" anchor-corner="BOTTOM_LEFT"\n    anchor.bind="input" hoist-to-body.bind="hoistToBody" class="${menuClass}" select-on-tab.bind="selectOnTab" stay-open\n    mdc-menu-surface.ref="menuSurface" keydown.trigger="handleMenuKeydown($event)">\n    <mdc-list role="menu" wrap-focus>\n\n      <au-slot if.bind="searching" name="searching">\n        <mdc-list-item two-line.bind="twoLine">${defaultConfiguration.searchingMessage}</mdc-list-item>\n      </au-slot>\n\n      <au-slot if.bind="errorMessage" name="error">\n        <mdc-list-item two-line.bind="twoLine">${errorMessage}</mdc-list-item>\n      </au-slot>\n\n      <au-slot if.bind="optionsArray && !optionsArray.length" name="not-found">\n        <mdc-list-item two-line.bind="twoLine">\n          ${defaultConfiguration.notFoundMessage}\n        </mdc-list-item>\n      </au-slot>\n\n      <mdc-list-item role="menuitem" repeat.for="option of optionsArray" value.bind="option" tabindex="-1"\n        two-line.bind="twoLine">\n        <au-slot name="option">${getDisplay(option)}</au-slot>\n      </mdc-list-item>\n    </mdc-list>\n  </mdc-menu>\n</template>\n';

// node_modules/@aurelia-mdc-web/lookup/dist/mdc-lookup.js
var inputEvents = ["click", "input", "keydown", "blur"];
var bodyEvents = ["touchstart", "mousedown", "click"];
var MdcLookup = (() => {
  let _classDecorators = [inject(Element, MdcDefaultLookupConfiguration), customElement({ name: "mdc-lookup", template: mdc_lookup_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _input_decorators;
  let _input_initializers = [];
  let _input_extraInitializers = [];
  let _twoLine_decorators;
  let _twoLine_initializers = [];
  let _twoLine_extraInitializers = [];
  let _displayField_decorators;
  let _displayField_initializers = [];
  let _displayField_extraInitializers = [];
  let _valueField_decorators;
  let _valueField_initializers = [];
  let _valueField_extraInitializers = [];
  let _options_decorators;
  let _options_initializers = [];
  let _options_extraInitializers = [];
  let _hoistToBody_decorators;
  let _hoistToBody_initializers = [];
  let _hoistToBody_extraInitializers = [];
  let _naturalWidth_decorators;
  let _naturalWidth_initializers = [];
  let _naturalWidth_extraInitializers = [];
  let _menuClass_decorators;
  let _menuClass_initializers = [];
  let _menuClass_extraInitializers = [];
  let _value_decorators;
  let _value_initializers = [];
  let _value_extraInitializers = [];
  let _debounce_decorators;
  let _debounce_initializers = [];
  let _debounce_extraInitializers = [];
  let _preloadOptions_decorators;
  let _preloadOptions_initializers = [];
  let _preloadOptions_extraInitializers = [];
  let _selectOnBlur_decorators;
  let _selectOnBlur_initializers = [];
  let _selectOnBlur_extraInitializers = [];
  let _selectOnTab_decorators;
  let _selectOnTab_initializers = [];
  let _selectOnTab_extraInitializers = [];
  let _virtual_decorators;
  let _virtual_initializers = [];
  let _virtual_extraInitializers = [];
  var MdcLookup2 = _classThis = class {
    constructor(root, defaultConfiguration) {
      this.root = root;
      this.defaultConfiguration = defaultConfiguration;
      this.isWrapperOpen = false;
      this.focusedOption = void 0;
      this.searching = false;
      this.errorMessage = void 0;
      this.notFound = false;
      this.input = __runInitializers(this, _input_initializers, void 0);
      this.twoLine = (__runInitializers(this, _input_extraInitializers), __runInitializers(this, _twoLine_initializers, void 0));
      this.displayField = (__runInitializers(this, _twoLine_extraInitializers), __runInitializers(this, _displayField_initializers, void 0));
      this.getDisplay = (__runInitializers(this, _displayField_extraInitializers), (option) => (option == null ? void 0 : option.toString()) ?? "");
      this.valueField = __runInitializers(this, _valueField_initializers, void 0);
      this.getValue = (__runInitializers(this, _valueField_extraInitializers), (option) => option);
      this.options = __runInitializers(this, _options_initializers, void 0);
      this.hoistToBody = (__runInitializers(this, _options_extraInitializers), __runInitializers(this, _hoistToBody_initializers, void 0));
      this.naturalWidth = (__runInitializers(this, _hoistToBody_extraInitializers), __runInitializers(this, _naturalWidth_initializers, void 0));
      this.menuClass = (__runInitializers(this, _naturalWidth_extraInitializers), __runInitializers(this, _menuClass_initializers, void 0));
      this.getOptions = __runInitializers(this, _menuClass_extraInitializers);
      this.value = __runInitializers(this, _value_initializers, void 0);
      this.suppressValueChanged = __runInitializers(this, _value_extraInitializers);
      this.debounce = __runInitializers(this, _debounce_initializers, this.defaultConfiguration.debounce);
      this.preloadOptions = (__runInitializers(this, _debounce_extraInitializers), __runInitializers(this, _preloadOptions_initializers, void 0));
      this.selectOnBlur = (__runInitializers(this, _preloadOptions_extraInitializers), __runInitializers(this, _selectOnBlur_initializers, void 0));
      this.selectOnTab = (__runInitializers(this, _selectOnBlur_extraInitializers), __runInitializers(this, _selectOnTab_initializers, void 0));
      this.virtual = (__runInitializers(this, _selectOnTab_extraInitializers), __runInitializers(this, _virtual_initializers, void 0));
      this.debouncePromise = __runInitializers(this, _virtual_extraInitializers);
      defineMdcLookupElementApis(this.root);
    }
    displayFieldChanged() {
      if (this.displayField instanceof Function) {
        this.getDisplay = this.displayField;
      } else if (typeof this.displayField === "string") {
        this.getDisplay = (option) => option[this.displayField];
      } else {
        this.getDisplay = (option) => (option == null ? void 0 : option.toString()) ?? "";
      }
    }
    valueFieldChanged() {
      if (this.valueField instanceof Function) {
        this.getValue = this.valueField;
      } else if (typeof this.valueField === "string") {
        this.getValue = (option) => option !== void 0 ? option[this.valueField] : void 0;
      } else {
        this.getValue = (option) => option;
      }
    }
    optionsChanged() {
      const shouldRefresh = this.getOptions !== void 0;
      this.setGetOptions();
      if (shouldRefresh) {
        this.optionsArray = void 0;
        this.value = void 0;
        if (this.preloadOptions) {
          this.loadOptions(false);
        }
      }
    }
    setGetOptions() {
      if (this.options instanceof Function) {
        this.getOptions = this.options;
      } else {
        this.getOptions = this.getOptionsDefault;
      }
    }
    async getOptionsDefault(filter, value) {
      const options = this.options;
      if (value !== void 0) {
        return Promise.resolve([options.find((x) => this.getValue(x) === value)]);
      } else {
        return Promise.resolve(options.filter((x) => this.getDisplay(x).toUpperCase().includes((filter || "").toUpperCase())));
      }
    }
    async valueChanged() {
      if (this.suppressValueChanged) {
        this.suppressValueChanged = false;
        return;
      }
      await this.updateFilterBasedOnValue();
      this.root.dispatchEvent(new CustomEvent("change", { bubbles: true, detail: { value: this.value } }));
    }
    setValue(value) {
      if (this.value === value) {
        return;
      }
      this.suppressValueChanged = true;
      this.value = value;
    }
    bound() {
      this.valueFieldChanged();
      this.displayFieldChanged();
      this.setGetOptions();
    }
    async attached() {
      if (this.input) {
        inputEvents.forEach((x) => this.input.addEventListener(x, this));
      }
      await this.updateFilterBasedOnValue();
      if (!this.value && this.preloadOptions) {
        await this.loadOptions(false);
      }
      bodyEvents.forEach((x) => document.body.addEventListener(x, this));
    }
    detaching() {
      if (this.input) {
        inputEvents.forEach((x) => this.input.removeEventListener(x, this));
      }
      bodyEvents.forEach((x) => document.body.removeEventListener(x, this));
    }
    /** Opens lookup menu */
    open() {
      var _a2, _b, _c;
      if (((_a2 = this.input) == null ? void 0 : _a2.disabled) || ((_b = this.input) == null ? void 0 : _b.readOnly) || this.menu.open || this.optionsArray === void 0 && !this.searching && !this.errorMessage) {
        return;
      }
      if (!this.naturalWidth) {
        this.menu.root.style.width = `${(_c = this.input) == null ? void 0 : _c.clientWidth}px`;
      }
      this.menu.open = true;
    }
    /** Closes lookup menu */
    close() {
      this.menu.open = false;
    }
    handleEvent(evt) {
      switch (evt.currentTarget) {
        case this.input:
          switch (evt.type) {
            case "click":
              this.open();
              break;
            case "input":
              this.filterChanged();
              break;
            case "keydown":
              this.onInputKeydown(evt);
              break;
            case "blur":
              this.onBlur();
              break;
          }
          break;
        case document.body:
          switch (evt.type) {
            case "mousedown":
              this.onBodyMousedown(evt);
              break;
            case "touchstart":
              this.onBodyMousedown(evt);
              break;
            case "click":
              this.handleBodyClick(evt);
              break;
          }
          break;
      }
    }
    async filterChanged() {
      var _a2, _b, _c;
      (_a2 = this.debouncePromise) == null ? void 0 : _a2.discard();
      this.debouncePromise = new DiscardablePromise(new Promise((r) => setTimeout(() => r(), this.debounce ?? 0)));
      try {
        await this.debouncePromise;
      } catch (e) {
        return;
      }
      this.setValue(void 0);
      (_b = this.searchPromise) == null ? void 0 : _b.discard();
      await this.loadOptions(((_c = this.input) == null ? void 0 : _c.isFocused) === true);
    }
    async loadOptions(open) {
      var _a2;
      this.searching = true;
      this.errorMessage = void 0;
      if (open) {
        this.open();
      }
      this.optionsArray = void 0;
      try {
        this.searchPromise = new DiscardablePromise(this.getOptions((_a2 = this.input) == null ? void 0 : _a2.value, void 0));
        this.optionsArray = await this.searchPromise;
        if (this.optionsArray === void 0) {
          this.close();
        }
      } catch (e) {
        if (e !== DiscardablePromise.discarded) {
          this.errorMessage = e.message;
          this.optionsArray = void 0;
        }
      } finally {
        this.searching = false;
      }
    }
    setFilter(filter) {
      if (!this.input || this.input.value === filter) {
        return;
      }
      this.input.value = filter ?? "";
    }
    async updateFilterBasedOnValue() {
      var _a2;
      if (this.value !== void 0) {
        this.optionsArray = await this.getOptions(void 0, this.value);
      } else {
        this.optionsArray = void 0;
      }
      if ((_a2 = this.optionsArray) == null ? void 0 : _a2.length) {
        this.setFilter(this.getDisplay(this.optionsArray[0]));
      } else {
        this.setFilter(void 0);
      }
    }
    handleMenuItemAction(evt) {
      this.select(evt.detail.data);
    }
    select(option) {
      var _a2;
      this.value = this.getValue(option);
      this.close();
      (_a2 = this.input) == null ? void 0 : _a2.focus();
    }
    async onBlur() {
      var _a2;
      if (this.suppressBlur) {
        this.suppressBlur = false;
        return;
      }
      if (this.selectOnBlur && ((_a2 = this.optionsArray) == null ? void 0 : _a2.length) && this.value === void 0) {
        this.value = this.getValue(this.optionsArray[0]);
      }
      this.close();
      if (this.debouncePromise !== void 0) {
        await this.debouncePromise;
      }
      this.root.dispatchEvent(new CustomEvent("blur"));
      this.root.dispatchEvent(new CustomEvent("focusout"));
    }
    onInputKeydown(evt) {
      var _a2, _b, _c, _d;
      switch (evt.code) {
        case "ArrowDown":
          if (!this.menu.open) {
            this.open();
          }
          this.suppressBlur = true;
          (_b = (_a2 = this.menu.list_) == null ? void 0 : _a2.foundation) == null ? void 0 : _b.focusFirstElement();
          break;
        case "ArrowUp":
          if (!this.menu.open) {
            this.open();
          }
          this.suppressBlur = true;
          (_d = (_c = this.menu.list_) == null ? void 0 : _c.foundation) == null ? void 0 : _d.focusLastElement();
          break;
        case "Space":
          if (evt.ctrlKey) {
            if (this.menu.open) {
              this.close();
            } else {
              this.loadOptions(true);
            }
          }
          break;
      }
    }
    onBodyMousedown(evt) {
      if (closest(evt.target, "mdc-menu")) {
        evt.preventDefault();
      }
      return true;
    }
    handleBodyClick(evt) {
      var _a2;
      if (!closest(evt.target, "mdc-menu") && !evt.target.classList.contains("mdc-text-field") && !evt.target.classList.contains("mdc-text-field__input")) {
        (_a2 = this.menuSurface.foundation) == null ? void 0 : _a2.handleBodyClick(evt);
      }
    }
    handleMenuKeydown(event) {
      var _a2;
      if (this.hoistToBody && (event.key === "Tab" || event.keyCode === 9)) {
        (_a2 = this.input) == null ? void 0 : _a2.focus();
      }
      return true;
    }
    addError(error) {
      if (this.input && Object.getOwnPropertyDescriptor(this.input, "addError")) {
        this.input.addError(error);
      }
    }
    removeError(error) {
      if (this.input && Object.getOwnPropertyDescriptor(this.input, "addError")) {
        this.input.removeError(error);
      }
    }
    renderErrors() {
      if (this.input && Object.getOwnPropertyDescriptor(this.input, "renderErrors")) {
        this.input.renderErrors();
      }
    }
  };
  __setFunctionName(_classThis, "MdcLookup");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _input_decorators = [bindable()];
    _twoLine_decorators = [bindable({ set: booleanAttr16 })];
    _displayField_decorators = [bindable()];
    _valueField_decorators = [bindable()];
    _options_decorators = [bindable()];
    _hoistToBody_decorators = [bindable({ set: booleanAttr16, mode: BindingMode.oneTime })];
    _naturalWidth_decorators = [bindable({ set: booleanAttr16 })];
    _menuClass_decorators = [bindable()];
    _value_decorators = [bindable({ mode: BindingMode.twoWay })];
    _debounce_decorators = [bindable({ set: number16 })];
    _preloadOptions_decorators = [bindable({ set: booleanAttr16 })];
    _selectOnBlur_decorators = [bindable({ set: booleanAttr16 })];
    _selectOnTab_decorators = [bindable({ set: booleanAttr16 })];
    _virtual_decorators = [bindable({ set: booleanAttr16 })];
    __esDecorate(null, null, _input_decorators, { kind: "field", name: "input", static: false, private: false, access: { has: (obj) => "input" in obj, get: (obj) => obj.input, set: (obj, value) => {
      obj.input = value;
    } }, metadata: _metadata }, _input_initializers, _input_extraInitializers);
    __esDecorate(null, null, _twoLine_decorators, { kind: "field", name: "twoLine", static: false, private: false, access: { has: (obj) => "twoLine" in obj, get: (obj) => obj.twoLine, set: (obj, value) => {
      obj.twoLine = value;
    } }, metadata: _metadata }, _twoLine_initializers, _twoLine_extraInitializers);
    __esDecorate(null, null, _displayField_decorators, { kind: "field", name: "displayField", static: false, private: false, access: { has: (obj) => "displayField" in obj, get: (obj) => obj.displayField, set: (obj, value) => {
      obj.displayField = value;
    } }, metadata: _metadata }, _displayField_initializers, _displayField_extraInitializers);
    __esDecorate(null, null, _valueField_decorators, { kind: "field", name: "valueField", static: false, private: false, access: { has: (obj) => "valueField" in obj, get: (obj) => obj.valueField, set: (obj, value) => {
      obj.valueField = value;
    } }, metadata: _metadata }, _valueField_initializers, _valueField_extraInitializers);
    __esDecorate(null, null, _options_decorators, { kind: "field", name: "options", static: false, private: false, access: { has: (obj) => "options" in obj, get: (obj) => obj.options, set: (obj, value) => {
      obj.options = value;
    } }, metadata: _metadata }, _options_initializers, _options_extraInitializers);
    __esDecorate(null, null, _hoistToBody_decorators, { kind: "field", name: "hoistToBody", static: false, private: false, access: { has: (obj) => "hoistToBody" in obj, get: (obj) => obj.hoistToBody, set: (obj, value) => {
      obj.hoistToBody = value;
    } }, metadata: _metadata }, _hoistToBody_initializers, _hoistToBody_extraInitializers);
    __esDecorate(null, null, _naturalWidth_decorators, { kind: "field", name: "naturalWidth", static: false, private: false, access: { has: (obj) => "naturalWidth" in obj, get: (obj) => obj.naturalWidth, set: (obj, value) => {
      obj.naturalWidth = value;
    } }, metadata: _metadata }, _naturalWidth_initializers, _naturalWidth_extraInitializers);
    __esDecorate(null, null, _menuClass_decorators, { kind: "field", name: "menuClass", static: false, private: false, access: { has: (obj) => "menuClass" in obj, get: (obj) => obj.menuClass, set: (obj, value) => {
      obj.menuClass = value;
    } }, metadata: _metadata }, _menuClass_initializers, _menuClass_extraInitializers);
    __esDecorate(null, null, _value_decorators, { kind: "field", name: "value", static: false, private: false, access: { has: (obj) => "value" in obj, get: (obj) => obj.value, set: (obj, value) => {
      obj.value = value;
    } }, metadata: _metadata }, _value_initializers, _value_extraInitializers);
    __esDecorate(null, null, _debounce_decorators, { kind: "field", name: "debounce", static: false, private: false, access: { has: (obj) => "debounce" in obj, get: (obj) => obj.debounce, set: (obj, value) => {
      obj.debounce = value;
    } }, metadata: _metadata }, _debounce_initializers, _debounce_extraInitializers);
    __esDecorate(null, null, _preloadOptions_decorators, { kind: "field", name: "preloadOptions", static: false, private: false, access: { has: (obj) => "preloadOptions" in obj, get: (obj) => obj.preloadOptions, set: (obj, value) => {
      obj.preloadOptions = value;
    } }, metadata: _metadata }, _preloadOptions_initializers, _preloadOptions_extraInitializers);
    __esDecorate(null, null, _selectOnBlur_decorators, { kind: "field", name: "selectOnBlur", static: false, private: false, access: { has: (obj) => "selectOnBlur" in obj, get: (obj) => obj.selectOnBlur, set: (obj, value) => {
      obj.selectOnBlur = value;
    } }, metadata: _metadata }, _selectOnBlur_initializers, _selectOnBlur_extraInitializers);
    __esDecorate(null, null, _selectOnTab_decorators, { kind: "field", name: "selectOnTab", static: false, private: false, access: { has: (obj) => "selectOnTab" in obj, get: (obj) => obj.selectOnTab, set: (obj, value) => {
      obj.selectOnTab = value;
    } }, metadata: _metadata }, _selectOnTab_initializers, _selectOnTab_extraInitializers);
    __esDecorate(null, null, _virtual_decorators, { kind: "field", name: "virtual", static: false, private: false, access: { has: (obj) => "virtual" in obj, get: (obj) => obj.virtual, set: (obj, value) => {
      obj.virtual = value;
    } }, metadata: _metadata }, _virtual_initializers, _virtual_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLookup2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLookup2 = _classThis;
})();
function defineMdcLookupElementApis(element) {
  Object.defineProperties(element, {
    addError: {
      value(error) {
        CustomElement.for(this).viewModel.addError(error);
      },
      configurable: true
    },
    removeError: {
      value(error) {
        CustomElement.for(this).viewModel.removeError(error);
      },
      configurable: true
    },
    renderErrors: {
      value() {
        CustomElement.for(this).viewModel.renderErrors();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/lookup/dist/index.js
var registered15 = false;
var LookupConfiguration = {
  register(container) {
    if (registered15) {
      return container;
    } else {
      registered15 = true;
      return container.register(MdcLookup);
    }
  },
  customize(optionsProvider) {
    return {
      register(container) {
        const options = container.get(MdcDefaultLookupConfiguration);
        optionsProvider(options);
        return LookupConfiguration.register(container);
      }
    };
  }
};

// node_modules/@aurelia-mdc-web/notched-outline/dist/index.js
var import_dist901 = __toESM(require_dist());
var import_dist902 = __toESM(require_dist2());
var import_dist903 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/notched-outline/dist/mdc-notched-outline.js
var import_dist898 = __toESM(require_dist());
var import_dist899 = __toESM(require_dist2());
var import_dist900 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist880 = __toESM(require_dist());
var import_dist881 = __toESM(require_dist2());
var import_dist882 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist865 = __toESM(require_dist());
var import_dist866 = __toESM(require_dist2());
var import_dist867 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist862 = __toESM(require_dist());
var import_dist863 = __toESM(require_dist2());
var import_dist864 = __toESM(require_dist3());
function booleanAttr17(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap17 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr17 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr17 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr17 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist868 = __toESM(require_dist());
var import_dist869 = __toESM(require_dist2());
var import_dist870 = __toESM(require_dist3());
var MdcPromisifyReference17 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist871 = __toESM(require_dist());
var import_dist872 = __toESM(require_dist2());
var import_dist873 = __toESM(require_dist3());
var MdcComponent17 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist874 = __toESM(require_dist());
var import_dist875 = __toESM(require_dist2());
var import_dist876 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/notched-outline/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist877 = __toESM(require_dist());
var import_dist878 = __toESM(require_dist2());
var import_dist879 = __toESM(require_dist3());

// node_modules/@material/notched-outline/index.js
var import_dist895 = __toESM(require_dist());
var import_dist896 = __toESM(require_dist2());
var import_dist897 = __toESM(require_dist3());

// node_modules/@material/notched-outline/adapter.js
var import_dist883 = __toESM(require_dist());
var import_dist884 = __toESM(require_dist2());
var import_dist885 = __toESM(require_dist3());

// node_modules/@material/notched-outline/component.js
var import_dist892 = __toESM(require_dist());
var import_dist893 = __toESM(require_dist2());
var import_dist894 = __toESM(require_dist3());

// node_modules/@material/notched-outline/constants.js
var import_dist886 = __toESM(require_dist());
var import_dist887 = __toESM(require_dist2());
var import_dist888 = __toESM(require_dist3());
var strings16 = {
  NOTCH_ELEMENT_SELECTOR: ".mdc-notched-outline__notch"
};
var numbers5 = {
  // This should stay in sync with $mdc-notched-outline-padding * 2.
  NOTCH_ELEMENT_PADDING: 8
};
var cssClasses16 = {
  NO_LABEL: "mdc-notched-outline--no-label",
  OUTLINE_NOTCHED: "mdc-notched-outline--notched",
  OUTLINE_UPGRADED: "mdc-notched-outline--upgraded"
};

// node_modules/@material/notched-outline/foundation.js
var import_dist889 = __toESM(require_dist());
var import_dist890 = __toESM(require_dist2());
var import_dist891 = __toESM(require_dist3());
var MDCNotchedOutlineFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCNotchedOutlineFoundation2, _super);
    function MDCNotchedOutlineFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCNotchedOutlineFoundation2, "strings", {
      get: function() {
        return strings16;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation2, "cssClasses", {
      get: function() {
        return cssClasses16;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation2, "numbers", {
      get: function() {
        return numbers5;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCNotchedOutlineFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setNotchWidthProperty: function() {
            return void 0;
          },
          removeNotchWidthProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCNotchedOutlineFoundation2.prototype.notch = function(notchWidth) {
      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
      if (notchWidth > 0) {
        notchWidth += numbers5.NOTCH_ELEMENT_PADDING;
      }
      this.adapter.setNotchWidthProperty(notchWidth);
      this.adapter.addClass(OUTLINE_NOTCHED);
    };
    MDCNotchedOutlineFoundation2.prototype.closeNotch = function() {
      var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation2.cssClasses.OUTLINE_NOTCHED;
      this.adapter.removeClass(OUTLINE_NOTCHED);
      this.adapter.removeNotchWidthProperty();
    };
    return MDCNotchedOutlineFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/notched-outline/component.js
var MDCNotchedOutline = (
  /** @class */
  function(_super) {
    __extends(MDCNotchedOutline2, _super);
    function MDCNotchedOutline2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCNotchedOutline2.attachTo = function(root) {
      return new MDCNotchedOutline2(root);
    };
    MDCNotchedOutline2.prototype.initialSyncWithDOM = function() {
      this.notchElement = this.root.querySelector(strings16.NOTCH_ELEMENT_SELECTOR);
      var label = this.root.querySelector("." + MDCFloatingLabelFoundation.cssClasses.ROOT);
      if (label) {
        label.style.transitionDuration = "0s";
        this.root.classList.add(cssClasses16.OUTLINE_UPGRADED);
        requestAnimationFrame(function() {
          label.style.transitionDuration = "";
        });
      } else {
        this.root.classList.add(cssClasses16.NO_LABEL);
      }
    };
    MDCNotchedOutline2.prototype.notch = function(notchWidth) {
      this.foundation.notch(notchWidth);
    };
    MDCNotchedOutline2.prototype.closeNotch = function() {
      this.foundation.closeNotch();
    };
    MDCNotchedOutline2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        setNotchWidthProperty: function(width) {
          _this.notchElement.style.setProperty("width", width + "px");
        },
        removeNotchWidthProperty: function() {
          _this.notchElement.style.removeProperty("width");
        }
      };
      return new MDCNotchedOutlineFoundation(adapter);
    };
    return MDCNotchedOutline2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/notched-outline/dist/mdc-notched-outline.html?raw
var mdc_notched_outline_default = `<template class="mdc-notched-outline \${label ? '' : 'mdc-notched-outline--no-label'}">
  <span class="mdc-notched-outline__leading"></span>
  <span class="mdc-notched-outline__notch" ref="notchElement_">
    <au-slot></au-slot>
  </span>
  <span class="mdc-notched-outline__trailing"></span>
</template>
`;

// node_modules/@aurelia-mdc-web/notched-outline/dist/mdc-notched-outline.js
var MdcNotchedOutline = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-notched-outline", template: mdc_notched_outline_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent17;
  let _labels_decorators;
  let _labels_initializers = [];
  let _labels_extraInitializers = [];
  var MdcNotchedOutline2 = _classThis = class extends _classSuper {
    labelsChanged() {
      if (this.labels.length) {
        this.label = this.labels[0];
        this.label.style.transitionDuration = "0s";
        this.root.classList.add(cssClasses16.OUTLINE_UPGRADED);
        requestAnimationFrame(() => {
          this.label.style.transitionDuration = "";
        });
      } else {
        this.label = void 0;
      }
    }
    initialSyncWithDOM() {
      this.labelsChanged();
    }
    /**
     * Updates classes and styles to open the notch to the specified width.
     * @param notchWidth The notch width in the outline.
     */
    notch(notchWidth) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.notch(notchWidth);
    }
    /**
     * Updates classes and styles to close the notch.
     */
    closeNotch() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.closeNotch();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        setNotchWidthProperty: (width) => this.notchElement_.style.setProperty("width", `${width}px`),
        removeNotchWidthProperty: () => this.notchElement_.style.removeProperty("width")
      };
      return new MDCNotchedOutlineFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.labels = __runInitializers(this, _labels_initializers, void 0);
      __runInitializers(this, _labels_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcNotchedOutline");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _labels_decorators = [slotted({ query: `.${MDCFloatingLabelFoundation.cssClasses.ROOT}` })];
    __esDecorate(null, null, _labels_decorators, { kind: "field", name: "labels", static: false, private: false, access: { has: (obj) => "labels" in obj, get: (obj) => obj.labels, set: (obj, value) => {
      obj.labels = value;
    } }, metadata: _metadata }, _labels_initializers, _labels_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcNotchedOutline2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcNotchedOutline2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/notched-outline/dist/index.js
var registered16 = false;
var NotchedOutlineConfiguration = {
  register(container) {
    if (registered16) {
      return container;
    } else {
      registered16 = true;
      return container.register(MdcNotchedOutline);
    }
  }
};

// node_modules/@aurelia-mdc-web/radio/dist/index.js
var import_dist943 = __toESM(require_dist());
var import_dist944 = __toESM(require_dist2());
var import_dist945 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/radio/dist/mdc-radio.js
var import_dist940 = __toESM(require_dist());
var import_dist941 = __toESM(require_dist2());
var import_dist942 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist922 = __toESM(require_dist());
var import_dist923 = __toESM(require_dist2());
var import_dist924 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist907 = __toESM(require_dist());
var import_dist908 = __toESM(require_dist2());
var import_dist909 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist904 = __toESM(require_dist());
var import_dist905 = __toESM(require_dist2());
var import_dist906 = __toESM(require_dist3());
function booleanAttr18(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap18 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr18 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr18 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr18 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist910 = __toESM(require_dist());
var import_dist911 = __toESM(require_dist2());
var import_dist912 = __toESM(require_dist3());
var MdcPromisifyReference18 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist913 = __toESM(require_dist());
var import_dist914 = __toESM(require_dist2());
var import_dist915 = __toESM(require_dist3());
var MdcComponent18 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist916 = __toESM(require_dist());
var import_dist917 = __toESM(require_dist2());
var import_dist918 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/radio/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist919 = __toESM(require_dist());
var import_dist920 = __toESM(require_dist2());
var import_dist921 = __toESM(require_dist3());

// node_modules/@material/radio/index.js
var import_dist937 = __toESM(require_dist());
var import_dist938 = __toESM(require_dist2());
var import_dist939 = __toESM(require_dist3());

// node_modules/@material/radio/adapter.js
var import_dist925 = __toESM(require_dist());
var import_dist926 = __toESM(require_dist2());
var import_dist927 = __toESM(require_dist3());

// node_modules/@material/radio/component.js
var import_dist934 = __toESM(require_dist());
var import_dist935 = __toESM(require_dist2());
var import_dist936 = __toESM(require_dist3());

// node_modules/@material/radio/foundation.js
var import_dist931 = __toESM(require_dist());
var import_dist932 = __toESM(require_dist2());
var import_dist933 = __toESM(require_dist3());

// node_modules/@material/radio/constants.js
var import_dist928 = __toESM(require_dist());
var import_dist929 = __toESM(require_dist2());
var import_dist930 = __toESM(require_dist3());
var strings17 = {
  NATIVE_CONTROL_SELECTOR: ".mdc-radio__native-control"
};
var cssClasses17 = {
  DISABLED: "mdc-radio--disabled",
  ROOT: "mdc-radio"
};

// node_modules/@material/radio/foundation.js
var MDCRadioFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCRadioFoundation2, _super);
    function MDCRadioFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCRadioFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCRadioFoundation2, "cssClasses", {
      get: function() {
        return cssClasses17;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation2, "strings", {
      get: function() {
        return strings17;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadioFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setNativeControlDisabled: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCRadioFoundation2.prototype.setDisabled = function(disabled) {
      var DISABLED = MDCRadioFoundation2.cssClasses.DISABLED;
      this.adapter.setNativeControlDisabled(disabled);
      if (disabled) {
        this.adapter.addClass(DISABLED);
      } else {
        this.adapter.removeClass(DISABLED);
      }
    };
    return MDCRadioFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/radio/component.js
var MDCRadio = (
  /** @class */
  function(_super) {
    __extends(MDCRadio2, _super);
    function MDCRadio2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rippleSurface = _this.createRipple();
      return _this;
    }
    MDCRadio2.attachTo = function(root) {
      return new MDCRadio2(root);
    };
    Object.defineProperty(MDCRadio2.prototype, "checked", {
      get: function() {
        return this.nativeControl.checked;
      },
      set: function(checked) {
        this.nativeControl.checked = checked;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadio2.prototype, "disabled", {
      get: function() {
        return this.nativeControl.disabled;
      },
      set: function(disabled) {
        this.foundation.setDisabled(disabled);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadio2.prototype, "value", {
      get: function() {
        return this.nativeControl.value;
      },
      set: function(value) {
        this.nativeControl.value = value;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCRadio2.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    MDCRadio2.prototype.destroy = function() {
      this.rippleSurface.destroy();
      _super.prototype.destroy.call(this);
    };
    MDCRadio2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        setNativeControlDisabled: function(disabled) {
          return _this.nativeControl.disabled = disabled;
        }
      };
      return new MDCRadioFoundation(adapter);
    };
    MDCRadio2.prototype.createRipple = function() {
      var _this = this;
      var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), {
        registerInteractionHandler: function(evtType, handler) {
          _this.nativeControl.addEventListener(evtType, handler, applyPassive());
        },
        deregisterInteractionHandler: function(evtType, handler) {
          _this.nativeControl.removeEventListener(evtType, handler, applyPassive());
        },
        // Radio buttons technically go "active" whenever there is *any* keyboard
        // interaction. This is not the UI we desire.
        isSurfaceActive: function() {
          return false;
        },
        isUnbounded: function() {
          return true;
        }
      });
      return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
    };
    Object.defineProperty(MDCRadio2.prototype, "nativeControl", {
      get: function() {
        var NATIVE_CONTROL_SELECTOR = MDCRadioFoundation.strings.NATIVE_CONTROL_SELECTOR;
        var el = this.root.querySelector(NATIVE_CONTROL_SELECTOR);
        if (!el) {
          throw new Error("Radio component requires a " + NATIVE_CONTROL_SELECTOR + " element");
        }
        return el;
      },
      enumerable: false,
      configurable: true
    });
    return MDCRadio2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/radio/dist/mdc-radio.html?raw
var mdc_radio_default = `<template class="mdc-radio \${touch ? 'mdc-radio--touch' : ''}"
  mdc-ripple="no-class.bind: true; input.bind: nativeControl_; unbounded.bind: true; active-surface.bind: false">
  <input type="radio" class="mdc-radio__native-control" id="\${id}" ref="nativeControl_" />
  <div class="mdc-radio__background">
    <div class="mdc-radio__outer-circle"></div>
    <div class="mdc-radio__inner-circle"></div>
  </div>
  <div class="mdc-radio__ripple"></div>
</template>
`;

// node_modules/@aurelia-mdc-web/radio/dist/mdc-radio.js
var radioId = 0;
var MdcRadio = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-radio", template: mdc_radio_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent18;
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  var MdcRadio2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.id = `mdc-radio-${++radioId}-input`;
      this.disabled = __runInitializers(this, _disabled_initializers, void 0);
      this.touch = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _touch_initializers, void 0));
      this._checked = __runInitializers(this, _touch_extraInitializers);
      defineMdcRadioElementApis(this.root);
    }
    disabledChanged() {
      if (this.nativeControl_) {
        this.nativeControl_.disabled = this.disabled;
      }
    }
    /** Use to verify the checked value */
    get checked() {
      if (this.nativeControl_) {
        return this.nativeControl_.checked;
      } else {
        return this._checked ?? false;
      }
    }
    set checked(checked) {
      this._checked = checked;
      if (this.nativeControl_) {
        this.nativeControl_.checked = checked;
      }
    }
    /** Value of the radio button */
    get value() {
      if (this.nativeControl_) {
        return this.nativeControl_.value;
      } else {
        return this._value ?? "";
      }
    }
    set value(value) {
      this._value = value;
      if (this.nativeControl_) {
        this.nativeControl_.value = value;
      }
    }
    attaching() {
      if (this.root.hasAttribute("checked")) {
        const attributeValue = this.root.getAttribute("checked");
        if (attributeValue || attributeValue === "") {
          this.root.checked = true;
        }
      }
    }
    initialSyncWithDOM() {
      this.disabledChanged();
      if (this._checked !== void 0) {
        this.checked = this._checked;
      }
      if (this._value !== void 0) {
        this.value = this._value;
      }
    }
    destroy() {
      this._checked = void 0;
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        setNativeControlDisabled: (disabled) => this.nativeControl_.disabled = disabled
      };
      return new MDCRadioFoundation(adapter);
    }
    /** Set focus to the radio button */
    focus() {
      this.nativeControl_.focus();
    }
    /** Set focus away from the radio button */
    blur() {
      this.nativeControl_.blur();
    }
  };
  __setFunctionName(_classThis, "MdcRadio");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _disabled_decorators = [bindable({ set: booleanAttr18 })];
    _touch_decorators = [bindable({ set: booleanAttr18 })];
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcRadio2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcRadio2 = _classThis;
})();
function defineMdcRadioElementApis(element) {
  Object.defineProperties(element, {
    type: {
      value: "radio"
    },
    checked: {
      get() {
        return CustomElement.for(this).viewModel.checked;
      },
      set(value) {
        CustomElement.for(this).viewModel.checked = value;
      },
      configurable: true
    },
    value: {
      get() {
        return CustomElement.for(this).viewModel.value;
      },
      set(value) {
        CustomElement.for(this).viewModel.value = value;
      }
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    },
    blur: {
      value() {
        CustomElement.for(this).viewModel.blur();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/radio/dist/index.js
var configured3 = false;
var RadioConfiguration = {
  register(container) {
    if (configured3) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.tagName === "MDC-RADIO" ? property === "checked" : false);
        nodeObserverLocator.useConfig("MDC-RADIO", "checked", { events: ["change"], type: CheckedObserver });
      }).register(container);
      configured3 = true;
      return container.register(MdcRadio, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/segmented-button/dist/index.js
var import_dist1012 = __toESM(require_dist());
var import_dist1013 = __toESM(require_dist2());
var import_dist1014 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button.js
var import_dist1003 = __toESM(require_dist());
var import_dist1004 = __toESM(require_dist2());
var import_dist1005 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist964 = __toESM(require_dist());
var import_dist965 = __toESM(require_dist2());
var import_dist966 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist949 = __toESM(require_dist());
var import_dist950 = __toESM(require_dist2());
var import_dist951 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist946 = __toESM(require_dist());
var import_dist947 = __toESM(require_dist2());
var import_dist948 = __toESM(require_dist3());
function booleanAttr19(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap19 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr19 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr19 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr19 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist952 = __toESM(require_dist());
var import_dist953 = __toESM(require_dist2());
var import_dist954 = __toESM(require_dist3());
var MdcPromisifyReference19 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist955 = __toESM(require_dist());
var import_dist956 = __toESM(require_dist2());
var import_dist957 = __toESM(require_dist3());
var MdcComponent19 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist958 = __toESM(require_dist());
var import_dist959 = __toESM(require_dist2());
var import_dist960 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist961 = __toESM(require_dist());
var import_dist962 = __toESM(require_dist2());
var import_dist963 = __toESM(require_dist3());

// node_modules/@material/segmented-button/index.js
var import_dist1000 = __toESM(require_dist());
var import_dist1001 = __toESM(require_dist2());
var import_dist1002 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segmented-button/index.js
var import_dist988 = __toESM(require_dist());
var import_dist989 = __toESM(require_dist2());
var import_dist990 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segmented-button/adapter.js
var import_dist967 = __toESM(require_dist());
var import_dist968 = __toESM(require_dist2());
var import_dist969 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segmented-button/foundation.js
var import_dist973 = __toESM(require_dist());
var import_dist974 = __toESM(require_dist2());
var import_dist975 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segmented-button/constants.js
var import_dist970 = __toESM(require_dist());
var import_dist971 = __toESM(require_dist2());
var import_dist972 = __toESM(require_dist3());
var selectors3 = {
  SEGMENT: ".mdc-segmented-button__segment"
};
var events3 = {
  SELECTED: "selected",
  CHANGE: "change"
};
var cssClasses18 = {
  SINGLE_SELECT: "mdc-segmented-button--single-select"
};

// node_modules/@material/segmented-button/segmented-button/foundation.js
var MDCSegmentedButtonFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSegmentedButtonFoundation2, _super);
    function MDCSegmentedButtonFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCSegmentedButtonFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSegmentedButtonFoundation2, "defaultAdapter", {
      get: function() {
        return {
          hasClass: function() {
            return false;
          },
          getSegments: function() {
            return [];
          },
          selectSegment: function() {
            return void 0;
          },
          unselectSegment: function() {
            return void 0;
          },
          notifySelectedChange: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSegmentedButtonFoundation2.prototype.selectSegment = function(indexOrSegmentId) {
      this.adapter.selectSegment(indexOrSegmentId);
    };
    MDCSegmentedButtonFoundation2.prototype.unselectSegment = function(indexOrSegmentId) {
      this.adapter.unselectSegment(indexOrSegmentId);
    };
    MDCSegmentedButtonFoundation2.prototype.getSelectedSegments = function() {
      return this.adapter.getSegments().filter(function(segmentDetail) {
        return segmentDetail.selected;
      });
    };
    MDCSegmentedButtonFoundation2.prototype.isSegmentSelected = function(indexOrSegmentId) {
      return this.adapter.getSegments().some(function(segmentDetail) {
        return (segmentDetail.index === indexOrSegmentId || segmentDetail.segmentId === indexOrSegmentId) && segmentDetail.selected;
      });
    };
    MDCSegmentedButtonFoundation2.prototype.isSingleSelect = function() {
      return this.adapter.hasClass(cssClasses18.SINGLE_SELECT);
    };
    MDCSegmentedButtonFoundation2.prototype.handleSelected = function(detail) {
      if (this.isSingleSelect()) {
        this.unselectPrevSelected(detail.index);
      }
      this.adapter.notifySelectedChange(detail);
    };
    MDCSegmentedButtonFoundation2.prototype.unselectPrevSelected = function(index) {
      var e_1, _a2;
      try {
        for (var _b = __values(this.getSelectedSegments()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var selectedSegment = _c.value;
          if (selectedSegment.index !== index) {
            this.unselectSegment(selectedSegment.index);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    return MDCSegmentedButtonFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/segmented-button/segmented-button/component.js
var import_dist985 = __toESM(require_dist());
var import_dist986 = __toESM(require_dist2());
var import_dist987 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segment/component.js
var import_dist982 = __toESM(require_dist());
var import_dist983 = __toESM(require_dist2());
var import_dist984 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segment/constants.js
var import_dist976 = __toESM(require_dist());
var import_dist977 = __toESM(require_dist2());
var import_dist978 = __toESM(require_dist3());
var booleans = {
  TRUE: "true",
  FALSE: "false"
};
var attributes2 = {
  ARIA_CHECKED: "aria-checked",
  ARIA_PRESSED: "aria-pressed",
  DATA_SEGMENT_ID: "data-segment-id"
};
var events4 = {
  CLICK: "click",
  SELECTED: "selected"
};
var cssClasses19 = {
  SELECTED: "mdc-segmented-button__segment--selected"
};

// node_modules/@material/segmented-button/segment/foundation.js
var import_dist979 = __toESM(require_dist());
var import_dist980 = __toESM(require_dist2());
var import_dist981 = __toESM(require_dist3());
var emptyClientRect2 = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0
};
var MDCSegmentedButtonSegmentFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSegmentedButtonSegmentFoundation2, _super);
    function MDCSegmentedButtonSegmentFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCSegmentedButtonSegmentFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSegmentedButtonSegmentFoundation2, "defaultAdapter", {
      get: function() {
        return {
          isSingleSelect: function() {
            return false;
          },
          getAttr: function() {
            return "";
          },
          setAttr: function() {
            return void 0;
          },
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          notifySelectedChange: function() {
            return void 0;
          },
          getRootBoundingClientRect: function() {
            return emptyClientRect2;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSegmentedButtonSegmentFoundation2.prototype.isSelected = function() {
      return this.adapter.hasClass(cssClasses19.SELECTED);
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.setSelected = function() {
      this.adapter.addClass(cssClasses19.SELECTED);
      this.setAriaAttr(booleans.TRUE);
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.setUnselected = function() {
      this.adapter.removeClass(cssClasses19.SELECTED);
      this.setAriaAttr(booleans.FALSE);
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.getSegmentId = function() {
      var _a2;
      return (_a2 = this.adapter.getAttr(attributes2.DATA_SEGMENT_ID)) !== null && _a2 !== void 0 ? _a2 : void 0;
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.handleClick = function() {
      if (this.adapter.isSingleSelect()) {
        this.setSelected();
      } else {
        this.toggleSelection();
      }
      this.adapter.notifySelectedChange(this.isSelected());
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.getDimensions = function() {
      return this.adapter.getRootBoundingClientRect();
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.toggleSelection = function() {
      if (this.isSelected()) {
        this.setUnselected();
      } else {
        this.setSelected();
      }
    };
    MDCSegmentedButtonSegmentFoundation2.prototype.setAriaAttr = function(value) {
      if (this.adapter.isSingleSelect()) {
        this.adapter.setAttr(attributes2.ARIA_CHECKED, value);
      } else {
        this.adapter.setAttr(attributes2.ARIA_PRESSED, value);
      }
    };
    return MDCSegmentedButtonSegmentFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/segmented-button/segment/component.js
var MDCSegmentedButtonSegment = (
  /** @class */
  function(_super) {
    __extends(MDCSegmentedButtonSegment2, _super);
    function MDCSegmentedButtonSegment2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MDCSegmentedButtonSegment2.prototype, "ripple", {
      get: function() {
        return this.rippleComponent;
      },
      enumerable: false,
      configurable: true
    });
    MDCSegmentedButtonSegment2.attachTo = function(root) {
      return new MDCSegmentedButtonSegment2(root);
    };
    MDCSegmentedButtonSegment2.prototype.initialize = function(rippleFactory) {
      var _this = this;
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      var rippleAdapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.foundation.getDimensions();
      } });
      this.rippleComponent = rippleFactory(this.root, new MDCRippleFoundation(rippleAdapter));
    };
    MDCSegmentedButtonSegment2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.listen(events4.CLICK, this.handleClick);
    };
    MDCSegmentedButtonSegment2.prototype.destroy = function() {
      this.ripple.destroy();
      this.unlisten(events4.CLICK, this.handleClick);
      _super.prototype.destroy.call(this);
    };
    MDCSegmentedButtonSegment2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        isSingleSelect: function() {
          return _this.isSingleSelect;
        },
        getAttr: function(attrName) {
          return _this.root.getAttribute(attrName);
        },
        setAttr: function(attrName, value) {
          _this.root.setAttribute(attrName, value);
        },
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        notifySelectedChange: function(selected) {
          _this.emit(
            events4.SELECTED,
            {
              index: _this.index,
              selected,
              segmentId: _this.getSegmentId()
            },
            true
            /* shouldBubble */
          );
        },
        getRootBoundingClientRect: function() {
          return _this.root.getBoundingClientRect();
        }
      };
      return new MDCSegmentedButtonSegmentFoundation(adapter);
    };
    MDCSegmentedButtonSegment2.prototype.setIndex = function(index) {
      this.index = index;
    };
    MDCSegmentedButtonSegment2.prototype.setIsSingleSelect = function(isSingleSelect) {
      this.isSingleSelect = isSingleSelect;
    };
    MDCSegmentedButtonSegment2.prototype.isSelected = function() {
      return this.foundation.isSelected();
    };
    MDCSegmentedButtonSegment2.prototype.setSelected = function() {
      this.foundation.setSelected();
    };
    MDCSegmentedButtonSegment2.prototype.setUnselected = function() {
      this.foundation.setUnselected();
    };
    MDCSegmentedButtonSegment2.prototype.getSegmentId = function() {
      return this.foundation.getSegmentId();
    };
    return MDCSegmentedButtonSegment2;
  }(MDCComponent)
);

// node_modules/@material/segmented-button/segmented-button/component.js
var MDCSegmentedButton = (
  /** @class */
  function(_super) {
    __extends(MDCSegmentedButton2, _super);
    function MDCSegmentedButton2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSegmentedButton2.attachTo = function(root) {
      return new MDCSegmentedButton2(root);
    };
    Object.defineProperty(MDCSegmentedButton2.prototype, "segments", {
      get: function() {
        return this.segmentsList.slice();
      },
      enumerable: false,
      configurable: true
    });
    MDCSegmentedButton2.prototype.initialize = function(segmentFactory) {
      if (segmentFactory === void 0) {
        segmentFactory = function(el) {
          return new MDCSegmentedButtonSegment(el);
        };
      }
      this.segmentFactory = segmentFactory;
      this.segmentsList = this.instantiateSegments(this.segmentFactory);
    };
    MDCSegmentedButton2.prototype.instantiateSegments = function(segmentFactory) {
      var segmentElements = [].slice.call(this.root.querySelectorAll(selectors3.SEGMENT));
      return segmentElements.map(function(el) {
        return segmentFactory(el);
      });
    };
    MDCSegmentedButton2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleSelected = function(event) {
        _this.foundation.handleSelected(event.detail);
      };
      this.listen(events3.SELECTED, this.handleSelected);
      var isSingleSelect = this.foundation.isSingleSelect();
      for (var i = 0; i < this.segmentsList.length; i++) {
        var segment = this.segmentsList[i];
        segment.setIndex(i);
        segment.setIsSingleSelect(isSingleSelect);
      }
      var selectedSegments = this.segmentsList.filter(function(segment2) {
        return segment2.isSelected();
      });
      if (isSingleSelect && selectedSegments.length === 0 && this.segmentsList.length > 0) {
        throw new Error("No segment selected in singleSelect mdc-segmented-button");
      } else if (isSingleSelect && selectedSegments.length > 1) {
        throw new Error("Multiple segments selected in singleSelect mdc-segmented-button");
      }
    };
    MDCSegmentedButton2.prototype.destroy = function() {
      var e_1, _a2;
      try {
        for (var _b = __values(this.segmentsList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var segment = _c.value;
          segment.destroy();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      this.unlisten(events3.SELECTED, this.handleSelected);
      _super.prototype.destroy.call(this);
    };
    MDCSegmentedButton2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        getSegments: function() {
          return _this.mappedSegments();
        },
        selectSegment: function(indexOrSegmentId) {
          var segmentDetail = _this.mappedSegments().find(function(detail) {
            return detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId;
          });
          if (segmentDetail) {
            _this.segmentsList[segmentDetail.index].setSelected();
          }
        },
        unselectSegment: function(indexOrSegmentId) {
          var segmentDetail = _this.mappedSegments().find(function(detail) {
            return detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId;
          });
          if (segmentDetail) {
            _this.segmentsList[segmentDetail.index].setUnselected();
          }
        },
        notifySelectedChange: function(detail) {
          _this.emit(
            events3.CHANGE,
            detail,
            true
            /* shouldBubble */
          );
        }
      };
      return new MDCSegmentedButtonFoundation(adapter);
    };
    MDCSegmentedButton2.prototype.getSelectedSegments = function() {
      return this.foundation.getSelectedSegments();
    };
    MDCSegmentedButton2.prototype.selectSegment = function(indexOrSegmentId) {
      this.foundation.selectSegment(indexOrSegmentId);
    };
    MDCSegmentedButton2.prototype.unselectSegment = function(indexOrSegmentId) {
      this.foundation.unselectSegment(indexOrSegmentId);
    };
    MDCSegmentedButton2.prototype.isSegmentSelected = function(indexOrSegmentId) {
      return this.foundation.isSegmentSelected(indexOrSegmentId);
    };
    MDCSegmentedButton2.prototype.mappedSegments = function() {
      return this.segmentsList.map(function(segment, index) {
        return {
          index,
          selected: segment.isSelected(),
          segmentId: segment.getSegmentId()
        };
      });
    };
    return MDCSegmentedButton2;
  }(MDCComponent)
);

// node_modules/@material/segmented-button/segment/index.js
var import_dist994 = __toESM(require_dist());
var import_dist995 = __toESM(require_dist2());
var import_dist996 = __toESM(require_dist3());

// node_modules/@material/segmented-button/segment/adapter.js
var import_dist991 = __toESM(require_dist());
var import_dist992 = __toESM(require_dist2());
var import_dist993 = __toESM(require_dist3());

// node_modules/@material/segmented-button/types.js
var import_dist997 = __toESM(require_dist());
var import_dist998 = __toESM(require_dist2());
var import_dist999 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button.html?raw
var mdc_segmented_button_default = `<template class="mdc-segmented-button \${single ? 'mdc-segmented-button--single-select' : ''}"
  selected.trigger="handleSelected($event)"><au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button.js
var MdcSegmentedButton = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-segmented-button", template: mdc_segmented_button_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent19;
  let _single_decorators;
  let _single_initializers = [];
  let _single_extraInitializers = [];
  let _segmentElements_decorators;
  let _segmentElements_initializers = [];
  let _segmentElements_extraInitializers = [];
  var MdcSegmentedButton2 = _classThis = class extends _classSuper {
    singleChanged() {
      this.root.setAttribute("role", this.single ? "radiogroup" : "group");
    }
    get segmentsList() {
      return this.segmentElements.map((x) => CustomElement.for(x).viewModel);
    }
    initialSyncWithDOM() {
      const isSingleSelect = this.foundation.isSingleSelect();
      for (let i = 0; i < this.segmentsList.length; i++) {
        const segment = this.segmentsList[i];
        segment.setIndex(i);
        segment.setIsSingleSelect(isSingleSelect);
      }
    }
    handleSelected(event) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleSelected(event.detail);
    }
    getDefaultFoundation() {
      const adapter = {
        hasClass: (className) => {
          return this.root.classList.contains(className);
        },
        getSegments: () => {
          return this.mappedSegments();
        },
        selectSegment: (indexOrSegmentId) => {
          const segmentDetail = this.mappedSegments().find((detail) => detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId);
          if (segmentDetail) {
            this.segmentsList[segmentDetail.index].checked = true;
          }
        },
        unselectSegment: (indexOrSegmentId) => {
          const segmentDetail = this.mappedSegments().find((detail) => detail.index === indexOrSegmentId || detail.segmentId === indexOrSegmentId);
          if (segmentDetail) {
            this.segmentsList[segmentDetail.index].checked = false;
            this.segmentsList[segmentDetail.index].notifySelectedChange("unselected", false);
          }
        },
        notifySelectedChange: (detail) => {
          this.emit(
            events3.CHANGE,
            detail,
            true
            /* shouldBubble */
          );
        }
      };
      return new MDCSegmentedButtonFoundation(adapter);
    }
    /**
     * @return Returns child segments mapped to readonly SegmentDetail list
     */
    mappedSegments() {
      return this.segmentsList.map((segment, index) => {
        return {
          index,
          selected: segment.checked,
          segmentId: segment.getSegmentId()
        };
      });
    }
    constructor() {
      super(...arguments);
      this.single = __runInitializers(this, _single_initializers, void 0);
      this.segmentElements = (__runInitializers(this, _single_extraInitializers), __runInitializers(this, _segmentElements_initializers, void 0));
      __runInitializers(this, _segmentElements_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcSegmentedButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _single_decorators = [bindable({ set: booleanAttr19 })];
    _segmentElements_decorators = [slotted({ query: "button" })];
    __esDecorate(null, null, _single_decorators, { kind: "field", name: "single", static: false, private: false, access: { has: (obj) => "single" in obj, get: (obj) => obj.single, set: (obj, value) => {
      obj.single = value;
    } }, metadata: _metadata }, _single_initializers, _single_extraInitializers);
    __esDecorate(null, null, _segmentElements_decorators, { kind: "field", name: "segmentElements", static: false, private: false, access: { has: (obj) => "segmentElements" in obj, get: (obj) => obj.segmentElements, set: (obj, value) => {
      obj.segmentElements = value;
    } }, metadata: _metadata }, _segmentElements_initializers, _segmentElements_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSegmentedButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSegmentedButton2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button-segment/mdc-segmented-button-segment.js
var import_dist1006 = __toESM(require_dist());
var import_dist1007 = __toESM(require_dist2());
var import_dist1008 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button-segment/mdc-segmented-button-segment.html?raw
var mdc_segmented_button_segment_default = `<template class="
    mdc-segmented-button__segment
    \${touch ? 'mdc-segmented-button--touch' : ''}
  " mdc-ripple="no-class.bind: true" click.trigger="handleClick()">
  <div class="mdc-segmented-button__touch" if.bind="touch"></div>
  <div class="mdc-segmented-button__ripple"></div>
  <i class="material-icons mdc-segmented-button__icon" if.bind="icon">\${icon}</i>
  <div class="mdc-segmented-button__label">
    <au-slot></au-slot>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button-segment/mdc-segmented-button-segment.js
var MdcSegmentedButtonSegment = (() => {
  let _classDecorators = [inject(Element, MdcSegmentedButton), customElement({ name: "mdc-segmented-button-segment", template: mdc_segmented_button_segment_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent19;
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  var MdcSegmentedButtonSegment2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.touch = __runInitializers(this, _touch_initializers, void 0);
      this.icon = (__runInitializers(this, _touch_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this._checked = __runInitializers(this, _icon_extraInitializers);
      defineMdcSegmentedButtonSegmentElementApis(root);
    }
    /** Use to verify the checked value */
    get checked() {
      var _a2;
      if (this.foundation) {
        return (_a2 = this.foundation) == null ? void 0 : _a2.isSelected();
      } else {
        return this._checked ?? false;
      }
    }
    /**
     * Whether the segment is checked.
     */
    set checked(value) {
      var _a2, _b;
      this._checked = value;
      if (value) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setSelected();
      } else {
        (_b = this.foundation) == null ? void 0 : _b.setUnselected();
      }
    }
    handleClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick();
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    async beforeFoundationCreated() {
      if (this.root.hasAttribute("checked")) {
        const attributeValue = this.root.getAttribute("checked");
        if (attributeValue || attributeValue === "") {
          this.checked = true;
        }
      }
    }
    initialSyncWithDOM() {
      if (this._checked !== void 0) {
        this.checked = this._checked;
      }
    }
    getDefaultFoundation() {
      const adapter = {
        isSingleSelect: () => {
          return this.isSingleSelect;
        },
        getAttr: (attrName) => {
          return this.root.getAttribute(attrName);
        },
        setAttr: (attrName, value) => {
          this.root.setAttribute(attrName, value);
        },
        addClass: (className) => {
          this.root.classList.add(className);
        },
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        hasClass: (className) => {
          return this.root.classList.contains(className);
        },
        notifySelectedChange: (selected) => this.notifySelectedChange(events3.SELECTED, selected),
        getRootBoundingClientRect: () => {
          return this.root.getBoundingClientRect();
        }
      };
      return new MDCSegmentedButtonSegmentFoundation(adapter);
    }
    notifySelectedChange(event, selected) {
      this.emit(
        event,
        {
          index: this.index,
          selected,
          segmentId: this.getSegmentId()
        },
        true
        /* shouldBubble */
      );
    }
    setIsSingleSelect(isSingleSelect) {
      this.isSingleSelect = isSingleSelect;
      this.root.setAttribute("role", isSingleSelect ? "radio" : "");
    }
    /**
     * Sets segment's index value
     *
     * @hidden
     * @param index Segment's index within wrapping segmented button
     */
    setIndex(index) {
      this.index = index;
    }
    /**
     * @hidden
     * @return Returns segment's segmentId if it was set by client
     */
    getSegmentId() {
      var _a2;
      return (_a2 = this.foundation) == null ? void 0 : _a2.getSegmentId();
    }
  };
  __setFunctionName(_classThis, "MdcSegmentedButtonSegment");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _touch_decorators = [bindable({ set: booleanAttr19 })];
    _icon_decorators = [bindable()];
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSegmentedButtonSegment2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSegmentedButtonSegment2 = _classThis;
})();
function defineMdcSegmentedButtonSegmentElementApis(element) {
  Object.defineProperties(element, {
    type: {
      value: "checkbox"
    },
    tagName: {
      get() {
        return "MDC-SEGMENTED-BUTTON-SEGMENT";
      }
    },
    checked: {
      get() {
        return CustomElement.for(this).viewModel.checked;
      },
      set(value) {
        CustomElement.for(this).viewModel.checked = value;
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/segmented-button/dist/mdc-segmented-button-segment/enhance-mdc-segmented-button-segment.js
var import_dist1009 = __toESM(require_dist());
var import_dist1010 = __toESM(require_dist2());
var import_dist1011 = __toESM(require_dist3());
var EnhanceMdcSegmentedButtonSegment = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcSegmentedButtonSegment2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-segmented-button-segment=""', 'as-element="mdc-segmented-button-segment" mdc-segmented-button-segment-element');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcSegmentedButtonSegment");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcSegmentedButtonSegment2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcSegmentedButtonSegment2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/segmented-button/dist/index.js
var configured4 = false;
var SegmentedButtonConfiguration = {
  register(container) {
    if (configured4) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.hasAttribute("mdc-segmented-button-segment-element") ? property === "checked" : false);
        nodeObserverLocator.useConfig("MDC-SEGMENTED-BUTTON-SEGMENT", "checked", { events: [events3.SELECTED, "unselected"], type: CheckedObserver });
      }).register(container);
      configured4 = true;
      return container.register(MdcSegmentedButton, MdcSegmentedButtonSegment, EnhanceMdcSegmentedButtonSegment, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/select/dist/index.js
var import_dist1120 = __toESM(require_dist());
var import_dist1121 = __toESM(require_dist2());
var import_dist1122 = __toESM(require_dist3());

// node_modules/@material/select/index.js
var import_dist1078 = __toESM(require_dist());
var import_dist1079 = __toESM(require_dist2());
var import_dist1080 = __toESM(require_dist3());

// node_modules/@material/select/adapter.js
var import_dist1015 = __toESM(require_dist());
var import_dist1016 = __toESM(require_dist2());
var import_dist1017 = __toESM(require_dist3());

// node_modules/@material/select/component.js
var import_dist1060 = __toESM(require_dist());
var import_dist1061 = __toESM(require_dist2());
var import_dist1062 = __toESM(require_dist3());

// node_modules/@material/menu-surface/constants.js
var import_dist1018 = __toESM(require_dist());
var import_dist1019 = __toESM(require_dist2());
var import_dist1020 = __toESM(require_dist3());
var cssClasses20 = {
  ANCHOR: "mdc-menu-surface--anchor",
  ANIMATING_CLOSED: "mdc-menu-surface--animating-closed",
  ANIMATING_OPEN: "mdc-menu-surface--animating-open",
  FIXED: "mdc-menu-surface--fixed",
  IS_OPEN_BELOW: "mdc-menu-surface--is-open-below",
  OPEN: "mdc-menu-surface--open",
  ROOT: "mdc-menu-surface"
};
var strings18 = {
  CLOSED_EVENT: "MDCMenuSurface:closed",
  CLOSING_EVENT: "MDCMenuSurface:closing",
  OPENED_EVENT: "MDCMenuSurface:opened",
  OPENING_EVENT: "MDCMenuSurface:opening",
  FOCUSABLE_ELEMENTS: [
    "button:not(:disabled)",
    '[href]:not([aria-disabled="true"])',
    "input:not(:disabled)",
    "select:not(:disabled)",
    "textarea:not(:disabled)",
    '[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'
  ].join(", ")
};
var numbers6 = {
  /** Total duration of menu-surface open animation. */
  TRANSITION_OPEN_DURATION: 120,
  /** Total duration of menu-surface close animation. */
  TRANSITION_CLOSE_DURATION: 75,
  /**
   * Margin left to the edge of the viewport when menu-surface is at maximum
   * possible height. Also used as a viewport margin.
   */
  MARGIN_TO_EDGE: 32,
  /**
   * Ratio of anchor width to menu-surface width for switching from corner
   * positioning to center positioning.
   */
  ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO: 0.67,
  /**
   * Amount of time to wait before restoring focus when closing the menu
   * surface. This is important because if a touch event triggered the menu
   * close, and the subsequent mouse event occurs after focus is restored, then
   * the restored focus would be lost.
   */
  TOUCH_EVENT_WAIT_MS: 30
};
var CornerBit;
(function(CornerBit2) {
  CornerBit2[CornerBit2["BOTTOM"] = 1] = "BOTTOM";
  CornerBit2[CornerBit2["CENTER"] = 2] = "CENTER";
  CornerBit2[CornerBit2["RIGHT"] = 4] = "RIGHT";
  CornerBit2[CornerBit2["FLIP_RTL"] = 8] = "FLIP_RTL";
})(CornerBit || (CornerBit = {}));
var Corner;
(function(Corner2) {
  Corner2[Corner2["TOP_LEFT"] = 0] = "TOP_LEFT";
  Corner2[Corner2["TOP_RIGHT"] = 4] = "TOP_RIGHT";
  Corner2[Corner2["BOTTOM_LEFT"] = 1] = "BOTTOM_LEFT";
  Corner2[Corner2["BOTTOM_RIGHT"] = 5] = "BOTTOM_RIGHT";
  Corner2[Corner2["TOP_START"] = 8] = "TOP_START";
  Corner2[Corner2["TOP_END"] = 12] = "TOP_END";
  Corner2[Corner2["BOTTOM_START"] = 9] = "BOTTOM_START";
  Corner2[Corner2["BOTTOM_END"] = 13] = "BOTTOM_END";
})(Corner || (Corner = {}));

// node_modules/@material/menu/component.js
var import_dist1033 = __toESM(require_dist());
var import_dist1034 = __toESM(require_dist2());
var import_dist1035 = __toESM(require_dist3());

// node_modules/@material/menu-surface/component.js
var import_dist1024 = __toESM(require_dist());
var import_dist1025 = __toESM(require_dist2());
var import_dist1026 = __toESM(require_dist3());

// node_modules/@material/menu-surface/foundation.js
var import_dist1021 = __toESM(require_dist());
var import_dist1022 = __toESM(require_dist2());
var import_dist1023 = __toESM(require_dist3());
var MDCMenuSurfaceFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCMenuSurfaceFoundation2, _super);
    function MDCMenuSurfaceFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCMenuSurfaceFoundation2.defaultAdapter), adapter)) || this;
      _this.isSurfaceOpen = false;
      _this.isQuickOpen = false;
      _this.isHoistedElement = false;
      _this.isFixedPosition = false;
      _this.isHorizontallyCenteredOnViewport = false;
      _this.maxHeight = 0;
      _this.openBottomBias = 0;
      _this.openAnimationEndTimerId = 0;
      _this.closeAnimationEndTimerId = 0;
      _this.animationRequestId = 0;
      _this.anchorCorner = Corner.TOP_START;
      _this.originCorner = Corner.TOP_START;
      _this.anchorMargin = { top: 0, right: 0, bottom: 0, left: 0 };
      _this.position = { x: 0, y: 0 };
      return _this;
    }
    Object.defineProperty(MDCMenuSurfaceFoundation2, "cssClasses", {
      get: function() {
        return cssClasses20;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation2, "strings", {
      get: function() {
        return strings18;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation2, "numbers", {
      get: function() {
        return numbers6;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation2, "Corner", {
      get: function() {
        return Corner;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuSurfaceFoundation2, "defaultAdapter", {
      /**
       * @see {@link MDCMenuSurfaceAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          hasAnchor: function() {
            return false;
          },
          isElementInContainer: function() {
            return false;
          },
          isFocused: function() {
            return false;
          },
          isRtl: function() {
            return false;
          },
          getInnerDimensions: function() {
            return { height: 0, width: 0 };
          },
          getAnchorDimensions: function() {
            return null;
          },
          getWindowDimensions: function() {
            return { height: 0, width: 0 };
          },
          getBodyDimensions: function() {
            return { height: 0, width: 0 };
          },
          getWindowScroll: function() {
            return { x: 0, y: 0 };
          },
          setPosition: function() {
            return void 0;
          },
          setMaxHeight: function() {
            return void 0;
          },
          setTransformOrigin: function() {
            return void 0;
          },
          saveFocus: function() {
            return void 0;
          },
          restoreFocus: function() {
            return void 0;
          },
          notifyClose: function() {
            return void 0;
          },
          notifyClosing: function() {
            return void 0;
          },
          notifyOpen: function() {
            return void 0;
          },
          notifyOpening: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCMenuSurfaceFoundation2.prototype.init = function() {
      var _a2 = MDCMenuSurfaceFoundation2.cssClasses, ROOT = _a2.ROOT, OPEN3 = _a2.OPEN;
      if (!this.adapter.hasClass(ROOT)) {
        throw new Error(ROOT + " class required in root element.");
      }
      if (this.adapter.hasClass(OPEN3)) {
        this.isSurfaceOpen = true;
      }
    };
    MDCMenuSurfaceFoundation2.prototype.destroy = function() {
      clearTimeout(this.openAnimationEndTimerId);
      clearTimeout(this.closeAnimationEndTimerId);
      cancelAnimationFrame(this.animationRequestId);
    };
    MDCMenuSurfaceFoundation2.prototype.setAnchorCorner = function(corner) {
      this.anchorCorner = corner;
    };
    MDCMenuSurfaceFoundation2.prototype.flipCornerHorizontally = function() {
      this.originCorner = this.originCorner ^ CornerBit.RIGHT;
    };
    MDCMenuSurfaceFoundation2.prototype.setAnchorMargin = function(margin) {
      this.anchorMargin.top = margin.top || 0;
      this.anchorMargin.right = margin.right || 0;
      this.anchorMargin.bottom = margin.bottom || 0;
      this.anchorMargin.left = margin.left || 0;
    };
    MDCMenuSurfaceFoundation2.prototype.setIsHoisted = function(isHoisted) {
      this.isHoistedElement = isHoisted;
    };
    MDCMenuSurfaceFoundation2.prototype.setFixedPosition = function(isFixedPosition) {
      this.isFixedPosition = isFixedPosition;
    };
    MDCMenuSurfaceFoundation2.prototype.isFixed = function() {
      return this.isFixedPosition;
    };
    MDCMenuSurfaceFoundation2.prototype.setAbsolutePosition = function(x, y) {
      this.position.x = this.isFinite(x) ? x : 0;
      this.position.y = this.isFinite(y) ? y : 0;
    };
    MDCMenuSurfaceFoundation2.prototype.setIsHorizontallyCenteredOnViewport = function(isCentered) {
      this.isHorizontallyCenteredOnViewport = isCentered;
    };
    MDCMenuSurfaceFoundation2.prototype.setQuickOpen = function(quickOpen) {
      this.isQuickOpen = quickOpen;
    };
    MDCMenuSurfaceFoundation2.prototype.setMaxHeight = function(maxHeight) {
      this.maxHeight = maxHeight;
    };
    MDCMenuSurfaceFoundation2.prototype.setOpenBottomBias = function(bias) {
      this.openBottomBias = bias;
    };
    MDCMenuSurfaceFoundation2.prototype.isOpen = function() {
      return this.isSurfaceOpen;
    };
    MDCMenuSurfaceFoundation2.prototype.open = function() {
      var _this = this;
      if (this.isSurfaceOpen) {
        return;
      }
      this.adapter.notifyOpening();
      this.adapter.saveFocus();
      if (this.isQuickOpen) {
        this.isSurfaceOpen = true;
        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
        this.dimensions = this.adapter.getInnerDimensions();
        this.autoposition();
        this.adapter.notifyOpen();
      } else {
        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_OPEN);
        this.animationRequestId = requestAnimationFrame(function() {
          _this.dimensions = _this.adapter.getInnerDimensions();
          _this.autoposition();
          _this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
          _this.openAnimationEndTimerId = setTimeout(function() {
            _this.openAnimationEndTimerId = 0;
            _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_OPEN);
            _this.adapter.notifyOpen();
          }, numbers6.TRANSITION_OPEN_DURATION);
        });
        this.isSurfaceOpen = true;
      }
    };
    MDCMenuSurfaceFoundation2.prototype.close = function(skipRestoreFocus) {
      var _this = this;
      if (skipRestoreFocus === void 0) {
        skipRestoreFocus = false;
      }
      if (!this.isSurfaceOpen) {
        return;
      }
      this.adapter.notifyClosing();
      if (this.isQuickOpen) {
        this.isSurfaceOpen = false;
        if (!skipRestoreFocus) {
          this.maybeRestoreFocus();
        }
        this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
        this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
        this.adapter.notifyClose();
        return;
      }
      this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_CLOSED);
      requestAnimationFrame(function() {
        _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.OPEN);
        _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
        _this.closeAnimationEndTimerId = setTimeout(function() {
          _this.closeAnimationEndTimerId = 0;
          _this.adapter.removeClass(MDCMenuSurfaceFoundation2.cssClasses.ANIMATING_CLOSED);
          _this.adapter.notifyClose();
        }, numbers6.TRANSITION_CLOSE_DURATION);
      });
      this.isSurfaceOpen = false;
      if (!skipRestoreFocus) {
        this.maybeRestoreFocus();
      }
    };
    MDCMenuSurfaceFoundation2.prototype.handleBodyClick = function(evt) {
      var el = evt.target;
      if (this.adapter.isElementInContainer(el)) {
        return;
      }
      this.close();
    };
    MDCMenuSurfaceFoundation2.prototype.handleKeydown = function(evt) {
      var keyCode = evt.keyCode, key = evt.key;
      var isEscape = key === "Escape" || keyCode === 27;
      if (isEscape) {
        this.close();
      }
    };
    MDCMenuSurfaceFoundation2.prototype.autoposition = function() {
      var _a2;
      this.measurements = this.getAutoLayoutmeasurements();
      var corner = this.getoriginCorner();
      var maxMenuSurfaceHeight = this.getMenuSurfaceMaxHeight(corner);
      var verticalAlignment = this.hasBit(corner, CornerBit.BOTTOM) ? "bottom" : "top";
      var horizontalAlignment = this.hasBit(corner, CornerBit.RIGHT) ? "right" : "left";
      var horizontalOffset = this.getHorizontalOriginOffset(corner);
      var verticalOffset = this.getVerticalOriginOffset(corner);
      var _b = this.measurements, anchorSize = _b.anchorSize, surfaceSize = _b.surfaceSize;
      var position = (_a2 = {}, _a2[horizontalAlignment] = horizontalOffset, _a2[verticalAlignment] = verticalOffset, _a2);
      if (anchorSize.width / surfaceSize.width > numbers6.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO) {
        horizontalAlignment = "center";
      }
      if (this.isHoistedElement || this.isFixedPosition) {
        this.adjustPositionForHoistedElement(position);
      }
      this.adapter.setTransformOrigin(horizontalAlignment + " " + verticalAlignment);
      this.adapter.setPosition(position);
      this.adapter.setMaxHeight(maxMenuSurfaceHeight ? maxMenuSurfaceHeight + "px" : "");
      if (!this.hasBit(corner, CornerBit.BOTTOM)) {
        this.adapter.addClass(MDCMenuSurfaceFoundation2.cssClasses.IS_OPEN_BELOW);
      }
    };
    MDCMenuSurfaceFoundation2.prototype.getAutoLayoutmeasurements = function() {
      var anchorRect = this.adapter.getAnchorDimensions();
      var bodySize = this.adapter.getBodyDimensions();
      var viewportSize = this.adapter.getWindowDimensions();
      var windowScroll = this.adapter.getWindowScroll();
      if (!anchorRect) {
        anchorRect = {
          top: this.position.y,
          right: this.position.x,
          bottom: this.position.y,
          left: this.position.x,
          width: 0,
          height: 0
        };
      }
      return {
        anchorSize: anchorRect,
        bodySize,
        surfaceSize: this.dimensions,
        viewportDistance: {
          // tslint:disable:object-literal-sort-keys Positional properties are more readable when they're grouped together
          top: anchorRect.top,
          right: viewportSize.width - anchorRect.right,
          bottom: viewportSize.height - anchorRect.bottom,
          left: anchorRect.left
          // tslint:enable:object-literal-sort-keys
        },
        viewportSize,
        windowScroll
      };
    };
    MDCMenuSurfaceFoundation2.prototype.getoriginCorner = function() {
      var corner = this.originCorner;
      var _a2 = this.measurements, viewportDistance = _a2.viewportDistance, anchorSize = _a2.anchorSize, surfaceSize = _a2.surfaceSize;
      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation2.numbers.MARGIN_TO_EDGE;
      var isAnchoredToBottom = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
      var availableTop;
      var availableBottom;
      if (isAnchoredToBottom) {
        availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.bottom;
        availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE - this.anchorMargin.bottom;
      } else {
        availableTop = viewportDistance.top - MARGIN_TO_EDGE + this.anchorMargin.top;
        availableBottom = viewportDistance.bottom - MARGIN_TO_EDGE + anchorSize.height - this.anchorMargin.top;
      }
      var isAvailableBottom = availableBottom - surfaceSize.height > 0;
      if (!isAvailableBottom && availableTop > availableBottom + this.openBottomBias) {
        corner = this.setBit(corner, CornerBit.BOTTOM);
      }
      var isRtl = this.adapter.isRtl();
      var isFlipRtl = this.hasBit(this.anchorCorner, CornerBit.FLIP_RTL);
      var hasRightBit = this.hasBit(this.anchorCorner, CornerBit.RIGHT) || this.hasBit(corner, CornerBit.RIGHT);
      var isAnchoredToRight = false;
      if (isRtl && isFlipRtl) {
        isAnchoredToRight = !hasRightBit;
      } else {
        isAnchoredToRight = hasRightBit;
      }
      var availableLeft;
      var availableRight;
      if (isAnchoredToRight) {
        availableLeft = viewportDistance.left + anchorSize.width + this.anchorMargin.right;
        availableRight = viewportDistance.right - this.anchorMargin.right;
      } else {
        availableLeft = viewportDistance.left + this.anchorMargin.left;
        availableRight = viewportDistance.right + anchorSize.width - this.anchorMargin.left;
      }
      var isAvailableLeft = availableLeft - surfaceSize.width > 0;
      var isAvailableRight = availableRight - surfaceSize.width > 0;
      var isOriginCornerAlignedToEnd = this.hasBit(corner, CornerBit.FLIP_RTL) && this.hasBit(corner, CornerBit.RIGHT);
      if (isAvailableRight && isOriginCornerAlignedToEnd && isRtl || !isAvailableLeft && isOriginCornerAlignedToEnd) {
        corner = this.unsetBit(corner, CornerBit.RIGHT);
      } else if (isAvailableLeft && isAnchoredToRight && isRtl || isAvailableLeft && !isAnchoredToRight && hasRightBit || !isAvailableRight && availableLeft >= availableRight) {
        corner = this.setBit(corner, CornerBit.RIGHT);
      }
      return corner;
    };
    MDCMenuSurfaceFoundation2.prototype.getMenuSurfaceMaxHeight = function(corner) {
      if (this.maxHeight > 0) {
        return this.maxHeight;
      }
      var viewportDistance = this.measurements.viewportDistance;
      var maxHeight = 0;
      var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
      var isBottomAnchored = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
      var MARGIN_TO_EDGE = MDCMenuSurfaceFoundation2.numbers.MARGIN_TO_EDGE;
      if (isBottomAligned) {
        maxHeight = viewportDistance.top + this.anchorMargin.top - MARGIN_TO_EDGE;
        if (!isBottomAnchored) {
          maxHeight += this.measurements.anchorSize.height;
        }
      } else {
        maxHeight = viewportDistance.bottom - this.anchorMargin.bottom + this.measurements.anchorSize.height - MARGIN_TO_EDGE;
        if (isBottomAnchored) {
          maxHeight -= this.measurements.anchorSize.height;
        }
      }
      return maxHeight;
    };
    MDCMenuSurfaceFoundation2.prototype.getHorizontalOriginOffset = function(corner) {
      var anchorSize = this.measurements.anchorSize;
      var isRightAligned = this.hasBit(corner, CornerBit.RIGHT);
      var avoidHorizontalOverlap = this.hasBit(this.anchorCorner, CornerBit.RIGHT);
      if (isRightAligned) {
        var rightOffset = avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.left : this.anchorMargin.right;
        if (this.isHoistedElement || this.isFixedPosition) {
          return rightOffset - (this.measurements.viewportSize.width - this.measurements.bodySize.width);
        }
        return rightOffset;
      }
      return avoidHorizontalOverlap ? anchorSize.width - this.anchorMargin.right : this.anchorMargin.left;
    };
    MDCMenuSurfaceFoundation2.prototype.getVerticalOriginOffset = function(corner) {
      var anchorSize = this.measurements.anchorSize;
      var isBottomAligned = this.hasBit(corner, CornerBit.BOTTOM);
      var avoidVerticalOverlap = this.hasBit(this.anchorCorner, CornerBit.BOTTOM);
      var y = 0;
      if (isBottomAligned) {
        y = avoidVerticalOverlap ? anchorSize.height - this.anchorMargin.top : -this.anchorMargin.bottom;
      } else {
        y = avoidVerticalOverlap ? anchorSize.height + this.anchorMargin.bottom : this.anchorMargin.top;
      }
      return y;
    };
    MDCMenuSurfaceFoundation2.prototype.adjustPositionForHoistedElement = function(position) {
      var e_1, _a2;
      var _b = this.measurements, windowScroll = _b.windowScroll, viewportDistance = _b.viewportDistance, surfaceSize = _b.surfaceSize, viewportSize = _b.viewportSize;
      var props = Object.keys(position);
      try {
        for (var props_1 = __values(props), props_1_1 = props_1.next(); !props_1_1.done; props_1_1 = props_1.next()) {
          var prop = props_1_1.value;
          var value = position[prop] || 0;
          if (this.isHorizontallyCenteredOnViewport && (prop === "left" || prop === "right")) {
            position[prop] = (viewportSize.width - surfaceSize.width) / 2;
            continue;
          }
          value += viewportDistance[prop];
          if (!this.isFixedPosition) {
            if (prop === "top") {
              value += windowScroll.y;
            } else if (prop === "bottom") {
              value -= windowScroll.y;
            } else if (prop === "left") {
              value += windowScroll.x;
            } else {
              value -= windowScroll.x;
            }
          }
          position[prop] = value;
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (props_1_1 && !props_1_1.done && (_a2 = props_1.return)) _a2.call(props_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    MDCMenuSurfaceFoundation2.prototype.maybeRestoreFocus = function() {
      var _this = this;
      var isRootFocused = this.adapter.isFocused();
      var ownerDocument = this.adapter.getOwnerDocument ? this.adapter.getOwnerDocument() : document;
      var childHasFocus = ownerDocument.activeElement && this.adapter.isElementInContainer(ownerDocument.activeElement);
      if (isRootFocused || childHasFocus) {
        setTimeout(function() {
          _this.adapter.restoreFocus();
        }, numbers6.TOUCH_EVENT_WAIT_MS);
      }
    };
    MDCMenuSurfaceFoundation2.prototype.hasBit = function(corner, bit) {
      return Boolean(corner & bit);
    };
    MDCMenuSurfaceFoundation2.prototype.setBit = function(corner, bit) {
      return corner | bit;
    };
    MDCMenuSurfaceFoundation2.prototype.unsetBit = function(corner, bit) {
      return corner ^ bit;
    };
    MDCMenuSurfaceFoundation2.prototype.isFinite = function(num) {
      return typeof num === "number" && isFinite(num);
    };
    return MDCMenuSurfaceFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/menu-surface/component.js
var MDCMenuSurface = (
  /** @class */
  function(_super) {
    __extends(MDCMenuSurface2, _super);
    function MDCMenuSurface2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCMenuSurface2.attachTo = function(root) {
      return new MDCMenuSurface2(root);
    };
    MDCMenuSurface2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      var parentEl = this.root.parentElement;
      this.anchorElement = parentEl && parentEl.classList.contains(cssClasses20.ANCHOR) ? parentEl : null;
      if (this.root.classList.contains(cssClasses20.FIXED)) {
        this.setFixedPosition(true);
      }
      this.handleKeydown = function(event) {
        _this.foundation.handleKeydown(event);
      };
      this.handleBodyClick = function(event) {
        _this.foundation.handleBodyClick(event);
      };
      this.registerBodyClickListener = function() {
        document.body.addEventListener("click", _this.handleBodyClick, { capture: true });
      };
      this.deregisterBodyClickListener = function() {
        document.body.removeEventListener("click", _this.handleBodyClick, { capture: true });
      };
      this.listen("keydown", this.handleKeydown);
      this.listen(strings18.OPENED_EVENT, this.registerBodyClickListener);
      this.listen(strings18.CLOSED_EVENT, this.deregisterBodyClickListener);
    };
    MDCMenuSurface2.prototype.destroy = function() {
      this.unlisten("keydown", this.handleKeydown);
      this.unlisten(strings18.OPENED_EVENT, this.registerBodyClickListener);
      this.unlisten(strings18.CLOSED_EVENT, this.deregisterBodyClickListener);
      _super.prototype.destroy.call(this);
    };
    MDCMenuSurface2.prototype.isOpen = function() {
      return this.foundation.isOpen();
    };
    MDCMenuSurface2.prototype.open = function() {
      this.foundation.open();
    };
    MDCMenuSurface2.prototype.close = function(skipRestoreFocus) {
      if (skipRestoreFocus === void 0) {
        skipRestoreFocus = false;
      }
      this.foundation.close(skipRestoreFocus);
    };
    Object.defineProperty(MDCMenuSurface2.prototype, "quickOpen", {
      set: function(quickOpen) {
        this.foundation.setQuickOpen(quickOpen);
      },
      enumerable: false,
      configurable: true
    });
    MDCMenuSurface2.prototype.setIsHoisted = function(isHoisted) {
      this.foundation.setIsHoisted(isHoisted);
    };
    MDCMenuSurface2.prototype.setMenuSurfaceAnchorElement = function(element) {
      this.anchorElement = element;
    };
    MDCMenuSurface2.prototype.setFixedPosition = function(isFixed) {
      if (isFixed) {
        this.root.classList.add(cssClasses20.FIXED);
      } else {
        this.root.classList.remove(cssClasses20.FIXED);
      }
      this.foundation.setFixedPosition(isFixed);
    };
    MDCMenuSurface2.prototype.setAbsolutePosition = function(x, y) {
      this.foundation.setAbsolutePosition(x, y);
      this.setIsHoisted(true);
    };
    MDCMenuSurface2.prototype.setAnchorCorner = function(corner) {
      this.foundation.setAnchorCorner(corner);
    };
    MDCMenuSurface2.prototype.setAnchorMargin = function(margin) {
      this.foundation.setAnchorMargin(margin);
    };
    MDCMenuSurface2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        hasAnchor: function() {
          return !!_this.anchorElement;
        },
        notifyClose: function() {
          return _this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
        },
        notifyClosing: function() {
          _this.emit(MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {});
        },
        notifyOpen: function() {
          return _this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
        },
        notifyOpening: function() {
          return _this.emit(MDCMenuSurfaceFoundation.strings.OPENING_EVENT, {});
        },
        isElementInContainer: function(el) {
          return _this.root.contains(el);
        },
        isRtl: function() {
          return getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        setTransformOrigin: function(origin) {
          var propertyName = getCorrectPropertyName(window, "transform") + "-origin";
          _this.root.style.setProperty(propertyName, origin);
        },
        isFocused: function() {
          return document.activeElement === _this.root;
        },
        saveFocus: function() {
          _this.previousFocus = document.activeElement;
        },
        restoreFocus: function() {
          if (_this.root.contains(document.activeElement)) {
            if (_this.previousFocus && _this.previousFocus.focus) {
              _this.previousFocus.focus();
            }
          }
        },
        getInnerDimensions: function() {
          return {
            width: _this.root.offsetWidth,
            height: _this.root.offsetHeight
          };
        },
        getAnchorDimensions: function() {
          return _this.anchorElement ? _this.anchorElement.getBoundingClientRect() : null;
        },
        getWindowDimensions: function() {
          return { width: window.innerWidth, height: window.innerHeight };
        },
        getBodyDimensions: function() {
          return { width: document.body.clientWidth, height: document.body.clientHeight };
        },
        getWindowScroll: function() {
          return { x: window.pageXOffset, y: window.pageYOffset };
        },
        setPosition: function(position) {
          var rootHTML = _this.root;
          rootHTML.style.left = "left" in position ? position.left + "px" : "";
          rootHTML.style.right = "right" in position ? position.right + "px" : "";
          rootHTML.style.top = "top" in position ? position.top + "px" : "";
          rootHTML.style.bottom = "bottom" in position ? position.bottom + "px" : "";
        },
        setMaxHeight: function(height) {
          _this.root.style.maxHeight = height;
        }
      };
      return new MDCMenuSurfaceFoundation(adapter);
    };
    return MDCMenuSurface2;
  }(MDCComponent)
);

// node_modules/@material/menu/constants.js
var import_dist1027 = __toESM(require_dist());
var import_dist1028 = __toESM(require_dist2());
var import_dist1029 = __toESM(require_dist3());
var cssClasses21 = {
  MENU_SELECTED_LIST_ITEM: "mdc-menu-item--selected",
  MENU_SELECTION_GROUP: "mdc-menu__selection-group",
  ROOT: "mdc-menu"
};
var strings19 = {
  ARIA_CHECKED_ATTR: "aria-checked",
  ARIA_DISABLED_ATTR: "aria-disabled",
  CHECKBOX_SELECTOR: 'input[type="checkbox"]',
  LIST_SELECTOR: ".mdc-list,.mdc-deprecated-list",
  SELECTED_EVENT: "MDCMenu:selected",
  SKIP_RESTORE_FOCUS: "data-menu-item-skip-restore-focus"
};
var numbers7 = {
  FOCUS_ROOT_INDEX: -1
};
var DefaultFocusState;
(function(DefaultFocusState2) {
  DefaultFocusState2[DefaultFocusState2["NONE"] = 0] = "NONE";
  DefaultFocusState2[DefaultFocusState2["LIST_ROOT"] = 1] = "LIST_ROOT";
  DefaultFocusState2[DefaultFocusState2["FIRST_ITEM"] = 2] = "FIRST_ITEM";
  DefaultFocusState2[DefaultFocusState2["LAST_ITEM"] = 3] = "LAST_ITEM";
})(DefaultFocusState || (DefaultFocusState = {}));

// node_modules/@material/menu/foundation.js
var import_dist1030 = __toESM(require_dist());
var import_dist1031 = __toESM(require_dist2());
var import_dist1032 = __toESM(require_dist3());
var MDCMenuFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCMenuFoundation2, _super);
    function MDCMenuFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCMenuFoundation2.defaultAdapter), adapter)) || this;
      _this.closeAnimationEndTimerId = 0;
      _this.defaultFocusState = DefaultFocusState.LIST_ROOT;
      _this.selectedIndex = -1;
      return _this;
    }
    Object.defineProperty(MDCMenuFoundation2, "cssClasses", {
      get: function() {
        return cssClasses21;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuFoundation2, "strings", {
      get: function() {
        return strings19;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuFoundation2, "numbers", {
      get: function() {
        return numbers7;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenuFoundation2, "defaultAdapter", {
      /**
       * @see {@link MDCMenuAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClassToElementAtIndex: function() {
            return void 0;
          },
          removeClassFromElementAtIndex: function() {
            return void 0;
          },
          addAttributeToElementAtIndex: function() {
            return void 0;
          },
          removeAttributeFromElementAtIndex: function() {
            return void 0;
          },
          getAttributeFromElementAtIndex: function() {
            return null;
          },
          elementContainsClass: function() {
            return false;
          },
          closeSurface: function() {
            return void 0;
          },
          getElementIndex: function() {
            return -1;
          },
          notifySelected: function() {
            return void 0;
          },
          getMenuItemCount: function() {
            return 0;
          },
          focusItemAtIndex: function() {
            return void 0;
          },
          focusListRoot: function() {
            return void 0;
          },
          getSelectedSiblingOfItemAtIndex: function() {
            return -1;
          },
          isSelectableItemAtIndex: function() {
            return false;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCMenuFoundation2.prototype.destroy = function() {
      if (this.closeAnimationEndTimerId) {
        clearTimeout(this.closeAnimationEndTimerId);
      }
      this.adapter.closeSurface();
    };
    MDCMenuFoundation2.prototype.handleKeydown = function(evt) {
      var key = evt.key, keyCode = evt.keyCode;
      var isTab = key === "Tab" || keyCode === 9;
      if (isTab) {
        this.adapter.closeSurface(
          /** skipRestoreFocus */
          true
        );
      }
    };
    MDCMenuFoundation2.prototype.handleItemAction = function(listItem) {
      var _this = this;
      var index = this.adapter.getElementIndex(listItem);
      if (index < 0) {
        return;
      }
      this.adapter.notifySelected({ index });
      var skipRestoreFocus = this.adapter.getAttributeFromElementAtIndex(index, strings19.SKIP_RESTORE_FOCUS) === "true";
      this.adapter.closeSurface(skipRestoreFocus);
      this.closeAnimationEndTimerId = setTimeout(function() {
        var recomputedIndex = _this.adapter.getElementIndex(listItem);
        if (recomputedIndex >= 0 && _this.adapter.isSelectableItemAtIndex(recomputedIndex)) {
          _this.setSelectedIndex(recomputedIndex);
        }
      }, MDCMenuSurfaceFoundation.numbers.TRANSITION_CLOSE_DURATION);
    };
    MDCMenuFoundation2.prototype.handleMenuSurfaceOpened = function() {
      switch (this.defaultFocusState) {
        case DefaultFocusState.FIRST_ITEM:
          this.adapter.focusItemAtIndex(0);
          break;
        case DefaultFocusState.LAST_ITEM:
          this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount() - 1);
          break;
        case DefaultFocusState.NONE:
          break;
        default:
          this.adapter.focusListRoot();
          break;
      }
    };
    MDCMenuFoundation2.prototype.setDefaultFocusState = function(focusState) {
      this.defaultFocusState = focusState;
    };
    MDCMenuFoundation2.prototype.getSelectedIndex = function() {
      return this.selectedIndex;
    };
    MDCMenuFoundation2.prototype.setSelectedIndex = function(index) {
      this.validatedIndex(index);
      if (!this.adapter.isSelectableItemAtIndex(index)) {
        throw new Error("MDCMenuFoundation: No selection group at specified index.");
      }
      var prevSelectedIndex = this.adapter.getSelectedSiblingOfItemAtIndex(index);
      if (prevSelectedIndex >= 0) {
        this.adapter.removeAttributeFromElementAtIndex(prevSelectedIndex, strings19.ARIA_CHECKED_ATTR);
        this.adapter.removeClassFromElementAtIndex(prevSelectedIndex, cssClasses21.MENU_SELECTED_LIST_ITEM);
      }
      this.adapter.addClassToElementAtIndex(index, cssClasses21.MENU_SELECTED_LIST_ITEM);
      this.adapter.addAttributeToElementAtIndex(index, strings19.ARIA_CHECKED_ATTR, "true");
      this.selectedIndex = index;
    };
    MDCMenuFoundation2.prototype.setEnabled = function(index, isEnabled) {
      this.validatedIndex(index);
      if (isEnabled) {
        this.adapter.removeClassFromElementAtIndex(index, cssClasses.LIST_ITEM_DISABLED_CLASS);
        this.adapter.addAttributeToElementAtIndex(index, strings19.ARIA_DISABLED_ATTR, "false");
      } else {
        this.adapter.addClassToElementAtIndex(index, cssClasses.LIST_ITEM_DISABLED_CLASS);
        this.adapter.addAttributeToElementAtIndex(index, strings19.ARIA_DISABLED_ATTR, "true");
      }
    };
    MDCMenuFoundation2.prototype.validatedIndex = function(index) {
      var menuSize = this.adapter.getMenuItemCount();
      var isIndexInRange = index >= 0 && index < menuSize;
      if (!isIndexInRange) {
        throw new Error("MDCMenuFoundation: No list item at specified index.");
      }
    };
    return MDCMenuFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/menu/component.js
var MDCMenu = (
  /** @class */
  function(_super) {
    __extends(MDCMenu2, _super);
    function MDCMenu2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCMenu2.attachTo = function(root) {
      return new MDCMenu2(root);
    };
    MDCMenu2.prototype.initialize = function(menuSurfaceFactory, listFactory) {
      if (menuSurfaceFactory === void 0) {
        menuSurfaceFactory = function(el) {
          return new MDCMenuSurface(el);
        };
      }
      if (listFactory === void 0) {
        listFactory = function(el) {
          return new MDCList(el);
        };
      }
      this.menuSurfaceFactory = menuSurfaceFactory;
      this.listFactory = listFactory;
    };
    MDCMenu2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.menuSurface = this.menuSurfaceFactory(this.root);
      var list = this.root.querySelector(strings19.LIST_SELECTOR);
      if (list) {
        this.list = this.listFactory(list);
        this.list.wrapFocus = true;
      } else {
        this.list = null;
      }
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.handleItemAction = function(evt) {
        _this.foundation.handleItemAction(_this.items[evt.detail.index]);
      };
      this.handleMenuSurfaceOpened = function() {
        _this.foundation.handleMenuSurfaceOpened();
      };
      this.menuSurface.listen(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
      this.listen("keydown", this.handleKeydown);
      this.listen(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
    };
    MDCMenu2.prototype.destroy = function() {
      if (this.list) {
        this.list.destroy();
      }
      this.menuSurface.destroy();
      this.menuSurface.unlisten(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, this.handleMenuSurfaceOpened);
      this.unlisten("keydown", this.handleKeydown);
      this.unlisten(MDCListFoundation.strings.ACTION_EVENT, this.handleItemAction);
      _super.prototype.destroy.call(this);
    };
    Object.defineProperty(MDCMenu2.prototype, "open", {
      get: function() {
        return this.menuSurface.isOpen();
      },
      set: function(value) {
        if (value) {
          this.menuSurface.open();
        } else {
          this.menuSurface.close();
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "wrapFocus", {
      get: function() {
        return this.list ? this.list.wrapFocus : false;
      },
      set: function(value) {
        if (this.list) {
          this.list.wrapFocus = value;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "hasTypeahead", {
      /**
       * Sets whether the menu has typeahead functionality.
       * @param value Whether typeahead is enabled.
       */
      set: function(value) {
        if (this.list) {
          this.list.hasTypeahead = value;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "typeaheadInProgress", {
      /**
       * @return Whether typeahead logic is currently matching some user prefix.
       */
      get: function() {
        return this.list ? this.list.typeaheadInProgress : false;
      },
      enumerable: false,
      configurable: true
    });
    MDCMenu2.prototype.typeaheadMatchItem = function(nextChar, startingIndex) {
      if (this.list) {
        return this.list.typeaheadMatchItem(nextChar, startingIndex);
      }
      return -1;
    };
    MDCMenu2.prototype.layout = function() {
      if (this.list) {
        this.list.layout();
      }
    };
    Object.defineProperty(MDCMenu2.prototype, "items", {
      /**
       * Return the items within the menu. Note that this only contains the set of elements within
       * the items container that are proper list items, and not supplemental / presentational DOM
       * elements.
       */
      get: function() {
        return this.list ? this.list.listElements : [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "singleSelection", {
      /**
       * Turns on/off the underlying list's single selection mode. Used mainly
       * by select menu.
       *
       * @param singleSelection Whether to enable single selection mode.
       */
      set: function(singleSelection) {
        if (this.list) {
          this.list.singleSelection = singleSelection;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "selectedIndex", {
      /**
       * Retrieves the selected index. Only applicable to select menus.
       * @return The selected index, which is a number for single selection and
       *     radio lists, and an array of numbers for checkbox lists.
       */
      get: function() {
        return this.list ? this.list.selectedIndex : numbers.UNSET_INDEX;
      },
      /**
       * Sets the selected index of the list. Only applicable to select menus.
       * @param index The selected index, which is a number for single selection and
       *     radio lists, and an array of numbers for checkbox lists.
       */
      set: function(index) {
        if (this.list) {
          this.list.selectedIndex = index;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCMenu2.prototype, "quickOpen", {
      set: function(quickOpen) {
        this.menuSurface.quickOpen = quickOpen;
      },
      enumerable: false,
      configurable: true
    });
    MDCMenu2.prototype.setDefaultFocusState = function(focusState) {
      this.foundation.setDefaultFocusState(focusState);
    };
    MDCMenu2.prototype.setAnchorCorner = function(corner) {
      this.menuSurface.setAnchorCorner(corner);
    };
    MDCMenu2.prototype.setAnchorMargin = function(margin) {
      this.menuSurface.setAnchorMargin(margin);
    };
    MDCMenu2.prototype.setSelectedIndex = function(index) {
      this.foundation.setSelectedIndex(index);
    };
    MDCMenu2.prototype.setEnabled = function(index, isEnabled) {
      this.foundation.setEnabled(index, isEnabled);
    };
    MDCMenu2.prototype.getOptionByIndex = function(index) {
      var items = this.items;
      if (index < items.length) {
        return this.items[index];
      } else {
        return null;
      }
    };
    MDCMenu2.prototype.getPrimaryTextAtIndex = function(index) {
      var item = this.getOptionByIndex(index);
      if (item && this.list) {
        return this.list.getPrimaryText(item) || "";
      }
      return "";
    };
    MDCMenu2.prototype.setFixedPosition = function(isFixed) {
      this.menuSurface.setFixedPosition(isFixed);
    };
    MDCMenu2.prototype.setIsHoisted = function(isHoisted) {
      this.menuSurface.setIsHoisted(isHoisted);
    };
    MDCMenu2.prototype.setAbsolutePosition = function(x, y) {
      this.menuSurface.setAbsolutePosition(x, y);
    };
    MDCMenu2.prototype.setAnchorElement = function(element) {
      this.menuSurface.anchorElement = element;
    };
    MDCMenu2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClassToElementAtIndex: function(index, className) {
          var list = _this.items;
          list[index].classList.add(className);
        },
        removeClassFromElementAtIndex: function(index, className) {
          var list = _this.items;
          list[index].classList.remove(className);
        },
        addAttributeToElementAtIndex: function(index, attr, value) {
          var list = _this.items;
          list[index].setAttribute(attr, value);
        },
        removeAttributeFromElementAtIndex: function(index, attr) {
          var list = _this.items;
          list[index].removeAttribute(attr);
        },
        getAttributeFromElementAtIndex: function(index, attr) {
          var list = _this.items;
          return list[index].getAttribute(attr);
        },
        elementContainsClass: function(element, className) {
          return element.classList.contains(className);
        },
        closeSurface: function(skipRestoreFocus) {
          _this.menuSurface.close(skipRestoreFocus);
        },
        getElementIndex: function(element) {
          return _this.items.indexOf(element);
        },
        notifySelected: function(evtData) {
          _this.emit(strings19.SELECTED_EVENT, {
            index: evtData.index,
            item: _this.items[evtData.index]
          });
        },
        getMenuItemCount: function() {
          return _this.items.length;
        },
        focusItemAtIndex: function(index) {
          _this.items[index].focus();
        },
        focusListRoot: function() {
          _this.root.querySelector(strings19.LIST_SELECTOR).focus();
        },
        isSelectableItemAtIndex: function(index) {
          return !!closest(_this.items[index], "." + cssClasses21.MENU_SELECTION_GROUP);
        },
        getSelectedSiblingOfItemAtIndex: function(index) {
          var selectionGroupEl = closest(_this.items[index], "." + cssClasses21.MENU_SELECTION_GROUP);
          var selectedItemEl = selectionGroupEl.querySelector("." + cssClasses21.MENU_SELECTED_LIST_ITEM);
          return selectedItemEl ? _this.items.indexOf(selectedItemEl) : -1;
        }
      };
      return new MDCMenuFoundation(adapter);
    };
    return MDCMenu2;
  }(MDCComponent)
);

// node_modules/@material/select/constants.js
var import_dist1036 = __toESM(require_dist());
var import_dist1037 = __toESM(require_dist2());
var import_dist1038 = __toESM(require_dist3());
var cssClasses22 = {
  ACTIVATED: "mdc-select--activated",
  DISABLED: "mdc-select--disabled",
  FOCUSED: "mdc-select--focused",
  INVALID: "mdc-select--invalid",
  MENU_INVALID: "mdc-select__menu--invalid",
  OUTLINED: "mdc-select--outlined",
  REQUIRED: "mdc-select--required",
  ROOT: "mdc-select",
  WITH_LEADING_ICON: "mdc-select--with-leading-icon"
};
var strings20 = {
  ARIA_CONTROLS: "aria-controls",
  ARIA_DESCRIBEDBY: "aria-describedby",
  ARIA_SELECTED_ATTR: "aria-selected",
  CHANGE_EVENT: "MDCSelect:change",
  HIDDEN_INPUT_SELECTOR: 'input[type="hidden"]',
  LABEL_SELECTOR: ".mdc-floating-label",
  LEADING_ICON_SELECTOR: ".mdc-select__icon",
  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
  MENU_SELECTOR: ".mdc-select__menu",
  OUTLINE_SELECTOR: ".mdc-notched-outline",
  SELECTED_TEXT_SELECTOR: ".mdc-select__selected-text",
  SELECT_ANCHOR_SELECTOR: ".mdc-select__anchor",
  VALUE_ATTR: "data-value"
};
var numbers8 = {
  LABEL_SCALE: 0.75,
  UNSET_INDEX: -1,
  CLICK_DEBOUNCE_TIMEOUT_MS: 330
};

// node_modules/@material/select/foundation.js
var import_dist1039 = __toESM(require_dist());
var import_dist1040 = __toESM(require_dist2());
var import_dist1041 = __toESM(require_dist3());
var MDCSelectFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSelectFoundation2, _super);
    function MDCSelectFoundation2(adapter, foundationMap) {
      if (foundationMap === void 0) {
        foundationMap = {};
      }
      var _this = _super.call(this, __assign(__assign({}, MDCSelectFoundation2.defaultAdapter), adapter)) || this;
      _this.disabled = false;
      _this.isMenuOpen = false;
      _this.useDefaultValidation = true;
      _this.customValidity = true;
      _this.lastSelectedIndex = numbers8.UNSET_INDEX;
      _this.clickDebounceTimeout = 0;
      _this.recentlyClicked = false;
      _this.leadingIcon = foundationMap.leadingIcon;
      _this.helperText = foundationMap.helperText;
      return _this;
    }
    Object.defineProperty(MDCSelectFoundation2, "cssClasses", {
      get: function() {
        return cssClasses22;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "numbers", {
      get: function() {
        return numbers8;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "strings", {
      get: function() {
        return strings20;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCSelectAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          activateBottomLine: function() {
            return void 0;
          },
          deactivateBottomLine: function() {
            return void 0;
          },
          getSelectedIndex: function() {
            return -1;
          },
          setSelectedIndex: function() {
            return void 0;
          },
          hasLabel: function() {
            return false;
          },
          floatLabel: function() {
            return void 0;
          },
          getLabelWidth: function() {
            return 0;
          },
          setLabelRequired: function() {
            return void 0;
          },
          hasOutline: function() {
            return false;
          },
          notchOutline: function() {
            return void 0;
          },
          closeOutline: function() {
            return void 0;
          },
          setRippleCenter: function() {
            return void 0;
          },
          notifyChange: function() {
            return void 0;
          },
          setSelectedText: function() {
            return void 0;
          },
          isSelectAnchorFocused: function() {
            return false;
          },
          getSelectAnchorAttr: function() {
            return "";
          },
          setSelectAnchorAttr: function() {
            return void 0;
          },
          removeSelectAnchorAttr: function() {
            return void 0;
          },
          addMenuClass: function() {
            return void 0;
          },
          removeMenuClass: function() {
            return void 0;
          },
          openMenu: function() {
            return void 0;
          },
          closeMenu: function() {
            return void 0;
          },
          getAnchorElement: function() {
            return null;
          },
          setMenuAnchorElement: function() {
            return void 0;
          },
          setMenuAnchorCorner: function() {
            return void 0;
          },
          setMenuWrapFocus: function() {
            return void 0;
          },
          focusMenuItemAtIndex: function() {
            return void 0;
          },
          getMenuItemCount: function() {
            return 0;
          },
          getMenuItemValues: function() {
            return [];
          },
          getMenuItemTextAtIndex: function() {
            return "";
          },
          isTypeaheadInProgress: function() {
            return false;
          },
          typeaheadMatchItem: function() {
            return -1;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectFoundation2.prototype.getSelectedIndex = function() {
      return this.adapter.getSelectedIndex();
    };
    MDCSelectFoundation2.prototype.setSelectedIndex = function(index, closeMenu, skipNotify) {
      if (closeMenu === void 0) {
        closeMenu = false;
      }
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      if (index >= this.adapter.getMenuItemCount()) {
        return;
      }
      if (index === numbers8.UNSET_INDEX) {
        this.adapter.setSelectedText("");
      } else {
        this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
      }
      this.adapter.setSelectedIndex(index);
      if (closeMenu) {
        this.adapter.closeMenu();
      }
      if (!skipNotify && this.lastSelectedIndex !== index) {
        this.handleChange();
      }
      this.lastSelectedIndex = index;
    };
    MDCSelectFoundation2.prototype.setValue = function(value, skipNotify) {
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      var index = this.adapter.getMenuItemValues().indexOf(value);
      this.setSelectedIndex(
        index,
        /** closeMenu */
        false,
        skipNotify
      );
    };
    MDCSelectFoundation2.prototype.getValue = function() {
      var index = this.adapter.getSelectedIndex();
      var menuItemValues = this.adapter.getMenuItemValues();
      return index !== numbers8.UNSET_INDEX ? menuItemValues[index] : "";
    };
    MDCSelectFoundation2.prototype.getDisabled = function() {
      return this.disabled;
    };
    MDCSelectFoundation2.prototype.setDisabled = function(isDisabled) {
      this.disabled = isDisabled;
      if (this.disabled) {
        this.adapter.addClass(cssClasses22.DISABLED);
        this.adapter.closeMenu();
      } else {
        this.adapter.removeClass(cssClasses22.DISABLED);
      }
      if (this.leadingIcon) {
        this.leadingIcon.setDisabled(this.disabled);
      }
      if (this.disabled) {
        this.adapter.removeSelectAnchorAttr("tabindex");
      } else {
        this.adapter.setSelectAnchorAttr("tabindex", "0");
      }
      this.adapter.setSelectAnchorAttr("aria-disabled", this.disabled.toString());
    };
    MDCSelectFoundation2.prototype.openMenu = function() {
      this.adapter.addClass(cssClasses22.ACTIVATED);
      this.adapter.openMenu();
      this.isMenuOpen = true;
      this.adapter.setSelectAnchorAttr("aria-expanded", "true");
    };
    MDCSelectFoundation2.prototype.setHelperTextContent = function(content) {
      if (this.helperText) {
        this.helperText.setContent(content);
      }
    };
    MDCSelectFoundation2.prototype.layout = function() {
      if (this.adapter.hasLabel()) {
        var optionHasValue = this.getValue().length > 0;
        var isFocused = this.adapter.hasClass(cssClasses22.FOCUSED);
        var shouldFloatAndNotch = optionHasValue || isFocused;
        var isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
        this.notchOutline(shouldFloatAndNotch);
        this.adapter.floatLabel(shouldFloatAndNotch);
        this.adapter.setLabelRequired(isRequired);
      }
    };
    MDCSelectFoundation2.prototype.layoutOptions = function() {
      var menuItemValues = this.adapter.getMenuItemValues();
      var selectedIndex = menuItemValues.indexOf(this.getValue());
      this.setSelectedIndex(
        selectedIndex,
        /** closeMenu */
        false,
        /** skipNotify */
        true
      );
    };
    MDCSelectFoundation2.prototype.handleMenuOpened = function() {
      if (this.adapter.getMenuItemValues().length === 0) {
        return;
      }
      var selectedIndex = this.getSelectedIndex();
      var focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
      this.adapter.focusMenuItemAtIndex(focusItemIndex);
    };
    MDCSelectFoundation2.prototype.handleMenuClosing = function() {
      this.adapter.setSelectAnchorAttr("aria-expanded", "false");
    };
    MDCSelectFoundation2.prototype.handleMenuClosed = function() {
      this.adapter.removeClass(cssClasses22.ACTIVATED);
      this.isMenuOpen = false;
      if (!this.adapter.isSelectAnchorFocused()) {
        this.blur();
      }
    };
    MDCSelectFoundation2.prototype.handleChange = function() {
      this.layout();
      this.adapter.notifyChange(this.getValue());
      var isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
      if (isRequired && this.useDefaultValidation) {
        this.setValid(this.isValid());
      }
    };
    MDCSelectFoundation2.prototype.handleMenuItemAction = function(index) {
      this.setSelectedIndex(
        index,
        /** closeMenu */
        true
      );
    };
    MDCSelectFoundation2.prototype.handleFocus = function() {
      this.adapter.addClass(cssClasses22.FOCUSED);
      this.layout();
      this.adapter.activateBottomLine();
    };
    MDCSelectFoundation2.prototype.handleBlur = function() {
      if (this.isMenuOpen) {
        return;
      }
      this.blur();
    };
    MDCSelectFoundation2.prototype.handleClick = function(normalizedX) {
      if (this.disabled || this.recentlyClicked) {
        return;
      }
      this.setClickDebounceTimeout();
      if (this.isMenuOpen) {
        this.adapter.closeMenu();
        return;
      }
      this.adapter.setRippleCenter(normalizedX);
      this.openMenu();
    };
    MDCSelectFoundation2.prototype.handleKeydown = function(event) {
      if (this.isMenuOpen || !this.adapter.hasClass(cssClasses22.FOCUSED)) {
        return;
      }
      var isEnter = normalizeKey(event) === KEY.ENTER;
      var isSpace = normalizeKey(event) === KEY.SPACEBAR;
      var arrowUp = normalizeKey(event) === KEY.ARROW_UP;
      var arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
      var isModifier = event.ctrlKey || event.metaKey;
      if (!isModifier && (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress())) {
        var key = isSpace ? " " : event.key;
        var typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
        if (typeaheadNextIndex >= 0) {
          this.setSelectedIndex(typeaheadNextIndex);
        }
        event.preventDefault();
        return;
      }
      if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
        return;
      }
      this.openMenu();
      event.preventDefault();
    };
    MDCSelectFoundation2.prototype.notchOutline = function(openNotch) {
      if (!this.adapter.hasOutline()) {
        return;
      }
      var isFocused = this.adapter.hasClass(cssClasses22.FOCUSED);
      if (openNotch) {
        var labelScale = numbers8.LABEL_SCALE;
        var labelWidth = this.adapter.getLabelWidth() * labelScale;
        this.adapter.notchOutline(labelWidth);
      } else if (!isFocused) {
        this.adapter.closeOutline();
      }
    };
    MDCSelectFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
      if (this.leadingIcon) {
        this.leadingIcon.setAriaLabel(label);
      }
    };
    MDCSelectFoundation2.prototype.setLeadingIconContent = function(content) {
      if (this.leadingIcon) {
        this.leadingIcon.setContent(content);
      }
    };
    MDCSelectFoundation2.prototype.getUseDefaultValidation = function() {
      return this.useDefaultValidation;
    };
    MDCSelectFoundation2.prototype.setUseDefaultValidation = function(useDefaultValidation) {
      this.useDefaultValidation = useDefaultValidation;
    };
    MDCSelectFoundation2.prototype.setValid = function(isValid) {
      if (!this.useDefaultValidation) {
        this.customValidity = isValid;
      }
      this.adapter.setSelectAnchorAttr("aria-invalid", (!isValid).toString());
      if (isValid) {
        this.adapter.removeClass(cssClasses22.INVALID);
        this.adapter.removeMenuClass(cssClasses22.MENU_INVALID);
      } else {
        this.adapter.addClass(cssClasses22.INVALID);
        this.adapter.addMenuClass(cssClasses22.MENU_INVALID);
      }
      this.syncHelperTextValidity(isValid);
    };
    MDCSelectFoundation2.prototype.isValid = function() {
      if (this.useDefaultValidation && this.adapter.hasClass(cssClasses22.REQUIRED) && !this.adapter.hasClass(cssClasses22.DISABLED)) {
        return this.getSelectedIndex() !== numbers8.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
      }
      return this.customValidity;
    };
    MDCSelectFoundation2.prototype.setRequired = function(isRequired) {
      if (isRequired) {
        this.adapter.addClass(cssClasses22.REQUIRED);
      } else {
        this.adapter.removeClass(cssClasses22.REQUIRED);
      }
      this.adapter.setSelectAnchorAttr("aria-required", isRequired.toString());
      this.adapter.setLabelRequired(isRequired);
    };
    MDCSelectFoundation2.prototype.getRequired = function() {
      return this.adapter.getSelectAnchorAttr("aria-required") === "true";
    };
    MDCSelectFoundation2.prototype.init = function() {
      var anchorEl = this.adapter.getAnchorElement();
      if (anchorEl) {
        this.adapter.setMenuAnchorElement(anchorEl);
        this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
      }
      this.adapter.setMenuWrapFocus(false);
      this.setDisabled(this.adapter.hasClass(cssClasses22.DISABLED));
      this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses22.INVALID));
      this.layout();
      this.layoutOptions();
    };
    MDCSelectFoundation2.prototype.blur = function() {
      this.adapter.removeClass(cssClasses22.FOCUSED);
      this.layout();
      this.adapter.deactivateBottomLine();
      var isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
      if (isRequired && this.useDefaultValidation) {
        this.setValid(this.isValid());
      }
    };
    MDCSelectFoundation2.prototype.syncHelperTextValidity = function(isValid) {
      if (!this.helperText) {
        return;
      }
      this.helperText.setValidity(isValid);
      var helperTextVisible = this.helperText.isVisible();
      var helperTextId = this.helperText.getId();
      if (helperTextVisible && helperTextId) {
        this.adapter.setSelectAnchorAttr(strings20.ARIA_DESCRIBEDBY, helperTextId);
      } else {
        this.adapter.removeSelectAnchorAttr(strings20.ARIA_DESCRIBEDBY);
      }
    };
    MDCSelectFoundation2.prototype.setClickDebounceTimeout = function() {
      var _this = this;
      clearTimeout(this.clickDebounceTimeout);
      this.clickDebounceTimeout = setTimeout(function() {
        _this.recentlyClicked = false;
      }, numbers8.CLICK_DEBOUNCE_TIMEOUT_MS);
      this.recentlyClicked = true;
    };
    return MDCSelectFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/select/helper-text/component.js
var import_dist1048 = __toESM(require_dist());
var import_dist1049 = __toESM(require_dist2());
var import_dist1050 = __toESM(require_dist3());

// node_modules/@material/select/helper-text/foundation.js
var import_dist1045 = __toESM(require_dist());
var import_dist1046 = __toESM(require_dist2());
var import_dist1047 = __toESM(require_dist3());

// node_modules/@material/select/helper-text/constants.js
var import_dist1042 = __toESM(require_dist());
var import_dist1043 = __toESM(require_dist2());
var import_dist1044 = __toESM(require_dist3());
var strings21 = {
  ARIA_HIDDEN: "aria-hidden",
  ROLE: "role"
};
var cssClasses23 = {
  HELPER_TEXT_VALIDATION_MSG: "mdc-select-helper-text--validation-msg",
  HELPER_TEXT_VALIDATION_MSG_PERSISTENT: "mdc-select-helper-text--validation-msg-persistent"
};

// node_modules/@material/select/helper-text/foundation.js
var MDCSelectHelperTextFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSelectHelperTextFoundation2, _super);
    function MDCSelectHelperTextFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCSelectHelperTextFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSelectHelperTextFoundation2, "cssClasses", {
      get: function() {
        return cssClasses23;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation2, "strings", {
      get: function() {
        return strings21;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectHelperTextFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCSelectHelperTextAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          setAttr: function() {
            return void 0;
          },
          getAttr: function() {
            return null;
          },
          removeAttr: function() {
            return void 0;
          },
          setContent: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectHelperTextFoundation2.prototype.getId = function() {
      return this.adapter.getAttr("id");
    };
    MDCSelectHelperTextFoundation2.prototype.isVisible = function() {
      return this.adapter.getAttr(strings21.ARIA_HIDDEN) !== "true";
    };
    MDCSelectHelperTextFoundation2.prototype.setContent = function(content) {
      this.adapter.setContent(content);
    };
    MDCSelectHelperTextFoundation2.prototype.setValidation = function(isValidation) {
      if (isValidation) {
        this.adapter.addClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG);
      } else {
        this.adapter.removeClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG);
      }
    };
    MDCSelectHelperTextFoundation2.prototype.setValidationMsgPersistent = function(isPersistent) {
      if (isPersistent) {
        this.adapter.addClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      } else {
        this.adapter.removeClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      }
    };
    MDCSelectHelperTextFoundation2.prototype.getIsValidation = function() {
      return this.adapter.hasClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG);
    };
    MDCSelectHelperTextFoundation2.prototype.getIsValidationMsgPersistent = function() {
      return this.adapter.hasClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
    };
    MDCSelectHelperTextFoundation2.prototype.setValidity = function(selectIsValid) {
      var isValidationMsg = this.adapter.hasClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG);
      if (!isValidationMsg) {
        return;
      }
      var isPersistentValidationMsg = this.adapter.hasClass(cssClasses23.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);
      var msgShouldDisplay = !selectIsValid || isPersistentValidationMsg;
      if (msgShouldDisplay) {
        this.showToScreenReader();
        if (!selectIsValid) {
          this.adapter.setAttr(strings21.ROLE, "alert");
        } else {
          this.adapter.removeAttr(strings21.ROLE);
        }
        return;
      }
      this.adapter.removeAttr(strings21.ROLE);
      this.hide();
    };
    MDCSelectHelperTextFoundation2.prototype.showToScreenReader = function() {
      this.adapter.removeAttr(strings21.ARIA_HIDDEN);
    };
    MDCSelectHelperTextFoundation2.prototype.hide = function() {
      this.adapter.setAttr(strings21.ARIA_HIDDEN, "true");
    };
    return MDCSelectHelperTextFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/select/helper-text/component.js
var MDCSelectHelperText = (
  /** @class */
  function(_super) {
    __extends(MDCSelectHelperText2, _super);
    function MDCSelectHelperText2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelectHelperText2.attachTo = function(root) {
      return new MDCSelectHelperText2(root);
    };
    Object.defineProperty(MDCSelectHelperText2.prototype, "foundationForSelect", {
      // Provided for access by MDCSelect component
      get: function() {
        return this.foundation;
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectHelperText2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        getAttr: function(attr) {
          return _this.root.getAttribute(attr);
        },
        setAttr: function(attr, value) {
          return _this.root.setAttribute(attr, value);
        },
        removeAttr: function(attr) {
          return _this.root.removeAttribute(attr);
        },
        setContent: function(content) {
          _this.root.textContent = content;
        }
      };
      return new MDCSelectHelperTextFoundation(adapter);
    };
    return MDCSelectHelperText2;
  }(MDCComponent)
);

// node_modules/@material/select/icon/component.js
var import_dist1057 = __toESM(require_dist());
var import_dist1058 = __toESM(require_dist2());
var import_dist1059 = __toESM(require_dist3());

// node_modules/@material/select/icon/foundation.js
var import_dist1054 = __toESM(require_dist());
var import_dist1055 = __toESM(require_dist2());
var import_dist1056 = __toESM(require_dist3());

// node_modules/@material/select/icon/constants.js
var import_dist1051 = __toESM(require_dist());
var import_dist1052 = __toESM(require_dist2());
var import_dist1053 = __toESM(require_dist3());
var strings22 = {
  ICON_EVENT: "MDCSelect:icon",
  ICON_ROLE: "button"
};

// node_modules/@material/select/icon/foundation.js
var INTERACTION_EVENTS = ["click", "keydown"];
var MDCSelectIconFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSelectIconFoundation2, _super);
    function MDCSelectIconFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCSelectIconFoundation2.defaultAdapter), adapter)) || this;
      _this.savedTabIndex = null;
      _this.interactionHandler = function(evt) {
        _this.handleInteraction(evt);
      };
      return _this;
    }
    Object.defineProperty(MDCSelectIconFoundation2, "strings", {
      get: function() {
        return strings22;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelectIconFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCSelectIconAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          getAttr: function() {
            return null;
          },
          setAttr: function() {
            return void 0;
          },
          removeAttr: function() {
            return void 0;
          },
          setContent: function() {
            return void 0;
          },
          registerInteractionHandler: function() {
            return void 0;
          },
          deregisterInteractionHandler: function() {
            return void 0;
          },
          notifyIconAction: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectIconFoundation2.prototype.init = function() {
      var e_1, _a2;
      this.savedTabIndex = this.adapter.getAttr("tabindex");
      try {
        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
          var evtType = INTERACTION_EVENTS_1_1.value;
          this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a2 = INTERACTION_EVENTS_1.return)) _a2.call(INTERACTION_EVENTS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    MDCSelectIconFoundation2.prototype.destroy = function() {
      var e_2, _a2;
      try {
        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
          var evtType = INTERACTION_EVENTS_2_1.value;
          this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a2 = INTERACTION_EVENTS_2.return)) _a2.call(INTERACTION_EVENTS_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    };
    MDCSelectIconFoundation2.prototype.setDisabled = function(disabled) {
      if (!this.savedTabIndex) {
        return;
      }
      if (disabled) {
        this.adapter.setAttr("tabindex", "-1");
        this.adapter.removeAttr("role");
      } else {
        this.adapter.setAttr("tabindex", this.savedTabIndex);
        this.adapter.setAttr("role", strings22.ICON_ROLE);
      }
    };
    MDCSelectIconFoundation2.prototype.setAriaLabel = function(label) {
      this.adapter.setAttr("aria-label", label);
    };
    MDCSelectIconFoundation2.prototype.setContent = function(content) {
      this.adapter.setContent(content);
    };
    MDCSelectIconFoundation2.prototype.handleInteraction = function(evt) {
      var isEnterKey = evt.key === "Enter" || evt.keyCode === 13;
      if (evt.type === "click" || isEnterKey) {
        this.adapter.notifyIconAction();
      }
    };
    return MDCSelectIconFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/select/icon/component.js
var MDCSelectIcon = (
  /** @class */
  function(_super) {
    __extends(MDCSelectIcon2, _super);
    function MDCSelectIcon2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelectIcon2.attachTo = function(root) {
      return new MDCSelectIcon2(root);
    };
    Object.defineProperty(MDCSelectIcon2.prototype, "foundationForSelect", {
      // Provided for access by MDCSelect component
      get: function() {
        return this.foundation;
      },
      enumerable: false,
      configurable: true
    });
    MDCSelectIcon2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        getAttr: function(attr) {
          return _this.root.getAttribute(attr);
        },
        setAttr: function(attr, value) {
          return _this.root.setAttribute(attr, value);
        },
        removeAttr: function(attr) {
          return _this.root.removeAttribute(attr);
        },
        setContent: function(content) {
          _this.root.textContent = content;
        },
        registerInteractionHandler: function(evtType, handler) {
          return _this.listen(evtType, handler);
        },
        deregisterInteractionHandler: function(evtType, handler) {
          return _this.unlisten(evtType, handler);
        },
        notifyIconAction: function() {
          return _this.emit(
            MDCSelectIconFoundation.strings.ICON_EVENT,
            {},
            true
            /* shouldBubble */
          );
        }
      };
      return new MDCSelectIconFoundation(adapter);
    };
    return MDCSelectIcon2;
  }(MDCComponent)
);

// node_modules/@material/select/component.js
var MDCSelect = (
  /** @class */
  function(_super) {
    __extends(MDCSelect2, _super);
    function MDCSelect2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSelect2.attachTo = function(root) {
      return new MDCSelect2(root);
    };
    MDCSelect2.prototype.initialize = function(labelFactory, lineRippleFactory, outlineFactory, menuFactory, iconFactory, helperTextFactory) {
      if (labelFactory === void 0) {
        labelFactory = function(el) {
          return new MDCFloatingLabel(el);
        };
      }
      if (lineRippleFactory === void 0) {
        lineRippleFactory = function(el) {
          return new MDCLineRipple(el);
        };
      }
      if (outlineFactory === void 0) {
        outlineFactory = function(el) {
          return new MDCNotchedOutline(el);
        };
      }
      if (menuFactory === void 0) {
        menuFactory = function(el) {
          return new MDCMenu(el);
        };
      }
      if (iconFactory === void 0) {
        iconFactory = function(el) {
          return new MDCSelectIcon(el);
        };
      }
      if (helperTextFactory === void 0) {
        helperTextFactory = function(el) {
          return new MDCSelectHelperText(el);
        };
      }
      this.selectAnchor = this.root.querySelector(strings20.SELECT_ANCHOR_SELECTOR);
      this.selectedText = this.root.querySelector(strings20.SELECTED_TEXT_SELECTOR);
      this.hiddenInput = this.root.querySelector(strings20.HIDDEN_INPUT_SELECTOR);
      if (!this.selectedText) {
        throw new Error("MDCSelect: Missing required element: The following selector must be present: " + ("'" + strings20.SELECTED_TEXT_SELECTOR + "'"));
      }
      if (this.selectAnchor.hasAttribute(strings20.ARIA_CONTROLS)) {
        var helperTextElement = document.getElementById(this.selectAnchor.getAttribute(strings20.ARIA_CONTROLS));
        if (helperTextElement) {
          this.helperText = helperTextFactory(helperTextElement);
        }
      }
      this.menuSetup(menuFactory);
      var labelElement = this.root.querySelector(strings20.LABEL_SELECTOR);
      this.label = labelElement ? labelFactory(labelElement) : null;
      var lineRippleElement = this.root.querySelector(strings20.LINE_RIPPLE_SELECTOR);
      this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
      var outlineElement = this.root.querySelector(strings20.OUTLINE_SELECTOR);
      this.outline = outlineElement ? outlineFactory(outlineElement) : null;
      var leadingIcon = this.root.querySelector(strings20.LEADING_ICON_SELECTOR);
      if (leadingIcon) {
        this.leadingIcon = iconFactory(leadingIcon);
      }
      if (!this.root.classList.contains(cssClasses22.OUTLINED)) {
        this.ripple = this.createRipple();
      }
    };
    MDCSelect2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleFocus = function() {
        _this.foundation.handleFocus();
      };
      this.handleBlur = function() {
        _this.foundation.handleBlur();
      };
      this.handleClick = function(evt) {
        _this.selectAnchor.focus();
        _this.foundation.handleClick(_this.getNormalizedXCoordinate(evt));
      };
      this.handleKeydown = function(evt) {
        _this.foundation.handleKeydown(evt);
      };
      this.handleMenuItemAction = function(evt) {
        _this.foundation.handleMenuItemAction(evt.detail.index);
      };
      this.handleMenuOpened = function() {
        _this.foundation.handleMenuOpened();
      };
      this.handleMenuClosed = function() {
        _this.foundation.handleMenuClosed();
      };
      this.handleMenuClosing = function() {
        _this.foundation.handleMenuClosing();
      };
      this.selectAnchor.addEventListener("focus", this.handleFocus);
      this.selectAnchor.addEventListener("blur", this.handleBlur);
      this.selectAnchor.addEventListener("click", this.handleClick);
      this.selectAnchor.addEventListener("keydown", this.handleKeydown);
      this.menu.listen(strings18.CLOSED_EVENT, this.handleMenuClosed);
      this.menu.listen(strings18.CLOSING_EVENT, this.handleMenuClosing);
      this.menu.listen(strings18.OPENED_EVENT, this.handleMenuOpened);
      this.menu.listen(strings19.SELECTED_EVENT, this.handleMenuItemAction);
      if (this.hiddenInput) {
        if (this.hiddenInput.value) {
          this.foundation.setValue(
            this.hiddenInput.value,
            /** skipNotify */
            true
          );
          this.foundation.layout();
          return;
        }
        this.hiddenInput.value = this.value;
      }
    };
    MDCSelect2.prototype.destroy = function() {
      this.selectAnchor.removeEventListener("focus", this.handleFocus);
      this.selectAnchor.removeEventListener("blur", this.handleBlur);
      this.selectAnchor.removeEventListener("keydown", this.handleKeydown);
      this.selectAnchor.removeEventListener("click", this.handleClick);
      this.menu.unlisten(strings18.CLOSED_EVENT, this.handleMenuClosed);
      this.menu.unlisten(strings18.OPENED_EVENT, this.handleMenuOpened);
      this.menu.unlisten(strings19.SELECTED_EVENT, this.handleMenuItemAction);
      this.menu.destroy();
      if (this.ripple) {
        this.ripple.destroy();
      }
      if (this.outline) {
        this.outline.destroy();
      }
      if (this.leadingIcon) {
        this.leadingIcon.destroy();
      }
      if (this.helperText) {
        this.helperText.destroy();
      }
      _super.prototype.destroy.call(this);
    };
    Object.defineProperty(MDCSelect2.prototype, "value", {
      get: function() {
        return this.foundation.getValue();
      },
      set: function(value) {
        this.foundation.setValue(value);
      },
      enumerable: false,
      configurable: true
    });
    MDCSelect2.prototype.setValue = function(value, skipNotify) {
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      this.foundation.setValue(value, skipNotify);
    };
    Object.defineProperty(MDCSelect2.prototype, "selectedIndex", {
      get: function() {
        return this.foundation.getSelectedIndex();
      },
      set: function(selectedIndex) {
        this.foundation.setSelectedIndex(
          selectedIndex,
          /* closeMenu */
          true
        );
      },
      enumerable: false,
      configurable: true
    });
    MDCSelect2.prototype.setSelectedIndex = function(selectedIndex, skipNotify) {
      if (skipNotify === void 0) {
        skipNotify = false;
      }
      this.foundation.setSelectedIndex(
        selectedIndex,
        /* closeMenu */
        true,
        skipNotify
      );
    };
    Object.defineProperty(MDCSelect2.prototype, "disabled", {
      get: function() {
        return this.foundation.getDisabled();
      },
      set: function(disabled) {
        this.foundation.setDisabled(disabled);
        if (this.hiddenInput) {
          this.hiddenInput.disabled = disabled;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "leadingIconAriaLabel", {
      set: function(label) {
        this.foundation.setLeadingIconAriaLabel(label);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "leadingIconContent", {
      /**
       * Sets the text content of the leading icon.
       */
      set: function(content) {
        this.foundation.setLeadingIconContent(content);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "helperTextContent", {
      /**
       * Sets the text content of the helper text.
       */
      set: function(content) {
        this.foundation.setHelperTextContent(content);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "useDefaultValidation", {
      /**
       * Enables or disables the default validation scheme where a required select
       * must be non-empty. Set to false for custom validation.
       * @param useDefaultValidation Set this to false to ignore default
       *     validation scheme.
       */
      set: function(useDefaultValidation) {
        this.foundation.setUseDefaultValidation(useDefaultValidation);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "valid", {
      /**
       * Checks if the select is in a valid state.
       */
      get: function() {
        return this.foundation.isValid();
      },
      /**
       * Sets the current invalid state of the select.
       */
      set: function(isValid) {
        this.foundation.setValid(isValid);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSelect2.prototype, "required", {
      /**
       * Returns whether the select is required.
       */
      get: function() {
        return this.foundation.getRequired();
      },
      /**
       * Sets the control to the required state.
       */
      set: function(isRequired) {
        this.foundation.setRequired(isRequired);
      },
      enumerable: false,
      configurable: true
    });
    MDCSelect2.prototype.layout = function() {
      this.foundation.layout();
    };
    MDCSelect2.prototype.layoutOptions = function() {
      this.foundation.layoutOptions();
      this.menu.layout();
      this.menuItemValues = this.menu.items.map(function(el) {
        return el.getAttribute(strings20.VALUE_ATTR) || "";
      });
      if (this.hiddenInput) {
        this.hiddenInput.value = this.value;
      }
    };
    MDCSelect2.prototype.getDefaultFoundation = function() {
      var adapter = __assign(__assign(__assign(__assign({}, this.getSelectAdapterMethods()), this.getCommonAdapterMethods()), this.getOutlineAdapterMethods()), this.getLabelAdapterMethods());
      return new MDCSelectFoundation(adapter, this.getFoundationMap());
    };
    MDCSelect2.prototype.menuSetup = function(menuFactory) {
      this.menuElement = this.root.querySelector(strings20.MENU_SELECTOR);
      this.menu = menuFactory(this.menuElement);
      this.menu.hasTypeahead = true;
      this.menu.singleSelection = true;
      this.menuItemValues = this.menu.items.map(function(el) {
        return el.getAttribute(strings20.VALUE_ATTR) || "";
      });
    };
    MDCSelect2.prototype.createRipple = function() {
      var _this = this;
      var adapter = __assign(__assign({}, MDCRipple.createAdapter({ root: this.selectAnchor })), { registerInteractionHandler: function(evtType, handler) {
        _this.selectAnchor.addEventListener(evtType, handler);
      }, deregisterInteractionHandler: function(evtType, handler) {
        _this.selectAnchor.removeEventListener(evtType, handler);
      } });
      return new MDCRipple(this.selectAnchor, new MDCRippleFoundation(adapter));
    };
    MDCSelect2.prototype.getSelectAdapterMethods = function() {
      var _this = this;
      return {
        getMenuItemAttr: function(menuItem, attr) {
          return menuItem.getAttribute(attr);
        },
        setSelectedText: function(text) {
          _this.selectedText.textContent = text;
        },
        isSelectAnchorFocused: function() {
          return document.activeElement === _this.selectAnchor;
        },
        getSelectAnchorAttr: function(attr) {
          return _this.selectAnchor.getAttribute(attr);
        },
        setSelectAnchorAttr: function(attr, value) {
          _this.selectAnchor.setAttribute(attr, value);
        },
        removeSelectAnchorAttr: function(attr) {
          _this.selectAnchor.removeAttribute(attr);
        },
        addMenuClass: function(className) {
          _this.menuElement.classList.add(className);
        },
        removeMenuClass: function(className) {
          _this.menuElement.classList.remove(className);
        },
        openMenu: function() {
          _this.menu.open = true;
        },
        closeMenu: function() {
          _this.menu.open = false;
        },
        getAnchorElement: function() {
          return _this.root.querySelector(strings20.SELECT_ANCHOR_SELECTOR);
        },
        setMenuAnchorElement: function(anchorEl) {
          _this.menu.setAnchorElement(anchorEl);
        },
        setMenuAnchorCorner: function(anchorCorner) {
          _this.menu.setAnchorCorner(anchorCorner);
        },
        setMenuWrapFocus: function(wrapFocus) {
          _this.menu.wrapFocus = wrapFocus;
        },
        getSelectedIndex: function() {
          var index = _this.menu.selectedIndex;
          return index instanceof Array ? index[0] : index;
        },
        setSelectedIndex: function(index) {
          _this.menu.selectedIndex = index;
        },
        focusMenuItemAtIndex: function(index) {
          _this.menu.items[index].focus();
        },
        getMenuItemCount: function() {
          return _this.menu.items.length;
        },
        // Cache menu item values. layoutOptions() updates this cache.
        getMenuItemValues: function() {
          return _this.menuItemValues;
        },
        getMenuItemTextAtIndex: function(index) {
          return _this.menu.getPrimaryTextAtIndex(index);
        },
        isTypeaheadInProgress: function() {
          return _this.menu.typeaheadInProgress;
        },
        typeaheadMatchItem: function(nextChar, startingIndex) {
          return _this.menu.typeaheadMatchItem(nextChar, startingIndex);
        }
      };
    };
    MDCSelect2.prototype.getCommonAdapterMethods = function() {
      var _this = this;
      return {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        setRippleCenter: function(normalizedX) {
          _this.lineRipple && _this.lineRipple.setRippleCenter(normalizedX);
        },
        activateBottomLine: function() {
          _this.lineRipple && _this.lineRipple.activate();
        },
        deactivateBottomLine: function() {
          _this.lineRipple && _this.lineRipple.deactivate();
        },
        notifyChange: function(value) {
          if (_this.hiddenInput) {
            _this.hiddenInput.value = value;
          }
          var index = _this.selectedIndex;
          _this.emit(
            strings20.CHANGE_EVENT,
            { value, index },
            true
            /* shouldBubble  */
          );
        }
      };
    };
    MDCSelect2.prototype.getOutlineAdapterMethods = function() {
      var _this = this;
      return {
        hasOutline: function() {
          return Boolean(_this.outline);
        },
        notchOutline: function(labelWidth) {
          _this.outline && _this.outline.notch(labelWidth);
        },
        closeOutline: function() {
          _this.outline && _this.outline.closeNotch();
        }
      };
    };
    MDCSelect2.prototype.getLabelAdapterMethods = function() {
      var _this = this;
      return {
        hasLabel: function() {
          return !!_this.label;
        },
        floatLabel: function(shouldFloat) {
          _this.label && _this.label.float(shouldFloat);
        },
        getLabelWidth: function() {
          return _this.label ? _this.label.getWidth() : 0;
        },
        setLabelRequired: function(isRequired) {
          _this.label && _this.label.setRequired(isRequired);
        }
      };
    };
    MDCSelect2.prototype.getNormalizedXCoordinate = function(evt) {
      var targetClientRect = evt.target.getBoundingClientRect();
      var xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
      return xCoordinate - targetClientRect.left;
    };
    MDCSelect2.prototype.isTouchEvent = function(evt) {
      return Boolean(evt.touches);
    };
    MDCSelect2.prototype.getFoundationMap = function() {
      return {
        helperText: this.helperText ? this.helperText.foundationForSelect : void 0,
        leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForSelect : void 0
      };
    };
    return MDCSelect2;
  }(MDCComponent)
);

// node_modules/@material/select/types.js
var import_dist1063 = __toESM(require_dist());
var import_dist1064 = __toESM(require_dist2());
var import_dist1065 = __toESM(require_dist3());

// node_modules/@material/select/helper-text/index.js
var import_dist1069 = __toESM(require_dist());
var import_dist1070 = __toESM(require_dist2());
var import_dist1071 = __toESM(require_dist3());

// node_modules/@material/select/helper-text/adapter.js
var import_dist1066 = __toESM(require_dist());
var import_dist1067 = __toESM(require_dist2());
var import_dist1068 = __toESM(require_dist3());

// node_modules/@material/select/icon/index.js
var import_dist1075 = __toESM(require_dist());
var import_dist1076 = __toESM(require_dist2());
var import_dist1077 = __toESM(require_dist3());

// node_modules/@material/select/icon/adapter.js
var import_dist1072 = __toESM(require_dist());
var import_dist1073 = __toESM(require_dist2());
var import_dist1074 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/dist/mdc-select.js
var import_dist1114 = __toESM(require_dist());
var import_dist1115 = __toESM(require_dist2());
var import_dist1116 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1099 = __toESM(require_dist());
var import_dist1100 = __toESM(require_dist2());
var import_dist1101 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1084 = __toESM(require_dist());
var import_dist1085 = __toESM(require_dist2());
var import_dist1086 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1081 = __toESM(require_dist());
var import_dist1082 = __toESM(require_dist2());
var import_dist1083 = __toESM(require_dist3());
function booleanAttr20(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap20 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr20 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr20 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr20 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1087 = __toESM(require_dist());
var import_dist1088 = __toESM(require_dist2());
var import_dist1089 = __toESM(require_dist3());
var MdcPromisifyReference20 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1090 = __toESM(require_dist());
var import_dist1091 = __toESM(require_dist2());
var import_dist1092 = __toESM(require_dist3());
var MdcComponent20 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1093 = __toESM(require_dist());
var import_dist1094 = __toESM(require_dist2());
var import_dist1095 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1096 = __toESM(require_dist());
var import_dist1097 = __toESM(require_dist2());
var import_dist1098 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-icon.js
var import_dist1102 = __toESM(require_dist());
var import_dist1103 = __toESM(require_dist2());
var import_dist1104 = __toESM(require_dist3());
var mdcIconStrings = {
  ATTRIBUTE: "mdc-select-icon"
};
var MdcSelectIcon = (() => {
  let _classDecorators = [inject(Element), customAttribute(mdcIconStrings.ATTRIBUTE)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent20;
  var MdcSelectIcon2 = _classThis = class extends _classSuper {
    attaching() {
      this.root.classList.add(strings20.LEADING_ICON_SELECTOR.replace(".", ""));
    }
    getDefaultFoundation() {
      const adapter = {
        getAttr: (attr) => this.root.getAttribute(attr),
        setAttr: (attr, value) => this.root.setAttribute(attr, value),
        removeAttr: (attr) => this.root.removeAttribute(attr),
        setContent: (content) => {
          this.root.textContent = content;
        },
        registerInteractionHandler: (evtType, handler) => this.listen(evtType, handler),
        deregisterInteractionHandler: (evtType, handler) => this.unlisten(evtType, handler),
        notifyIconAction: () => this.emit(
          MDCSelectIconFoundation.strings.ICON_EVENT,
          {},
          true
          /* shouldBubble */
        )
      };
      return new MDCSelectIconFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcSelectIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSelectIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSelectIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-helper-text/mdc-select-helper-text.js
var import_dist1105 = __toESM(require_dist());
var import_dist1106 = __toESM(require_dist2());
var import_dist1107 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-helper-text/mdc-select-helper-text.html?raw
var mdc_select_helper_text_default = '<!-- DO NOT FORMAT THIS FILE! ANY SPACE BEFORE <SLOT> OR <SPAN> BREAKS HELPER TEXT ALIGNMENT! -->\n<!-- beautify ignore:start -->\n<template class="\n    ${ROOT} ${persistent ? helperTextCssClasses.HELPER_TEXT_VALIDATION_MSG_PERSISTENT : \'\'}\n    ${validation ? helperTextCssClasses.HELPER_TEXT_VALIDATION_MSG : \'\'}"><au-slot></au-slot><span class="mdc-select-helper-text__error" repeat.for="e of errors">${e}<br/></span>\n</template>\n<!-- beautify ignore:end -->\n';

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-helper-text/mdc-select-helper-text.js
var mdcHelperTextCssClasses = {
  ROOT: "mdc-select-helper-text"
};
var MdcSelectHelperText = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-select-helper-text", template: mdc_select_helper_text_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent20;
  let _persistent_decorators;
  let _persistent_initializers = [];
  let _persistent_extraInitializers = [];
  let _validation_decorators;
  let _validation_initializers = [];
  let _validation_extraInitializers = [];
  let _errors_decorators;
  let _errors_initializers = [];
  let _errors_extraInitializers = [];
  var MdcSelectHelperText2 = _classThis = class extends _classSuper {
    constructor() {
      super(...arguments);
      this.helperTextCssClasses = cssClasses23;
      this.ROOT = mdcHelperTextCssClasses.ROOT;
      this.persistent = __runInitializers(this, _persistent_initializers, void 0);
      this.validation = (__runInitializers(this, _persistent_extraInitializers), __runInitializers(this, _validation_initializers, void 0));
      this.errors = (__runInitializers(this, _validation_extraInitializers), __runInitializers(this, _errors_initializers, void 0));
      this.attachedPromise = (__runInitializers(this, _errors_extraInitializers), this.createAttachedPromise());
    }
    async createAttachedPromise() {
      return new Promise((r) => this.attachedPromiseResolve = r);
    }
    attached() {
      this.attachedPromiseResolve();
    }
    detached() {
      this.attachedPromise = this.createAttachedPromise();
    }
    // Provided for access by MDCTextField component
    get foundationForTextField() {
      return this.foundation;
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        getAttr: (attr) => this.root.getAttribute(attr),
        setAttr: (attr, value) => this.root.setAttribute(attr, value),
        removeAttr: (attr) => this.root.removeAttribute(attr),
        setContent: (content) => {
          this.root.textContent = content;
        }
      };
      return new MDCSelectHelperTextFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcSelectHelperText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _persistent_decorators = [bindable({ set: booleanAttr20 })];
    _validation_decorators = [bindable({ set: booleanAttr20 })];
    _errors_decorators = [bindable()];
    __esDecorate(null, null, _persistent_decorators, { kind: "field", name: "persistent", static: false, private: false, access: { has: (obj) => "persistent" in obj, get: (obj) => obj.persistent, set: (obj, value) => {
      obj.persistent = value;
    } }, metadata: _metadata }, _persistent_initializers, _persistent_extraInitializers);
    __esDecorate(null, null, _validation_decorators, { kind: "field", name: "validation", static: false, private: false, access: { has: (obj) => "validation" in obj, get: (obj) => obj.validation, set: (obj, value) => {
      obj.validation = value;
    } }, metadata: _metadata }, _validation_initializers, _validation_extraInitializers);
    __esDecorate(null, null, _errors_decorators, { kind: "field", name: "errors", static: false, private: false, access: { has: (obj) => "errors" in obj, get: (obj) => obj.errors, set: (obj, value) => {
      obj.errors = value;
    } }, metadata: _metadata }, _errors_initializers, _errors_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSelectHelperText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSelectHelperText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-foundation-aurelia.js
var import_dist1108 = __toESM(require_dist());
var import_dist1109 = __toESM(require_dist2());
var import_dist1110 = __toESM(require_dist3());
var MDCSelectFoundationAurelia = class _MDCSelectFoundationAurelia extends MDCFoundation {
  static get cssClasses() {
    return cssClasses22;
  }
  static get numbers() {
    return numbers8;
  }
  static get strings() {
    return strings20;
  }
  /**
   * See {@link MDCSelectAdapter} for typing information on parameters and return types.
   */
  static get defaultAdapter() {
    return {
      addClass: () => void 0,
      removeClass: () => void 0,
      hasClass: () => false,
      activateBottomLine: () => void 0,
      deactivateBottomLine: () => void 0,
      getSelectedIndex: () => -1,
      setSelectedIndex: () => void 0,
      hasLabel: () => false,
      floatLabel: () => void 0,
      getLabelWidth: () => 0,
      setLabelRequired: () => void 0,
      hasOutline: () => false,
      notchOutline: () => void 0,
      closeOutline: () => void 0,
      setRippleCenter: () => void 0,
      notifyChange: () => void 0,
      setSelectedText: () => void 0,
      isSelectAnchorFocused: () => false,
      getSelectAnchorAttr: () => "",
      setSelectAnchorAttr: () => void 0,
      removeSelectAnchorAttr: () => void 0,
      addMenuClass: () => void 0,
      removeMenuClass: () => void 0,
      openMenu: () => void 0,
      closeMenu: () => void 0,
      getAnchorElement: () => null,
      setMenuAnchorElement: () => void 0,
      setMenuAnchorCorner: () => void 0,
      setMenuWrapFocus: () => void 0,
      focusMenuItemAtIndex: () => void 0,
      getMenuItemCount: () => 0,
      getMenuItemValues: () => [],
      getMenuItemTextAtIndex: () => "",
      isTypeaheadInProgress: () => false,
      typeaheadMatchItem: () => -1
    };
  }
  /* istanbul ignore next: optional argument is not a branch statement */
  /**
   * @param adapter
   * @param foundationMap Map from subcomponent names to their subfoundations.
   */
  constructor(adapter, foundationMap = {}) {
    super({ ..._MDCSelectFoundationAurelia.defaultAdapter, ...adapter });
    this.disabled = false;
    this.isMenuOpen = false;
    this.useDefaultValidation = true;
    this.customValidity = true;
    this.lastSelectedIndex = numbers8.UNSET_INDEX;
    this.leadingIcon = foundationMap.leadingIcon;
    this.helperText = foundationMap.helperText;
  }
  /** Returns the index of the currently selected menu item, or -1 if none. */
  getSelectedIndex() {
    return this.adapter.getSelectedIndex();
  }
  setSelectedIndex(index, closeMenu = false, skipNotify = false) {
    if (index >= this.adapter.getMenuItemCount()) {
      return;
    }
    const menuItemValues = this.adapter.getMenuItemValues();
    if (index === numbers8.UNSET_INDEX || menuItemValues[index] === void 0 || menuItemValues[index] === null) {
      this.adapter.setSelectedText("");
    } else {
      this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(index).trim());
    }
    this.adapter.setSelectedIndex(index);
    if (closeMenu) {
      this.adapter.closeMenu();
    }
    if (!skipNotify && this.lastSelectedIndex !== index) {
      this.handleChange();
    }
    this.lastSelectedIndex = index;
  }
  // !!! MODIFIED FOR AURELIA !!!
  setValue(value, skipNotify = false) {
    const index = this.adapter.getMenuItemValues().indexOf(value);
    this.setSelectedIndex(
      index,
      /** closeMenu */
      false,
      skipNotify
    );
  }
  // !!! MODIFIED FOR AURELIA !!!
  getValue() {
    const index = this.adapter.getSelectedIndex();
    const menuItemValues = this.adapter.getMenuItemValues();
    return index !== numbers8.UNSET_INDEX ? menuItemValues[index] : void 0;
  }
  getDisabled() {
    return this.disabled;
  }
  setDisabled(isDisabled) {
    this.disabled = isDisabled;
    if (this.disabled) {
      this.adapter.addClass(cssClasses22.DISABLED);
      this.adapter.closeMenu();
    } else {
      this.adapter.removeClass(cssClasses22.DISABLED);
    }
    if (this.leadingIcon) {
      this.leadingIcon.setDisabled(this.disabled);
    }
    if (this.disabled) {
      this.adapter.removeSelectAnchorAttr("tabindex");
    } else {
      this.adapter.setSelectAnchorAttr("tabindex", "0");
    }
    this.adapter.setSelectAnchorAttr("aria-disabled", this.disabled.toString());
  }
  /** Opens the menu. */
  openMenu() {
    this.adapter.addClass(cssClasses22.ACTIVATED);
    this.adapter.openMenu();
    this.isMenuOpen = true;
    this.adapter.setSelectAnchorAttr("aria-expanded", "true");
  }
  /**
   * @param content Sets the content of the helper text.
   */
  setHelperTextContent(content) {
    if (this.helperText) {
      this.helperText.setContent(content);
    }
  }
  /**
   * Re-calculates if the notched outline should be notched and if the label
   * should float.
   */
  layout() {
    if (this.adapter.hasLabel()) {
      const optionHasValue = this.getValue() !== void 0;
      const isFocused = this.adapter.hasClass(cssClasses22.FOCUSED);
      const shouldFloatAndNotch = optionHasValue || isFocused;
      const isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
      this.notchOutline(shouldFloatAndNotch);
      this.adapter.floatLabel(shouldFloatAndNotch);
      this.adapter.setLabelRequired(isRequired);
    }
  }
  /**
   * Synchronizes the list of options with the state of the foundation. Call
   * this whenever menu options are dynamically updated.
   */
  layoutOptions() {
    const menuItemValues = this.adapter.getMenuItemValues();
    const selectedIndex = menuItemValues.indexOf(this.getValue());
    this.setSelectedIndex(
      selectedIndex,
      /** closeMenu */
      false,
      /** skipNotify */
      true
    );
  }
  handleMenuOpened() {
    if (this.adapter.getMenuItemValues().length === 0) {
      return;
    }
    const selectedIndex = this.getSelectedIndex();
    const focusItemIndex = selectedIndex >= 0 ? selectedIndex : 0;
    this.adapter.focusMenuItemAtIndex(focusItemIndex);
  }
  handleMenuClosed() {
    this.adapter.removeClass(cssClasses22.ACTIVATED);
    this.isMenuOpen = false;
    this.adapter.setSelectAnchorAttr("aria-expanded", "false");
    if (!this.adapter.isSelectAnchorFocused()) {
      this.blur();
    }
  }
  /**
   * Handles value changes, via change event or programmatic updates.
   */
  handleChange() {
    this.layout();
    this.adapter.notifyChange(this.getValue());
    const isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
    if (isRequired && this.useDefaultValidation) {
      this.setValid(this.isValid());
    }
  }
  handleMenuItemAction(index) {
    this.setSelectedIndex(
      index,
      /** closeMenu */
      true
    );
  }
  /**
   * Handles focus events from select element.
   */
  handleFocus() {
    this.adapter.addClass(cssClasses22.FOCUSED);
    this.layout();
    this.adapter.activateBottomLine();
  }
  /**
   * Handles blur events from select element.
   */
  handleBlur() {
    if (this.isMenuOpen) {
      return;
    }
    this.blur();
  }
  handleClick(normalizedX) {
    if (this.disabled) {
      return;
    }
    if (this.isMenuOpen) {
      this.adapter.closeMenu();
      return;
    }
    this.adapter.setRippleCenter(normalizedX);
    this.openMenu();
  }
  /**
   * Handles keydown events on select element. Depending on the type of
   * character typed, does typeahead matching or opens menu.
   */
  handleKeydown(event) {
    if (this.isMenuOpen || !this.adapter.hasClass(cssClasses22.FOCUSED)) {
      return;
    }
    const isEnter = normalizeKey(event) === KEY.ENTER;
    const isSpace = normalizeKey(event) === KEY.SPACEBAR;
    const arrowUp = normalizeKey(event) === KEY.ARROW_UP;
    const arrowDown = normalizeKey(event) === KEY.ARROW_DOWN;
    if (!isSpace && event.key && event.key.length === 1 || isSpace && this.adapter.isTypeaheadInProgress()) {
      const key = isSpace ? " " : event.key;
      const typeaheadNextIndex = this.adapter.typeaheadMatchItem(key, this.getSelectedIndex());
      if (typeaheadNextIndex >= 0) {
        this.setSelectedIndex(typeaheadNextIndex);
      }
      event.preventDefault();
      return;
    }
    if (!isEnter && !isSpace && !arrowUp && !arrowDown) {
      return;
    }
    if (arrowUp && this.getSelectedIndex() > 0) {
      this.setSelectedIndex(this.getSelectedIndex() - 1);
    } else if (arrowDown && this.getSelectedIndex() < this.adapter.getMenuItemCount() - 1) {
      this.setSelectedIndex(this.getSelectedIndex() + 1);
    }
    this.openMenu();
    event.preventDefault();
  }
  /**
   * Opens/closes the notched outline.
   */
  notchOutline(openNotch) {
    if (!this.adapter.hasOutline()) {
      return;
    }
    const isFocused = this.adapter.hasClass(cssClasses22.FOCUSED);
    if (openNotch) {
      const labelScale = numbers8.LABEL_SCALE;
      const labelWidth = this.adapter.getLabelWidth() * labelScale;
      this.adapter.notchOutline(labelWidth);
    } else if (!isFocused) {
      this.adapter.closeOutline();
    }
  }
  /**
   * Sets the aria label of the leading icon.
   */
  setLeadingIconAriaLabel(label) {
    if (this.leadingIcon) {
      this.leadingIcon.setAriaLabel(label);
    }
  }
  /**
   * Sets the text content of the leading icon.
   */
  setLeadingIconContent(content) {
    if (this.leadingIcon) {
      this.leadingIcon.setContent(content);
    }
  }
  setUseDefaultValidation(useDefaultValidation) {
    this.useDefaultValidation = useDefaultValidation;
  }
  setValid(isValid) {
    if (!this.useDefaultValidation) {
      this.customValidity = isValid;
    }
    this.adapter.setSelectAnchorAttr("aria-invalid", (!isValid).toString());
    if (isValid) {
      this.adapter.removeClass(cssClasses22.INVALID);
      this.adapter.removeMenuClass(cssClasses22.MENU_INVALID);
    } else {
      this.adapter.addClass(cssClasses22.INVALID);
      this.adapter.addMenuClass(cssClasses22.MENU_INVALID);
    }
    this.syncHelperTextValidity(isValid);
  }
  isValid() {
    if (this.useDefaultValidation && this.adapter.hasClass(cssClasses22.REQUIRED) && !this.adapter.hasClass(cssClasses22.DISABLED)) {
      return this.getSelectedIndex() !== numbers8.UNSET_INDEX && (this.getSelectedIndex() !== 0 || Boolean(this.getValue()));
    }
    return this.customValidity;
  }
  setRequired(isRequired) {
    if (isRequired) {
      this.adapter.addClass(cssClasses22.REQUIRED);
    } else {
      this.adapter.removeClass(cssClasses22.REQUIRED);
    }
    this.adapter.setSelectAnchorAttr("aria-required", isRequired.toString());
    this.adapter.setLabelRequired(isRequired);
  }
  getRequired() {
    return this.adapter.getSelectAnchorAttr("aria-required") === "true";
  }
  init() {
    const anchorEl = this.adapter.getAnchorElement();
    if (anchorEl) {
      this.adapter.setMenuAnchorElement(anchorEl);
      this.adapter.setMenuAnchorCorner(Corner.BOTTOM_START);
    }
    this.adapter.setMenuWrapFocus(false);
    this.setDisabled(this.adapter.hasClass(cssClasses22.DISABLED));
    this.syncHelperTextValidity(!this.adapter.hasClass(cssClasses22.INVALID));
    this.layout();
    this.layoutOptions();
  }
  /**
   * Unfocuses the select component.
   */
  blur() {
    this.adapter.removeClass(cssClasses22.FOCUSED);
    this.layout();
    this.adapter.deactivateBottomLine();
    const isRequired = this.adapter.hasClass(cssClasses22.REQUIRED);
    if (isRequired && this.useDefaultValidation) {
      this.setValid(this.isValid());
    }
  }
  syncHelperTextValidity(isValid) {
    if (!this.helperText) {
      return;
    }
    this.helperText.setValidity(isValid);
    const helperTextVisible = this.helperText.isVisible();
    const helperTextId = this.helperText.getId();
    if (helperTextVisible && helperTextId) {
      this.adapter.setSelectAnchorAttr(strings20.ARIA_DESCRIBEDBY, helperTextId);
    } else {
      this.adapter.removeSelectAnchorAttr(strings20.ARIA_DESCRIBEDBY);
    }
  }
};

// node_modules/@aurelia-mdc-web/select/dist/mdc-default-select-configuration.js
var import_dist1111 = __toESM(require_dist());
var import_dist1112 = __toESM(require_dist2());
var import_dist1113 = __toESM(require_dist3());
var MdcDefaultSelectConfiguration = class {
};

// node_modules/@aurelia-mdc-web/select/dist/mdc-select.html?raw
var mdc_select_default = `<template class="
    mdc-select
    mdc-select--\${outlined ? 'outlined' : 'filled'}
    \${leadingIcon ? 'mdc-select--with-leading-icon' : ''}
    \${required ? 'mdc-select--required' : ''}
  " role="button" aria-haspopup="listbox">
  <div class="mdc-select__anchor" ref="selectAnchor" mdc-ripple="no-class.bind: true;" change.trigger="handleChange()"
    focus.trigger="handleFocus()" blur.trigger="handleBlur()" keydown.trigger="handleKeydown($event)"
    click.trigger="handleClick($event)">
    <span class="mdc-select__ripple" if.bind="!outlined"></span>
    <au-slot name="leading-icon"></au-slot>
    <span class="mdc-select__selected-text-container">
      <span class="mdc-select__selected-text" ref="selectedText"></span>
    </span>
    <span class="mdc-select__dropdown-icon">
      <svg class="mdc-select__dropdown-icon-graphic" viewBox="7 10 10 5">
        <polygon class="mdc-select__dropdown-icon-inactive" stroke="none" fill-rule="evenodd" points="7 10 12 15 17 10">
        </polygon>
        <polygon class="mdc-select__dropdown-icon-active" stroke="none" fill-rule="evenodd" points="7 15 12 10 17 15">
        </polygon>
      </svg>
    </span>
    <mdc-floating-label if.bind="label && !outlined" for="\${id}" component.ref="mdcLabel">\${label}
    </mdc-floating-label>
    <mdc-line-ripple if.bind="!outlined" component.ref="lineRipple"></mdc-line-ripple>
    <mdc-notched-outline if.bind="outlined" component.ref="outline">
      <mdc-floating-label if.bind="label" for="\${id}" component.ref="mdcLabel">\${label}</mdc-floating-label>
    </mdc-notched-outline>
  </div>

  <mdc-menu class="mdc-select__menu \${naturalWidth || hoistToBody || fixed ? '' : 'mdc-menu-surface--fullwidth'}"
    component.ref="menu" ref="menuElement" typeahead mdcmenusurface:closed.trigger="handleMenuClosed()"
    anchor-margin.bind="anchorMargin" mdcmenusurface:opened.trigger="handleMenuOpened()"
    mdcmenu:selected.trigger="handleMenuItemAction($event)" mdclist:itemschanged.trigger="handleItemsChanged($event)"
    hoist-to-body.bind="hoistToBody" fixed.bind="fixed">
    <au-slot></au-slot>
  </mdc-menu>
</template>
`;

// node_modules/@aurelia-mdc-web/select/dist/mdc-select.js
strings20.CHANGE_EVENT = strings20.CHANGE_EVENT.toLowerCase();
var selectId = 0;
var MdcSelect = (() => {
  let _classDecorators = [inject(Element, IPlatform, MdcDefaultSelectConfiguration), customElement({ name: "mdc-select", template: mdc_select_default }), processContent(function processContent2(node, platform) {
    const el = node;
    const leadingIcon = el.querySelector(`[${mdcIconStrings.ATTRIBUTE}]`);
    leadingIcon == null ? void 0 : leadingIcon.remove();
    const template = platform.document.createElement("template");
    template.setAttribute("au-slot", "");
    template.innerHTML = el.innerHTML;
    el.innerHTML = "";
    el.appendChild(template);
    if (leadingIcon) {
      const div = platform.document.createElement("div");
      div.appendChild(leadingIcon);
      const iconTemplate = platform.document.createElement("template");
      iconTemplate.setAttribute("au-slot", "leading-icon");
      iconTemplate.innerHTML = div.innerHTML;
      el.appendChild(iconTemplate);
    }
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent20;
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _outlined_decorators;
  let _outlined_initializers = [];
  let _outlined_extraInitializers = [];
  let _required_decorators;
  let _required_initializers = [];
  let _required_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _hoistToBody_decorators;
  let _hoistToBody_initializers = [];
  let _hoistToBody_extraInitializers = [];
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _anchorMargin_decorators;
  let _anchorMargin_initializers = [];
  let _anchorMargin_extraInitializers = [];
  let _naturalWidth_decorators;
  let _naturalWidth_initializers = [];
  let _naturalWidth_extraInitializers = [];
  var MdcSelect2 = _classThis = class extends _classSuper {
    constructor(root, platform, defaultConfiguration) {
      super(root);
      this.platform = platform;
      this.defaultConfiguration = defaultConfiguration;
      this.id = `mdc-select-${++selectId}`;
      this.errors = /* @__PURE__ */ new Map();
      this.label = __runInitializers(this, _label_initializers, void 0);
      this.outlined = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _outlined_initializers, this.defaultConfiguration.outlined));
      this.required = (__runInitializers(this, _outlined_extraInitializers), __runInitializers(this, _required_initializers, void 0));
      this.disabled = (__runInitializers(this, _required_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      this.hoistToBody = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _hoistToBody_initializers, void 0));
      this.fixed = (__runInitializers(this, _hoistToBody_extraInitializers), __runInitializers(this, _fixed_initializers, void 0));
      this.anchorMargin = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _anchorMargin_initializers, void 0));
      this.naturalWidth = (__runInitializers(this, _anchorMargin_extraInitializers), __runInitializers(this, _naturalWidth_initializers, void 0));
      this._value = __runInitializers(this, _naturalWidth_extraInitializers);
      defineMdcSelectElementApis(this.root);
      this.root.id = this.id;
    }
    get items() {
      var _a2;
      return (_a2 = this.menu.list_) == null ? void 0 : _a2.items;
    }
    labelChanged() {
      this.platform.domWriteQueue.queueTask(() => {
        var _a2;
        return (_a2 = this.foundation) == null ? void 0 : _a2.layout();
      });
    }
    outlinedChanged() {
      this.platform.domWriteQueue.queueTask(() => {
        var _a2;
        return (_a2 = this.foundation) == null ? void 0 : _a2.layout();
      });
    }
    requiredChanged() {
      var _a2, _b, _c;
      if (this.required) {
        (_a2 = this.selectAnchor) == null ? void 0 : _a2.setAttribute("aria-required", "true");
      } else {
        (_b = this.selectAnchor) == null ? void 0 : _b.removeAttribute("aria-required");
      }
      (_c = this.foundation) == null ? void 0 : _c.setRequired(this.required ?? false);
      this.platform.domWriteQueue.queueTask(() => {
        var _a3;
        return (_a3 = this.foundation) == null ? void 0 : _a3.layout();
      });
    }
    disabledChanged() {
      var _a2;
      if (this.disabled !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setDisabled(this.disabled);
      }
    }
    get value() {
      if (this.foundation) {
        return this.foundation.getValue();
      } else {
        return this._value;
      }
    }
    set value(value) {
      this.setValue(value);
    }
    setValue(value, skipNotify = false) {
      this._value = value;
      if (this.foundation) {
        this.foundation.setValue(value, skipNotify);
        this.foundation.layout();
      }
    }
    get valid() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isValid()) ?? true;
    }
    set valid(value) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setValid(value);
    }
    get selectedIndex() {
      return this.foundation.getSelectedIndex();
    }
    set selectedIndex(selectedIndex) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelectedIndex(
        selectedIndex,
        /** closeMenu */
        true
      );
    }
    addError(error) {
      this.errors.set(error, true);
      this.valid = false;
    }
    removeError(error) {
      this.errors.delete(error);
      this.valid = this.errors.size === 0;
    }
    renderErrors() {
      if (this.helperText) {
        this.helperText.errors = Array.from(this.errors.keys()).filter((x) => x.message !== null).map((x) => x.message);
      }
    }
    async attaching() {
      const nextSibling = this.root.nextElementSibling;
      if ((nextSibling == null ? void 0 : nextSibling.tagName) === mdcHelperTextCssClasses.ROOT.toUpperCase()) {
        this.helperText = CustomElement.for(nextSibling).viewModel;
        await this.helperText.attachedPromise;
      }
    }
    beforeFoundationCreated() {
      var _a2;
      const leadingIconEl = this.root.querySelector(`${strings20.LEADING_ICON_SELECTOR}`);
      if (leadingIconEl) {
        this.leadingIcon = (_a2 = CustomAttribute.for(leadingIconEl, mdcIconStrings.ATTRIBUTE)) == null ? void 0 : _a2.viewModel;
      }
      this.menu.list_.singleSelection = true;
    }
    initialSyncWithDOM() {
      var _a2, _b;
      (_a2 = this.foundation) == null ? void 0 : _a2.setValue(this._value, true);
      (_b = this.foundation) == null ? void 0 : _b.layout();
      this.errors = /* @__PURE__ */ new Map();
      this.valid = true;
      this.labelChanged();
      this.disabledChanged();
      this.outlinedChanged();
      this.requiredChanged();
    }
    getDefaultFoundation() {
      const adapter = {
        ...this.getSelectAdapterMethods(),
        ...this.getCommonAdapterMethods(),
        ...this.getOutlineAdapterMethods(),
        ...this.getLabelAdapterMethods()
      };
      return new MDCSelectFoundationAurelia(adapter, this.getFoundationMap());
    }
    getSelectAdapterMethods() {
      return {
        setSelectedText: (text) => {
          this.selectedText.textContent = text;
        },
        isSelectAnchorFocused: () => document.activeElement === this.selectAnchor,
        getSelectAnchorAttr: (attr) => this.selectAnchor.getAttribute(attr),
        setSelectAnchorAttr: (attr, value) => {
          this.selectAnchor.setAttribute(attr, value);
        },
        removeSelectAnchorAttr: (attr) => {
          this.selectAnchor.removeAttribute(attr);
        },
        addMenuClass: (className) => {
          var _a2;
          (_a2 = this.menuElement) == null ? void 0 : _a2.classList.add(className);
        },
        removeMenuClass: (className) => {
          var _a2;
          (_a2 = this.menuElement) == null ? void 0 : _a2.classList.remove(className);
        },
        openMenu: () => {
          this.menu.open = true;
          this.menu.root.style.minWidth = this.menu.root.style.maxWidth = (this.hoistToBody || this.fixed) && !this.naturalWidth ? `${this.root.clientWidth}px` : "";
        },
        closeMenu: () => {
          this.menu.open = false;
        },
        getAnchorElement: () => this.root.querySelector(strings20.SELECT_ANCHOR_SELECTOR),
        setMenuAnchorElement: (anchorEl) => {
          this.menu.anchor = anchorEl;
        },
        setMenuAnchorCorner: (anchorCorner) => {
          this.menu.setAnchorCorner(anchorCorner);
        },
        setMenuWrapFocus: (wrapFocus) => {
          this.menu.wrapFocus = wrapFocus;
        },
        getSelectedIndex: () => {
          const index = this.menu.selectedIndex;
          return index instanceof Array ? index[0] : index;
        },
        setSelectedIndex: (index) => {
          this.menu.selectedIndex = index;
        },
        removeAttributeAtIndex: (index, attributeName) => {
          this.menu.items[index].removeAttribute(attributeName);
        },
        focusMenuItemAtIndex: (index) => {
          this.menu.items[index].focus();
        },
        getMenuItemCount: () => this.menu.items.length,
        getMenuItemValues: () => this.menu.items.map((x) => CustomElement.for(x).viewModel.value),
        getMenuItemTextAtIndex: (index) => this.menu.getPrimaryTextAtIndex(index),
        isTypeaheadInProgress: () => this.menu.typeaheadInProgress,
        typeaheadMatchItem: (nextChar, startingIndex) => this.menu.typeaheadMatchItem(nextChar, startingIndex)
      };
    }
    getCommonAdapterMethods() {
      return {
        addClass: (className) => {
          this.root.classList.add(className);
        },
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        hasClass: (className) => this.root.classList.contains(className),
        setRippleCenter: (normalizedX) => {
          var _a2;
          return (_a2 = this.lineRipple) == null ? void 0 : _a2.setRippleCenter(normalizedX);
        },
        activateBottomLine: () => {
          var _a2;
          return (_a2 = this.lineRipple) == null ? void 0 : _a2.activate();
        },
        deactivateBottomLine: () => {
          var _a2;
          return (_a2 = this.lineRipple) == null ? void 0 : _a2.deactivate();
        },
        notifyChange: (value) => {
          const index = this.selectedIndex;
          this.emit(
            strings20.CHANGE_EVENT,
            { value, index },
            true
            /* shouldBubble  */
          );
          this.emit(
            "change",
            { value, index },
            true
            /* shouldBubble  */
          );
        }
      };
    }
    getOutlineAdapterMethods() {
      return {
        hasOutline: () => Boolean(this.outline),
        notchOutline: (labelWidth) => {
          var _a2;
          return (_a2 = this.outline) == null ? void 0 : _a2.notch(labelWidth);
        },
        closeOutline: () => {
          var _a2;
          return (_a2 = this.outline) == null ? void 0 : _a2.closeNotch();
        }
      };
    }
    getLabelAdapterMethods() {
      return {
        hasLabel: () => !!this.mdcLabel,
        floatLabel: (shouldFloat) => {
          var _a2;
          return (_a2 = this.mdcLabel) == null ? void 0 : _a2.float(shouldFloat);
        },
        getLabelWidth: () => this.mdcLabel ? this.mdcLabel.getWidth() : 0,
        setLabelRequired: (isRequired) => {
          var _a2;
          return (_a2 = this.mdcLabel) == null ? void 0 : _a2.setRequired(isRequired);
        }
      };
    }
    handleChange() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleChange();
      this.emit("change", {}, true);
    }
    handleFocus() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleFocus();
    }
    handleBlur() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleBlur();
      if (!this.root.classList.contains(cssClasses22.FOCUSED)) {
        this.emit("blur", {}, true);
      }
    }
    handleClick(evt) {
      var _a2;
      this.selectAnchor.focus();
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick(this.getNormalizedXCoordinate(evt));
    }
    handleKeydown(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt);
      return true;
    }
    handleMenuItemAction(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleMenuItemAction(evt.detail.index);
    }
    handleMenuOpened() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleMenuOpened();
    }
    handleMenuClosed() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleMenuClosed();
      if (!this.root.classList.contains(cssClasses22.FOCUSED)) {
        this.emit("blur", {}, true);
      }
    }
    handleItemsChanged() {
      var _a2, _b;
      (_a2 = this.foundation) == null ? void 0 : _a2.layoutOptions();
      (_b = this.foundation) == null ? void 0 : _b.layout();
    }
    focus() {
      this.selectAnchor.focus();
    }
    blur() {
      this.selectAnchor.blur();
    }
    /**
     * @hidden
     * Calculates where the line ripple should start based on the x coordinate within the component.
     */
    getNormalizedXCoordinate(evt) {
      const targetClientRect = evt.target.getBoundingClientRect();
      const xCoordinate = this.isTouchEvent(evt) ? evt.touches[0].clientX : evt.clientX;
      return xCoordinate - targetClientRect.left;
    }
    isTouchEvent(evt) {
      return Boolean(evt.touches);
    }
    /**
     * @hidden
     * Returns a map of all subcomponents to subfoundations.
     */
    getFoundationMap() {
      var _a2, _b;
      return {
        helperText: (_a2 = this.helperText) == null ? void 0 : _a2.foundation,
        leadingIcon: (_b = this.leadingIcon) == null ? void 0 : _b.foundation
      };
    }
  };
  __setFunctionName(_classThis, "MdcSelect");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _label_decorators = [bindable()];
    _outlined_decorators = [bindable({ set: booleanAttr20 })];
    _required_decorators = [bindable({ set: booleanAttr20 })];
    _disabled_decorators = [bindable({ set: booleanAttr20 })];
    _hoistToBody_decorators = [bindable({ set: booleanAttr20, mode: BindingMode.oneTime })];
    _fixed_decorators = [bindable({ set: booleanAttr20, mode: BindingMode.oneTime })];
    _anchorMargin_decorators = [bindable()];
    _naturalWidth_decorators = [bindable({ set: booleanAttr20 })];
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _outlined_decorators, { kind: "field", name: "outlined", static: false, private: false, access: { has: (obj) => "outlined" in obj, get: (obj) => obj.outlined, set: (obj, value) => {
      obj.outlined = value;
    } }, metadata: _metadata }, _outlined_initializers, _outlined_extraInitializers);
    __esDecorate(null, null, _required_decorators, { kind: "field", name: "required", static: false, private: false, access: { has: (obj) => "required" in obj, get: (obj) => obj.required, set: (obj, value) => {
      obj.required = value;
    } }, metadata: _metadata }, _required_initializers, _required_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _hoistToBody_decorators, { kind: "field", name: "hoistToBody", static: false, private: false, access: { has: (obj) => "hoistToBody" in obj, get: (obj) => obj.hoistToBody, set: (obj, value) => {
      obj.hoistToBody = value;
    } }, metadata: _metadata }, _hoistToBody_initializers, _hoistToBody_extraInitializers);
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _anchorMargin_decorators, { kind: "field", name: "anchorMargin", static: false, private: false, access: { has: (obj) => "anchorMargin" in obj, get: (obj) => obj.anchorMargin, set: (obj, value) => {
      obj.anchorMargin = value;
    } }, metadata: _metadata }, _anchorMargin_initializers, _anchorMargin_extraInitializers);
    __esDecorate(null, null, _naturalWidth_decorators, { kind: "field", name: "naturalWidth", static: false, private: false, access: { has: (obj) => "naturalWidth" in obj, get: (obj) => obj.naturalWidth, set: (obj, value) => {
      obj.naturalWidth = value;
    } }, metadata: _metadata }, _naturalWidth_initializers, _naturalWidth_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSelect2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSelect2 = _classThis;
})();
function defineMdcSelectElementApis(element) {
  Object.defineProperties(element, {
    value: {
      get() {
        return CustomElement.for(this).viewModel.value;
      },
      set(value) {
        CustomElement.for(this).viewModel.value = value === "" ? void 0 : value;
      },
      configurable: true
    },
    options: {
      get() {
        return CustomElement.for(this).viewModel.root.querySelectorAll(".mdc-list-item");
      },
      configurable: true
    },
    selectedIndex: {
      get() {
        return CustomElement.for(this).viewModel.selectedIndex;
      },
      set(value) {
        CustomElement.for(this).viewModel.selectedIndex = value;
      },
      configurable: true
    },
    valid: {
      get() {
        return CustomElement.for(this).viewModel.valid;
      },
      set(value) {
        CustomElement.for(this).viewModel.valid = value;
      },
      configurable: true
    },
    addError: {
      value(error) {
        CustomElement.for(this).viewModel.addError(error);
      },
      configurable: true
    },
    removeError: {
      value(error) {
        CustomElement.for(this).viewModel.removeError(error);
      },
      configurable: true
    },
    renderErrors: {
      value() {
        CustomElement.for(this).viewModel.renderErrors();
      },
      configurable: true
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    },
    blur: {
      value() {
        CustomElement.for(this).viewModel.blur();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/select/dist/mdc-select-value-observer.js
var import_dist1117 = __toESM(require_dist());
var import_dist1118 = __toESM(require_dist2());
var import_dist1119 = __toESM(require_dist3());
var childObserverOptions = {
  childList: true,
  subtree: true,
  characterData: true
};
var MdcSelectValueObserver = (() => {
  let _classDecorators = [subscriberCollection()];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcSelectValueObserver2 = _classThis = class {
    constructor(obj, _key, config, _) {
      this.currentValue = void 0;
      this.oldValue = void 0;
      this.hasChanges = false;
      this.type = AccessorType.Node | AccessorType.Observer | AccessorType.Layout;
      this.arrayObserver = void 0;
      this.nodeObserver = void 0;
      this.observing = false;
      this.listened = false;
      this.obj = obj;
      this.config = config;
    }
    setElementValue(skipNotify) {
      if (this.optionsWereSet) {
        CustomElement.for(this.obj).viewModel.setValue(this.currentValue, skipNotify);
      }
    }
    getValue() {
      return this.observing ? this.currentValue : this.obj.value;
    }
    setValue(newValue) {
      this.currentValue = newValue;
      this.hasChanges = newValue !== this.oldValue;
      if (this.optionsWereSet) {
        this.flushChanges();
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    flushChanges() {
      if (this.hasChanges) {
        this.hasChanges = false;
        this.synchronizeOptions();
      }
    }
    handleCollectionChange() {
      this.synchronizeOptions();
    }
    notify() {
      const oldValue = this.oldValue;
      const newValue = this.currentValue;
      if (newValue === oldValue) {
        return;
      }
      this.subs.notify(newValue, oldValue);
    }
    handleEvent() {
      const shouldNotify = this.synchronizeValue();
      if (shouldNotify) {
        this.subs.notify(this.currentValue, this.oldValue);
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    synchronizeOptions(_indexMap) {
      this.setElementValue(true);
    }
    synchronizeValue() {
      const obj = this.obj;
      const options = CustomElement.for(obj).viewModel.items ?? [];
      const len = options.length;
      let i = 0;
      let value = null;
      while (i < len) {
        const option = options[i];
        if (option.value === this.obj.value) {
          value = option.value;
          break;
        }
        ++i;
      }
      this.oldValue = this.currentValue;
      this.currentValue = value;
      return true;
    }
    start() {
      const vm = CustomElement.for(this.obj).viewModel;
      vm.initialised.then(() => {
        var _a2;
        (this.nodeObserver = new this.obj.ownerDocument.defaultView.MutationObserver((records) => this.handleNodeChange(records))).observe(vm.menu.root, childObserverOptions);
        this.observing = true;
        if ((_a2 = vm.items) == null ? void 0 : _a2.length) {
          this.optionsWereSet = true;
          this.synchronizeOptions();
        }
      });
    }
    stop() {
      var _a2;
      this.optionsWereSet = false;
      this.nodeObserver.disconnect();
      (_a2 = this.arrayObserver) == null ? void 0 : _a2.unsubscribe(this);
      this.nodeObserver = this.arrayObserver = void 0;
      this.observing = false;
    }
    // todo: observe all kind of collection
    // private observeArray(array: unknown[] | null): void {
    //   this.arrayObserver?.unsubscribe(this);
    //   this.arrayObserver = void 0;
    //   if (array !== null) {
    //     if (!this.obj.multiple) {
    //       throw new Error('Only null or Array instances can be bound to a multi-select.');
    //     }
    //     (this.arrayObserver = this.observerLocator.getArrayObserver(array)).subscribe(this);
    //   }
    // }
    handleNodeChange(records) {
      if (records.find((x) => x.type === "childList" && (Array.from(x.addedNodes).find((y) => y.tagName === "MDC-LIST-ITEM") || Array.from(x.removedNodes).find((y) => y.tagName === "MDC-LIST-ITEM")))) {
        this.optionsWereSet = true;
        this.synchronizeOptions();
        const shouldNotify = this.synchronizeValue();
        if (shouldNotify) {
          this.notify();
        }
      }
    }
    subscribe(subscriber) {
      if (this.subs.add(subscriber) && this.subs.count === 1) {
        for (const e of this.config.events) {
          this.obj.addEventListener(e, this);
        }
        this.listened = true;
        this.start();
      }
    }
    unsubscribe(subscriber) {
      if (this.subs.remove(subscriber) && this.subs.count === 0) {
        for (const e of this.config.events) {
          this.obj.removeEventListener(e, this);
        }
        this.listened = false;
        this.stop();
      }
    }
    useConfig(config) {
      this.config = config;
      if (this.listened) {
        for (const e of this.config.events) {
          this.obj.removeEventListener(e, this);
        }
        for (const e of this.config.events) {
          this.obj.addEventListener(e, this);
        }
      }
    }
  };
  __setFunctionName(_classThis, "MdcSelectValueObserver");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSelectValueObserver2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSelectValueObserver2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/select/dist/index.js
var configured5 = false;
var SelectConfiguration = {
  register(container) {
    if (configured5) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.tagName === "MDC-SELECT" ? property === "value" : false);
        nodeObserverLocator.useConfig("MDC-SELECT", "value", { events: [strings20.CHANGE_EVENT], type: MdcSelectValueObserver });
      }).register(container);
      configured5 = true;
      return container.register(MdcSelect, MdcSelectIcon, MdcSelectHelperText, ListConfiguration, FloatingLabelConfiguration, LineRippleConfiguration, NotchedOutlineConfiguration, RippleConfiguration);
    }
  },
  customize(optionsProvider) {
    return {
      register(container) {
        const options = container.get(MdcDefaultSelectConfiguration);
        optionsProvider(options);
        return SelectConfiguration.register(container);
      }
    };
  }
};

// node_modules/@aurelia-mdc-web/snackbar/dist/index.js
var import_dist1171 = __toESM(require_dist());
var import_dist1172 = __toESM(require_dist2());
var import_dist1173 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/dist/mdc-snackbar.js
var import_dist1165 = __toESM(require_dist());
var import_dist1166 = __toESM(require_dist2());
var import_dist1167 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1141 = __toESM(require_dist());
var import_dist1142 = __toESM(require_dist2());
var import_dist1143 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1126 = __toESM(require_dist());
var import_dist1127 = __toESM(require_dist2());
var import_dist1128 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1123 = __toESM(require_dist());
var import_dist1124 = __toESM(require_dist2());
var import_dist1125 = __toESM(require_dist3());
function number21(a) {
  return Number(a);
}
function booleanAttr21(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap21 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr21 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr21 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr21 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1129 = __toESM(require_dist());
var import_dist1130 = __toESM(require_dist2());
var import_dist1131 = __toESM(require_dist3());
var MdcPromisifyReference21 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1132 = __toESM(require_dist());
var import_dist1133 = __toESM(require_dist2());
var import_dist1134 = __toESM(require_dist3());
var MdcComponent21 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1135 = __toESM(require_dist());
var import_dist1136 = __toESM(require_dist2());
var import_dist1137 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1138 = __toESM(require_dist());
var import_dist1139 = __toESM(require_dist2());
var import_dist1140 = __toESM(require_dist3());

// node_modules/@material/snackbar/index.js
var import_dist1162 = __toESM(require_dist());
var import_dist1163 = __toESM(require_dist2());
var import_dist1164 = __toESM(require_dist3());

// node_modules/@material/snackbar/util.js
var util_exports3 = {};
__export(util_exports3, {
  announce: () => announce2
});
var import_dist1147 = __toESM(require_dist());
var import_dist1148 = __toESM(require_dist2());
var import_dist1149 = __toESM(require_dist3());

// node_modules/@material/snackbar/constants.js
var import_dist1144 = __toESM(require_dist());
var import_dist1145 = __toESM(require_dist2());
var import_dist1146 = __toESM(require_dist3());
var cssClasses24 = {
  CLOSING: "mdc-snackbar--closing",
  OPEN: "mdc-snackbar--open",
  OPENING: "mdc-snackbar--opening"
};
var strings23 = {
  ACTION_SELECTOR: ".mdc-snackbar__action",
  ARIA_LIVE_LABEL_TEXT_ATTR: "data-mdc-snackbar-label-text",
  CLOSED_EVENT: "MDCSnackbar:closed",
  CLOSING_EVENT: "MDCSnackbar:closing",
  DISMISS_SELECTOR: ".mdc-snackbar__dismiss",
  LABEL_SELECTOR: ".mdc-snackbar__label",
  OPENED_EVENT: "MDCSnackbar:opened",
  OPENING_EVENT: "MDCSnackbar:opening",
  REASON_ACTION: "action",
  REASON_DISMISS: "dismiss",
  SURFACE_SELECTOR: ".mdc-snackbar__surface"
};
var numbers9 = {
  DEFAULT_AUTO_DISMISS_TIMEOUT_MS: 5e3,
  INDETERMINATE: -1,
  MAX_AUTO_DISMISS_TIMEOUT_MS: 1e4,
  MIN_AUTO_DISMISS_TIMEOUT_MS: 4e3,
  // These variables need to be kept in sync with the values in _variables.scss.
  SNACKBAR_ANIMATION_CLOSE_TIME_MS: 75,
  SNACKBAR_ANIMATION_OPEN_TIME_MS: 150,
  /**
   * Number of milliseconds to wait between temporarily clearing the label text
   * in the DOM and subsequently restoring it. This is necessary to force IE 11
   * to pick up the `aria-live` content change and announce it to the user.
   */
  ARIA_LIVE_DELAY_MS: 1e3
};

// node_modules/@material/snackbar/util.js
var ARIA_LIVE_DELAY_MS = numbers9.ARIA_LIVE_DELAY_MS;
var ARIA_LIVE_LABEL_TEXT_ATTR = strings23.ARIA_LIVE_LABEL_TEXT_ATTR;
function announce2(ariaEl, labelEl) {
  if (labelEl === void 0) {
    labelEl = ariaEl;
  }
  var priority = ariaEl.getAttribute("aria-live");
  var labelText = labelEl.textContent.trim();
  if (!labelText || !priority) {
    return;
  }
  ariaEl.setAttribute("aria-live", "off");
  labelEl.textContent = "";
  var span = document.createElement("span");
  span.setAttribute("style", "display: inline-block; width: 0; height: 1px;");
  span.textContent = " ";
  labelEl.appendChild(span);
  labelEl.setAttribute(ARIA_LIVE_LABEL_TEXT_ATTR, labelText);
  setTimeout(function() {
    ariaEl.setAttribute("aria-live", priority);
    labelEl.removeAttribute(ARIA_LIVE_LABEL_TEXT_ATTR);
    labelEl.textContent = labelText;
  }, ARIA_LIVE_DELAY_MS);
}

// node_modules/@material/snackbar/adapter.js
var import_dist1150 = __toESM(require_dist());
var import_dist1151 = __toESM(require_dist2());
var import_dist1152 = __toESM(require_dist3());

// node_modules/@material/snackbar/component.js
var import_dist1156 = __toESM(require_dist());
var import_dist1157 = __toESM(require_dist2());
var import_dist1158 = __toESM(require_dist3());

// node_modules/@material/snackbar/foundation.js
var import_dist1153 = __toESM(require_dist());
var import_dist1154 = __toESM(require_dist2());
var import_dist1155 = __toESM(require_dist3());
var OPENING2 = cssClasses24.OPENING;
var OPEN2 = cssClasses24.OPEN;
var CLOSING2 = cssClasses24.CLOSING;
var REASON_ACTION = strings23.REASON_ACTION;
var REASON_DISMISS = strings23.REASON_DISMISS;
var MDCSnackbarFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSnackbarFoundation2, _super);
    function MDCSnackbarFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCSnackbarFoundation2.defaultAdapter), adapter)) || this;
      _this.opened = false;
      _this.animationFrame = 0;
      _this.animationTimer = 0;
      _this.autoDismissTimer = 0;
      _this.autoDismissTimeoutMs = numbers9.DEFAULT_AUTO_DISMISS_TIMEOUT_MS;
      _this.closeOnEscape = true;
      return _this;
    }
    Object.defineProperty(MDCSnackbarFoundation2, "cssClasses", {
      get: function() {
        return cssClasses24;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation2, "strings", {
      get: function() {
        return strings23;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation2, "numbers", {
      get: function() {
        return numbers9;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbarFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          announce: function() {
            return void 0;
          },
          notifyClosed: function() {
            return void 0;
          },
          notifyClosing: function() {
            return void 0;
          },
          notifyOpened: function() {
            return void 0;
          },
          notifyOpening: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSnackbarFoundation2.prototype.destroy = function() {
      this.clearAutoDismissTimer();
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = 0;
      clearTimeout(this.animationTimer);
      this.animationTimer = 0;
      this.adapter.removeClass(OPENING2);
      this.adapter.removeClass(OPEN2);
      this.adapter.removeClass(CLOSING2);
    };
    MDCSnackbarFoundation2.prototype.open = function() {
      var _this = this;
      this.clearAutoDismissTimer();
      this.opened = true;
      this.adapter.notifyOpening();
      this.adapter.removeClass(CLOSING2);
      this.adapter.addClass(OPENING2);
      this.adapter.announce();
      this.runNextAnimationFrame(function() {
        _this.adapter.addClass(OPEN2);
        _this.animationTimer = setTimeout(function() {
          var timeoutMs = _this.getTimeoutMs();
          _this.handleAnimationTimerEnd();
          _this.adapter.notifyOpened();
          if (timeoutMs !== numbers9.INDETERMINATE) {
            _this.autoDismissTimer = setTimeout(function() {
              _this.close(REASON_DISMISS);
            }, timeoutMs);
          }
        }, numbers9.SNACKBAR_ANIMATION_OPEN_TIME_MS);
      });
    };
    MDCSnackbarFoundation2.prototype.close = function(reason) {
      var _this = this;
      if (reason === void 0) {
        reason = "";
      }
      if (!this.opened) {
        return;
      }
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = 0;
      this.clearAutoDismissTimer();
      this.opened = false;
      this.adapter.notifyClosing(reason);
      this.adapter.addClass(cssClasses24.CLOSING);
      this.adapter.removeClass(cssClasses24.OPEN);
      this.adapter.removeClass(cssClasses24.OPENING);
      clearTimeout(this.animationTimer);
      this.animationTimer = setTimeout(function() {
        _this.handleAnimationTimerEnd();
        _this.adapter.notifyClosed(reason);
      }, numbers9.SNACKBAR_ANIMATION_CLOSE_TIME_MS);
    };
    MDCSnackbarFoundation2.prototype.isOpen = function() {
      return this.opened;
    };
    MDCSnackbarFoundation2.prototype.getTimeoutMs = function() {
      return this.autoDismissTimeoutMs;
    };
    MDCSnackbarFoundation2.prototype.setTimeoutMs = function(timeoutMs) {
      var minValue = numbers9.MIN_AUTO_DISMISS_TIMEOUT_MS;
      var maxValue = numbers9.MAX_AUTO_DISMISS_TIMEOUT_MS;
      var indeterminateValue = numbers9.INDETERMINATE;
      if (timeoutMs === numbers9.INDETERMINATE || timeoutMs <= maxValue && timeoutMs >= minValue) {
        this.autoDismissTimeoutMs = timeoutMs;
      } else {
        throw new Error("\n        timeoutMs must be an integer in the range " + minValue + "–" + maxValue + "\n        (or " + indeterminateValue + " to disable), but got '" + timeoutMs + "'");
      }
    };
    MDCSnackbarFoundation2.prototype.getCloseOnEscape = function() {
      return this.closeOnEscape;
    };
    MDCSnackbarFoundation2.prototype.setCloseOnEscape = function(closeOnEscape) {
      this.closeOnEscape = closeOnEscape;
    };
    MDCSnackbarFoundation2.prototype.handleKeyDown = function(evt) {
      var isEscapeKey = evt.key === "Escape" || evt.keyCode === 27;
      if (isEscapeKey && this.getCloseOnEscape()) {
        this.close(REASON_DISMISS);
      }
    };
    MDCSnackbarFoundation2.prototype.handleActionButtonClick = function(_evt) {
      this.close(REASON_ACTION);
    };
    MDCSnackbarFoundation2.prototype.handleActionIconClick = function(_evt) {
      this.close(REASON_DISMISS);
    };
    MDCSnackbarFoundation2.prototype.clearAutoDismissTimer = function() {
      clearTimeout(this.autoDismissTimer);
      this.autoDismissTimer = 0;
    };
    MDCSnackbarFoundation2.prototype.handleAnimationTimerEnd = function() {
      this.animationTimer = 0;
      this.adapter.removeClass(cssClasses24.OPENING);
      this.adapter.removeClass(cssClasses24.CLOSING);
    };
    MDCSnackbarFoundation2.prototype.runNextAnimationFrame = function(callback) {
      var _this = this;
      cancelAnimationFrame(this.animationFrame);
      this.animationFrame = requestAnimationFrame(function() {
        _this.animationFrame = 0;
        clearTimeout(_this.animationTimer);
        _this.animationTimer = setTimeout(callback, 0);
      });
    };
    return MDCSnackbarFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/snackbar/component.js
var SURFACE_SELECTOR = strings23.SURFACE_SELECTOR;
var LABEL_SELECTOR = strings23.LABEL_SELECTOR;
var ACTION_SELECTOR = strings23.ACTION_SELECTOR;
var DISMISS_SELECTOR = strings23.DISMISS_SELECTOR;
var OPENING_EVENT = strings23.OPENING_EVENT;
var OPENED_EVENT = strings23.OPENED_EVENT;
var CLOSING_EVENT = strings23.CLOSING_EVENT;
var CLOSED_EVENT = strings23.CLOSED_EVENT;
var MDCSnackbar = (
  /** @class */
  function(_super) {
    __extends(MDCSnackbar2, _super);
    function MDCSnackbar2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSnackbar2.attachTo = function(root) {
      return new MDCSnackbar2(root);
    };
    MDCSnackbar2.prototype.initialize = function(announcerFactory) {
      if (announcerFactory === void 0) {
        announcerFactory = function() {
          return announce2;
        };
      }
      this.announce = announcerFactory();
    };
    MDCSnackbar2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.surfaceEl = this.root.querySelector(SURFACE_SELECTOR);
      this.labelEl = this.root.querySelector(LABEL_SELECTOR);
      this.actionEl = this.root.querySelector(ACTION_SELECTOR);
      this.handleKeyDown = function(evt) {
        _this.foundation.handleKeyDown(evt);
      };
      this.handleSurfaceClick = function(evt) {
        var target = evt.target;
        if (_this.isActionButton(target)) {
          _this.foundation.handleActionButtonClick(evt);
        } else if (_this.isActionIcon(target)) {
          _this.foundation.handleActionIconClick(evt);
        }
      };
      this.registerKeyDownHandler(this.handleKeyDown);
      this.registerSurfaceClickHandler(this.handleSurfaceClick);
    };
    MDCSnackbar2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.deregisterKeyDownHandler(this.handleKeyDown);
      this.deregisterSurfaceClickHandler(this.handleSurfaceClick);
    };
    MDCSnackbar2.prototype.open = function() {
      this.foundation.open();
    };
    MDCSnackbar2.prototype.close = function(reason) {
      if (reason === void 0) {
        reason = "";
      }
      this.foundation.close(reason);
    };
    MDCSnackbar2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        announce: function() {
          _this.announce(_this.labelEl);
        },
        notifyClosed: function(reason) {
          return _this.emit(CLOSED_EVENT, reason ? { reason } : {});
        },
        notifyClosing: function(reason) {
          return _this.emit(CLOSING_EVENT, reason ? { reason } : {});
        },
        notifyOpened: function() {
          return _this.emit(OPENED_EVENT, {});
        },
        notifyOpening: function() {
          return _this.emit(OPENING_EVENT, {});
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        }
      };
      return new MDCSnackbarFoundation(adapter);
    };
    Object.defineProperty(MDCSnackbar2.prototype, "timeoutMs", {
      get: function() {
        return this.foundation.getTimeoutMs();
      },
      set: function(timeoutMs) {
        this.foundation.setTimeoutMs(timeoutMs);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbar2.prototype, "closeOnEscape", {
      get: function() {
        return this.foundation.getCloseOnEscape();
      },
      set: function(closeOnEscape) {
        this.foundation.setCloseOnEscape(closeOnEscape);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbar2.prototype, "isOpen", {
      get: function() {
        return this.foundation.isOpen();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbar2.prototype, "labelText", {
      get: function() {
        return this.labelEl.textContent;
      },
      set: function(labelText) {
        this.labelEl.textContent = labelText;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSnackbar2.prototype, "actionButtonText", {
      get: function() {
        return this.actionEl.textContent;
      },
      set: function(actionButtonText) {
        this.actionEl.textContent = actionButtonText;
      },
      enumerable: false,
      configurable: true
    });
    MDCSnackbar2.prototype.registerKeyDownHandler = function(handler) {
      this.listen("keydown", handler);
    };
    MDCSnackbar2.prototype.deregisterKeyDownHandler = function(handler) {
      this.unlisten("keydown", handler);
    };
    MDCSnackbar2.prototype.registerSurfaceClickHandler = function(handler) {
      this.surfaceEl.addEventListener("click", handler);
    };
    MDCSnackbar2.prototype.deregisterSurfaceClickHandler = function(handler) {
      this.surfaceEl.removeEventListener("click", handler);
    };
    MDCSnackbar2.prototype.isActionButton = function(target) {
      return Boolean(closest(target, ACTION_SELECTOR));
    };
    MDCSnackbar2.prototype.isActionIcon = function(target) {
      return Boolean(closest(target, DISMISS_SELECTOR));
    };
    return MDCSnackbar2;
  }(MDCComponent)
);

// node_modules/@material/snackbar/types.js
var import_dist1159 = __toESM(require_dist());
var import_dist1160 = __toESM(require_dist2());
var import_dist1161 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/snackbar/dist/mdc-snackbar.html?raw
var mdc_snackbar_default = `<template class="mdc-snackbar \${classes}
  \${stacked ? 'mdc-snackbar--stacked' : ''}
  \${leading ? 'mdc-snackbar--leading' : ''}
" keydown.trigger="handleKeyDown($event)">
  <div class="mdc-snackbar__surface" ref="surfaceEl_">
    <div class="mdc-snackbar__label" role="status" aria-live="polite" ref="labelEl_">\${label}</div>
    <div class="mdc-snackbar__actions">
      <button repeat.for="a of actions" class="mdc-button mdc-snackbar__action \${actionClasses}"
        click.trigger="handleAction(a)">\${a}</button>
      <button if.bind="dismissible" class="mdc-icon-button mdc-snackbar__dismiss material-icons \${dismissClasses}"
        click.trigger="handleDismiss()">close</button>
    </div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/snackbar/dist/mdc-snackbar.js
strings23.OPENING_EVENT = strings23.OPENING_EVENT.toLowerCase();
strings23.OPENED_EVENT = strings23.OPENED_EVENT.toLowerCase();
strings23.CLOSING_EVENT = strings23.CLOSING_EVENT.toLowerCase();
strings23.CLOSED_EVENT = strings23.CLOSED_EVENT.toLowerCase();
var MdcSnackbar = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-snackbar", template: mdc_snackbar_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent21;
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _actions_decorators;
  let _actions_initializers = [];
  let _actions_extraInitializers = [];
  let _dismissible_decorators;
  let _dismissible_initializers = [];
  let _dismissible_extraInitializers = [];
  let _stacked_decorators;
  let _stacked_initializers = [];
  let _stacked_extraInitializers = [];
  let _timeout_decorators;
  let _timeout_initializers = [];
  let _timeout_extraInitializers = [];
  let _closeOnEscape_decorators;
  let _closeOnEscape_initializers = [];
  let _closeOnEscape_extraInitializers = [];
  let _classes_decorators;
  let _classes_initializers = [];
  let _classes_extraInitializers = [];
  let _actionClasses_decorators;
  let _actionClasses_initializers = [];
  let _actionClasses_extraInitializers = [];
  let _dismissClasses_decorators;
  let _dismissClasses_initializers = [];
  let _dismissClasses_extraInitializers = [];
  let _leading_decorators;
  let _leading_initializers = [];
  let _leading_extraInitializers = [];
  var MdcSnackbar2 = _classThis = class extends _classSuper {
    timeoutChanged() {
      var _a2;
      if (this.timeout !== void 0 && !isNaN(this.timeout)) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setTimeoutMs(this.timeout);
      }
    }
    closeOnEscapeChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setCloseOnEscape(this.closeOnEscape);
    }
    initialSyncWithDOM() {
      this.timeoutChanged();
      this.closeOnEscapeChanged();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        announce: () => util_exports3.announce(this.labelEl_),
        notifyClosed: (reason) => this.emit(strings23.CLOSED_EVENT, reason ? { reason } : {}),
        notifyClosing: (reason) => this.emit(strings23.CLOSING_EVENT, reason ? { reason } : {}),
        notifyOpened: () => this.emit(strings23.OPENED_EVENT, {}),
        notifyOpening: () => this.emit(strings23.OPENING_EVENT, {}),
        removeClass: (className) => this.root.classList.remove(className)
      };
      return new MDCSnackbarFoundation(adapter);
    }
    open() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.open();
    }
    /**
     * @param reason Why the snackbar was closed. Value will be passed to CLOSING_EVENT and CLOSED_EVENT via the
     *     `event.detail.reason` property. Standard values are REASON_ACTION and REASON_DISMISS, but custom
     *     client-specific values may also be used if desired.
     */
    close(reason = "") {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.close(reason);
    }
    handleAction(action) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.close(action);
    }
    handleDismiss() {
      this.close(strings23.REASON_DISMISS);
    }
    handleKeyDown(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeyDown(evt);
      return true;
    }
    constructor() {
      super(...arguments);
      this.label = __runInitializers(this, _label_initializers, void 0);
      this.actions = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _actions_initializers, void 0));
      this.dismissible = (__runInitializers(this, _actions_extraInitializers), __runInitializers(this, _dismissible_initializers, void 0));
      this.stacked = (__runInitializers(this, _dismissible_extraInitializers), __runInitializers(this, _stacked_initializers, void 0));
      this.timeout = (__runInitializers(this, _stacked_extraInitializers), __runInitializers(this, _timeout_initializers, void 0));
      this.closeOnEscape = (__runInitializers(this, _timeout_extraInitializers), __runInitializers(this, _closeOnEscape_initializers, true));
      this.classes = (__runInitializers(this, _closeOnEscape_extraInitializers), __runInitializers(this, _classes_initializers, void 0));
      this.actionClasses = (__runInitializers(this, _classes_extraInitializers), __runInitializers(this, _actionClasses_initializers, void 0));
      this.dismissClasses = (__runInitializers(this, _actionClasses_extraInitializers), __runInitializers(this, _dismissClasses_initializers, void 0));
      this.leading = (__runInitializers(this, _dismissClasses_extraInitializers), __runInitializers(this, _leading_initializers, void 0));
      __runInitializers(this, _leading_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcSnackbar");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _label_decorators = [bindable()];
    _actions_decorators = [bindable()];
    _dismissible_decorators = [bindable({ set: booleanAttr21 })];
    _stacked_decorators = [bindable({ set: booleanAttr21 })];
    _timeout_decorators = [bindable({ set: number21 })];
    _closeOnEscape_decorators = [bindable({ set: booleanAttr21 })];
    _classes_decorators = [bindable()];
    _actionClasses_decorators = [bindable()];
    _dismissClasses_decorators = [bindable()];
    _leading_decorators = [bindable({ set: booleanAttr21 })];
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _actions_decorators, { kind: "field", name: "actions", static: false, private: false, access: { has: (obj) => "actions" in obj, get: (obj) => obj.actions, set: (obj, value) => {
      obj.actions = value;
    } }, metadata: _metadata }, _actions_initializers, _actions_extraInitializers);
    __esDecorate(null, null, _dismissible_decorators, { kind: "field", name: "dismissible", static: false, private: false, access: { has: (obj) => "dismissible" in obj, get: (obj) => obj.dismissible, set: (obj, value) => {
      obj.dismissible = value;
    } }, metadata: _metadata }, _dismissible_initializers, _dismissible_extraInitializers);
    __esDecorate(null, null, _stacked_decorators, { kind: "field", name: "stacked", static: false, private: false, access: { has: (obj) => "stacked" in obj, get: (obj) => obj.stacked, set: (obj, value) => {
      obj.stacked = value;
    } }, metadata: _metadata }, _stacked_initializers, _stacked_extraInitializers);
    __esDecorate(null, null, _timeout_decorators, { kind: "field", name: "timeout", static: false, private: false, access: { has: (obj) => "timeout" in obj, get: (obj) => obj.timeout, set: (obj, value) => {
      obj.timeout = value;
    } }, metadata: _metadata }, _timeout_initializers, _timeout_extraInitializers);
    __esDecorate(null, null, _closeOnEscape_decorators, { kind: "field", name: "closeOnEscape", static: false, private: false, access: { has: (obj) => "closeOnEscape" in obj, get: (obj) => obj.closeOnEscape, set: (obj, value) => {
      obj.closeOnEscape = value;
    } }, metadata: _metadata }, _closeOnEscape_initializers, _closeOnEscape_extraInitializers);
    __esDecorate(null, null, _classes_decorators, { kind: "field", name: "classes", static: false, private: false, access: { has: (obj) => "classes" in obj, get: (obj) => obj.classes, set: (obj, value) => {
      obj.classes = value;
    } }, metadata: _metadata }, _classes_initializers, _classes_extraInitializers);
    __esDecorate(null, null, _actionClasses_decorators, { kind: "field", name: "actionClasses", static: false, private: false, access: { has: (obj) => "actionClasses" in obj, get: (obj) => obj.actionClasses, set: (obj, value) => {
      obj.actionClasses = value;
    } }, metadata: _metadata }, _actionClasses_initializers, _actionClasses_extraInitializers);
    __esDecorate(null, null, _dismissClasses_decorators, { kind: "field", name: "dismissClasses", static: false, private: false, access: { has: (obj) => "dismissClasses" in obj, get: (obj) => obj.dismissClasses, set: (obj, value) => {
      obj.dismissClasses = value;
    } }, metadata: _metadata }, _dismissClasses_initializers, _dismissClasses_extraInitializers);
    __esDecorate(null, null, _leading_decorators, { kind: "field", name: "leading", static: false, private: false, access: { has: (obj) => "leading" in obj, get: (obj) => obj.leading, set: (obj, value) => {
      obj.leading = value;
    } }, metadata: _metadata }, _leading_initializers, _leading_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSnackbar2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSnackbar2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/snackbar/dist/mdc-snackbar-service.js
var import_dist1168 = __toESM(require_dist());
var import_dist1169 = __toESM(require_dist2());
var import_dist1170 = __toESM(require_dist3());
var MdcSnackbarService = class {
  constructor(au = resolve(IAurelia)) {
    this.au = au;
  }
  async open(label, actions, options) {
    let closedResolver;
    const closedPromise = new Promise((r) => closedResolver = r);
    const bindingContext = {
      label,
      actions: typeof actions === "string" ? [actions] : actions,
      options,
      handleClosed: (evt) => {
        closedResolver(evt.detail.reason);
        controller.deactivate();
        snackbar.remove();
      }
    };
    const snackbar = document.createElement("div");
    snackbar.innerHTML = '<mdc-snackbar mdcsnackbar:closed.trigger="handleClosed($event)" label.bind="label" actions.bind="actions" dismissible.bind="options.dismissible" stacked.bind="options.stacked" timeout.bind="options.timeout" close-on-escape.bind="options.closeOnEscape" classes.bind="options.classes" action-classes.bind="options.actionClasses" dismiss-classes.bind="options.dismissClasses" leading.bind="options.leading"></mdc-snackbar>';
    const controller = await this.au.enhance({ host: snackbar, component: bindingContext });
    document.body.appendChild(snackbar);
    CustomElement.for(snackbar.firstElementChild).viewModel.open();
    return closedPromise;
  }
};

// node_modules/@aurelia-mdc-web/snackbar/dist/index.js
var registered17 = false;
var SnackbarConfiguration = {
  register(container) {
    if (registered17) {
      return container;
    } else {
      registered17 = true;
      return container.register(MdcSnackbar, MdcSnackbarService, ButtonConfiguration, IconButtonConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/tab-bar/dist/index.js
var import_dist1297 = __toESM(require_dist());
var import_dist1298 = __toESM(require_dist2());
var import_dist1299 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/dist/mdc-tab-bar.js
var import_dist1270 = __toESM(require_dist());
var import_dist1271 = __toESM(require_dist2());
var import_dist1272 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1192 = __toESM(require_dist());
var import_dist1193 = __toESM(require_dist2());
var import_dist1194 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1177 = __toESM(require_dist());
var import_dist1178 = __toESM(require_dist2());
var import_dist1179 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1174 = __toESM(require_dist());
var import_dist1175 = __toESM(require_dist2());
var import_dist1176 = __toESM(require_dist3());
function booleanAttr22(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap22 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr22 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr22 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr22 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1180 = __toESM(require_dist());
var import_dist1181 = __toESM(require_dist2());
var import_dist1182 = __toESM(require_dist3());
var MdcPromisifyReference22 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1183 = __toESM(require_dist());
var import_dist1184 = __toESM(require_dist2());
var import_dist1185 = __toESM(require_dist3());
var MdcComponent22 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1186 = __toESM(require_dist());
var import_dist1187 = __toESM(require_dist2());
var import_dist1188 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1189 = __toESM(require_dist());
var import_dist1190 = __toESM(require_dist2());
var import_dist1191 = __toESM(require_dist3());

// node_modules/@material/tab-bar/index.js
var import_dist1258 = __toESM(require_dist());
var import_dist1259 = __toESM(require_dist2());
var import_dist1260 = __toESM(require_dist3());

// node_modules/@material/tab-bar/adapter.js
var import_dist1195 = __toESM(require_dist());
var import_dist1196 = __toESM(require_dist2());
var import_dist1197 = __toESM(require_dist3());

// node_modules/@material/tab-bar/component.js
var import_dist1252 = __toESM(require_dist());
var import_dist1253 = __toESM(require_dist2());
var import_dist1254 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/component.js
var import_dist1219 = __toESM(require_dist());
var import_dist1220 = __toESM(require_dist2());
var import_dist1221 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/foundation.js
var import_dist1213 = __toESM(require_dist());
var import_dist1214 = __toESM(require_dist2());
var import_dist1215 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/constants.js
var import_dist1198 = __toESM(require_dist());
var import_dist1199 = __toESM(require_dist2());
var import_dist1200 = __toESM(require_dist3());
var cssClasses25 = {
  ANIMATING: "mdc-tab-scroller--animating",
  SCROLL_AREA_SCROLL: "mdc-tab-scroller__scroll-area--scroll",
  SCROLL_TEST: "mdc-tab-scroller__test"
};
var strings24 = {
  AREA_SELECTOR: ".mdc-tab-scroller__scroll-area",
  CONTENT_SELECTOR: ".mdc-tab-scroller__scroll-content"
};

// node_modules/@material/tab-scroller/rtl-default-scroller.js
var import_dist1204 = __toESM(require_dist());
var import_dist1205 = __toESM(require_dist2());
var import_dist1206 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/rtl-scroller.js
var import_dist1201 = __toESM(require_dist());
var import_dist1202 = __toESM(require_dist2());
var import_dist1203 = __toESM(require_dist3());
var MDCTabScrollerRTL = (
  /** @class */
  /* @__PURE__ */ function() {
    function MDCTabScrollerRTL2(adapter) {
      this.adapter = adapter;
    }
    return MDCTabScrollerRTL2;
  }()
);

// node_modules/@material/tab-scroller/rtl-default-scroller.js
var MDCTabScrollerRTLDefault = (
  /** @class */
  function(_super) {
    __extends(MDCTabScrollerRTLDefault2, _super);
    function MDCTabScrollerRTLDefault2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabScrollerRTLDefault2.prototype.getScrollPositionRTL = function() {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var right = this.calculateScrollEdges().right;
      return Math.round(right - currentScrollLeft);
    };
    MDCTabScrollerRTLDefault2.prototype.scrollToRTL = function(scrollX) {
      var edges = this.calculateScrollEdges();
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(edges.right - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };
    MDCTabScrollerRTLDefault2.prototype.incrementScrollRTL = function(scrollX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };
    MDCTabScrollerRTLDefault2.prototype.getAnimatingScrollPosition = function(scrollX) {
      return scrollX;
    };
    MDCTabScrollerRTLDefault2.prototype.calculateScrollEdges = function() {
      var contentWidth = this.adapter.getScrollContentOffsetWidth();
      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
      return {
        left: 0,
        right: contentWidth - rootWidth
      };
    };
    MDCTabScrollerRTLDefault2.prototype.clampScrollValue = function(scrollX) {
      var edges = this.calculateScrollEdges();
      return Math.min(Math.max(edges.left, scrollX), edges.right);
    };
    return MDCTabScrollerRTLDefault2;
  }(MDCTabScrollerRTL)
);

// node_modules/@material/tab-scroller/rtl-negative-scroller.js
var import_dist1207 = __toESM(require_dist());
var import_dist1208 = __toESM(require_dist2());
var import_dist1209 = __toESM(require_dist3());
var MDCTabScrollerRTLNegative = (
  /** @class */
  function(_super) {
    __extends(MDCTabScrollerRTLNegative2, _super);
    function MDCTabScrollerRTLNegative2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabScrollerRTLNegative2.prototype.getScrollPositionRTL = function(translateX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      return Math.round(translateX - currentScrollLeft);
    };
    MDCTabScrollerRTLNegative2.prototype.scrollToRTL = function(scrollX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(-scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };
    MDCTabScrollerRTLNegative2.prototype.incrementScrollRTL = function(scrollX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft - scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: clampedScrollLeft - currentScrollLeft
      };
    };
    MDCTabScrollerRTLNegative2.prototype.getAnimatingScrollPosition = function(scrollX, translateX) {
      return scrollX - translateX;
    };
    MDCTabScrollerRTLNegative2.prototype.calculateScrollEdges = function() {
      var contentWidth = this.adapter.getScrollContentOffsetWidth();
      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
      return {
        left: rootWidth - contentWidth,
        right: 0
      };
    };
    MDCTabScrollerRTLNegative2.prototype.clampScrollValue = function(scrollX) {
      var edges = this.calculateScrollEdges();
      return Math.max(Math.min(edges.right, scrollX), edges.left);
    };
    return MDCTabScrollerRTLNegative2;
  }(MDCTabScrollerRTL)
);

// node_modules/@material/tab-scroller/rtl-reverse-scroller.js
var import_dist1210 = __toESM(require_dist());
var import_dist1211 = __toESM(require_dist2());
var import_dist1212 = __toESM(require_dist3());
var MDCTabScrollerRTLReverse = (
  /** @class */
  function(_super) {
    __extends(MDCTabScrollerRTLReverse2, _super);
    function MDCTabScrollerRTLReverse2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabScrollerRTLReverse2.prototype.getScrollPositionRTL = function(translateX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      return Math.round(currentScrollLeft - translateX);
    };
    MDCTabScrollerRTLReverse2.prototype.scrollToRTL = function(scrollX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: currentScrollLeft - clampedScrollLeft
      };
    };
    MDCTabScrollerRTLReverse2.prototype.incrementScrollRTL = function(scrollX) {
      var currentScrollLeft = this.adapter.getScrollAreaScrollLeft();
      var clampedScrollLeft = this.clampScrollValue(currentScrollLeft + scrollX);
      return {
        finalScrollPosition: clampedScrollLeft,
        scrollDelta: currentScrollLeft - clampedScrollLeft
      };
    };
    MDCTabScrollerRTLReverse2.prototype.getAnimatingScrollPosition = function(scrollX, translateX) {
      return scrollX + translateX;
    };
    MDCTabScrollerRTLReverse2.prototype.calculateScrollEdges = function() {
      var contentWidth = this.adapter.getScrollContentOffsetWidth();
      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
      return {
        left: contentWidth - rootWidth,
        right: 0
      };
    };
    MDCTabScrollerRTLReverse2.prototype.clampScrollValue = function(scrollX) {
      var edges = this.calculateScrollEdges();
      return Math.min(Math.max(edges.right, scrollX), edges.left);
    };
    return MDCTabScrollerRTLReverse2;
  }(MDCTabScrollerRTL)
);

// node_modules/@material/tab-scroller/foundation.js
var MDCTabScrollerFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTabScrollerFoundation2, _super);
    function MDCTabScrollerFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCTabScrollerFoundation2.defaultAdapter), adapter)) || this;
      _this.isAnimating = false;
      return _this;
    }
    Object.defineProperty(MDCTabScrollerFoundation2, "cssClasses", {
      get: function() {
        return cssClasses25;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabScrollerFoundation2, "strings", {
      get: function() {
        return strings24;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabScrollerFoundation2, "defaultAdapter", {
      get: function() {
        return {
          eventTargetMatchesSelector: function() {
            return false;
          },
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          addScrollAreaClass: function() {
            return void 0;
          },
          setScrollAreaStyleProperty: function() {
            return void 0;
          },
          setScrollContentStyleProperty: function() {
            return void 0;
          },
          getScrollContentStyleValue: function() {
            return "";
          },
          setScrollAreaScrollLeft: function() {
            return void 0;
          },
          getScrollAreaScrollLeft: function() {
            return 0;
          },
          getScrollContentOffsetWidth: function() {
            return 0;
          },
          getScrollAreaOffsetWidth: function() {
            return 0;
          },
          computeScrollAreaClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          computeScrollContentClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          computeHorizontalScrollbarHeight: function() {
            return 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTabScrollerFoundation2.prototype.init = function() {
      var horizontalScrollbarHeight = this.adapter.computeHorizontalScrollbarHeight();
      this.adapter.setScrollAreaStyleProperty("margin-bottom", -horizontalScrollbarHeight + "px");
      this.adapter.addScrollAreaClass(MDCTabScrollerFoundation2.cssClasses.SCROLL_AREA_SCROLL);
    };
    MDCTabScrollerFoundation2.prototype.getScrollPosition = function() {
      if (this.isRTL()) {
        return this.computeCurrentScrollPositionRTL();
      }
      var currentTranslateX = this.calculateCurrentTranslateX();
      var scrollLeft = this.adapter.getScrollAreaScrollLeft();
      return scrollLeft - currentTranslateX;
    };
    MDCTabScrollerFoundation2.prototype.handleInteraction = function() {
      if (!this.isAnimating) {
        return;
      }
      this.stopScrollAnimation();
    };
    MDCTabScrollerFoundation2.prototype.handleTransitionEnd = function(evt) {
      var evtTarget = evt.target;
      if (!this.isAnimating || !this.adapter.eventTargetMatchesSelector(evtTarget, MDCTabScrollerFoundation2.strings.CONTENT_SELECTOR)) {
        return;
      }
      this.isAnimating = false;
      this.adapter.removeClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
    };
    MDCTabScrollerFoundation2.prototype.incrementScroll = function(scrollXIncrement) {
      if (scrollXIncrement === 0) {
        return;
      }
      this.animate(this.getIncrementScrollOperation(scrollXIncrement));
    };
    MDCTabScrollerFoundation2.prototype.incrementScrollImmediate = function(scrollXIncrement) {
      if (scrollXIncrement === 0) {
        return;
      }
      var operation = this.getIncrementScrollOperation(scrollXIncrement);
      if (operation.scrollDelta === 0) {
        return;
      }
      this.stopScrollAnimation();
      this.adapter.setScrollAreaScrollLeft(operation.finalScrollPosition);
    };
    MDCTabScrollerFoundation2.prototype.scrollTo = function(scrollX) {
      if (this.isRTL()) {
        this.scrollToImplRTL(scrollX);
        return;
      }
      this.scrollToImpl(scrollX);
    };
    MDCTabScrollerFoundation2.prototype.getRTLScroller = function() {
      if (!this.rtlScrollerInstance) {
        this.rtlScrollerInstance = this.rtlScrollerFactory();
      }
      return this.rtlScrollerInstance;
    };
    MDCTabScrollerFoundation2.prototype.calculateCurrentTranslateX = function() {
      var transformValue = this.adapter.getScrollContentStyleValue("transform");
      if (transformValue === "none") {
        return 0;
      }
      var match = /\((.+?)\)/.exec(transformValue);
      if (!match) {
        return 0;
      }
      var matrixParams = match[1];
      var _a2 = __read(matrixParams.split(","), 6), a = _a2[0], b = _a2[1], c = _a2[2], d = _a2[3], tx = _a2[4], ty = _a2[5];
      return parseFloat(tx);
    };
    MDCTabScrollerFoundation2.prototype.clampScrollValue = function(scrollX) {
      var edges = this.calculateScrollEdges();
      return Math.min(Math.max(edges.left, scrollX), edges.right);
    };
    MDCTabScrollerFoundation2.prototype.computeCurrentScrollPositionRTL = function() {
      var translateX = this.calculateCurrentTranslateX();
      return this.getRTLScroller().getScrollPositionRTL(translateX);
    };
    MDCTabScrollerFoundation2.prototype.calculateScrollEdges = function() {
      var contentWidth = this.adapter.getScrollContentOffsetWidth();
      var rootWidth = this.adapter.getScrollAreaOffsetWidth();
      return {
        left: 0,
        right: contentWidth - rootWidth
      };
    };
    MDCTabScrollerFoundation2.prototype.scrollToImpl = function(scrollX) {
      var currentScrollX = this.getScrollPosition();
      var safeScrollX = this.clampScrollValue(scrollX);
      var scrollDelta = safeScrollX - currentScrollX;
      this.animate({
        finalScrollPosition: safeScrollX,
        scrollDelta
      });
    };
    MDCTabScrollerFoundation2.prototype.scrollToImplRTL = function(scrollX) {
      var animation = this.getRTLScroller().scrollToRTL(scrollX);
      this.animate(animation);
    };
    MDCTabScrollerFoundation2.prototype.getIncrementScrollOperation = function(scrollX) {
      if (this.isRTL()) {
        return this.getRTLScroller().incrementScrollRTL(scrollX);
      }
      var currentScrollX = this.getScrollPosition();
      var targetScrollX = scrollX + currentScrollX;
      var safeScrollX = this.clampScrollValue(targetScrollX);
      var scrollDelta = safeScrollX - currentScrollX;
      return {
        finalScrollPosition: safeScrollX,
        scrollDelta
      };
    };
    MDCTabScrollerFoundation2.prototype.animate = function(animation) {
      var _this = this;
      if (animation.scrollDelta === 0) {
        return;
      }
      this.stopScrollAnimation();
      this.adapter.setScrollAreaScrollLeft(animation.finalScrollPosition);
      this.adapter.setScrollContentStyleProperty("transform", "translateX(" + animation.scrollDelta + "px)");
      this.adapter.computeScrollAreaClientRect();
      requestAnimationFrame(function() {
        _this.adapter.addClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
        _this.adapter.setScrollContentStyleProperty("transform", "none");
      });
      this.isAnimating = true;
    };
    MDCTabScrollerFoundation2.prototype.stopScrollAnimation = function() {
      this.isAnimating = false;
      var currentScrollPosition = this.getAnimatingScrollPosition();
      this.adapter.removeClass(MDCTabScrollerFoundation2.cssClasses.ANIMATING);
      this.adapter.setScrollContentStyleProperty("transform", "translateX(0px)");
      this.adapter.setScrollAreaScrollLeft(currentScrollPosition);
    };
    MDCTabScrollerFoundation2.prototype.getAnimatingScrollPosition = function() {
      var currentTranslateX = this.calculateCurrentTranslateX();
      var scrollLeft = this.adapter.getScrollAreaScrollLeft();
      if (this.isRTL()) {
        return this.getRTLScroller().getAnimatingScrollPosition(scrollLeft, currentTranslateX);
      }
      return scrollLeft - currentTranslateX;
    };
    MDCTabScrollerFoundation2.prototype.rtlScrollerFactory = function() {
      var initialScrollLeft = this.adapter.getScrollAreaScrollLeft();
      this.adapter.setScrollAreaScrollLeft(initialScrollLeft - 1);
      var newScrollLeft = this.adapter.getScrollAreaScrollLeft();
      if (newScrollLeft < 0) {
        this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
        return new MDCTabScrollerRTLNegative(this.adapter);
      }
      var rootClientRect = this.adapter.computeScrollAreaClientRect();
      var contentClientRect = this.adapter.computeScrollContentClientRect();
      var rightEdgeDelta = Math.round(contentClientRect.right - rootClientRect.right);
      this.adapter.setScrollAreaScrollLeft(initialScrollLeft);
      if (rightEdgeDelta === newScrollLeft) {
        return new MDCTabScrollerRTLReverse(this.adapter);
      }
      return new MDCTabScrollerRTLDefault(this.adapter);
    };
    MDCTabScrollerFoundation2.prototype.isRTL = function() {
      return this.adapter.getScrollContentStyleValue("direction") === "rtl";
    };
    return MDCTabScrollerFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/tab-scroller/util.js
var util_exports4 = {};
__export(util_exports4, {
  computeHorizontalScrollbarHeight: () => computeHorizontalScrollbarHeight
});
var import_dist1216 = __toESM(require_dist());
var import_dist1217 = __toESM(require_dist2());
var import_dist1218 = __toESM(require_dist3());
var horizontalScrollbarHeight_;
function computeHorizontalScrollbarHeight(documentObj, shouldCacheResult) {
  if (shouldCacheResult === void 0) {
    shouldCacheResult = true;
  }
  if (shouldCacheResult && typeof horizontalScrollbarHeight_ !== "undefined") {
    return horizontalScrollbarHeight_;
  }
  var el = documentObj.createElement("div");
  el.classList.add(cssClasses25.SCROLL_TEST);
  documentObj.body.appendChild(el);
  var horizontalScrollbarHeight = el.offsetHeight - el.clientHeight;
  documentObj.body.removeChild(el);
  if (shouldCacheResult) {
    horizontalScrollbarHeight_ = horizontalScrollbarHeight;
  }
  return horizontalScrollbarHeight;
}

// node_modules/@material/tab-scroller/component.js
var MDCTabScroller = (
  /** @class */
  function(_super) {
    __extends(MDCTabScroller2, _super);
    function MDCTabScroller2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabScroller2.attachTo = function(root) {
      return new MDCTabScroller2(root);
    };
    MDCTabScroller2.prototype.initialize = function() {
      this.area = this.root.querySelector(MDCTabScrollerFoundation.strings.AREA_SELECTOR);
      this.content = this.root.querySelector(MDCTabScrollerFoundation.strings.CONTENT_SELECTOR);
    };
    MDCTabScroller2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleInteraction = function() {
        _this.foundation.handleInteraction();
      };
      this.handleTransitionEnd = function(evt) {
        _this.foundation.handleTransitionEnd(evt);
      };
      this.area.addEventListener("wheel", this.handleInteraction, applyPassive());
      this.area.addEventListener("touchstart", this.handleInteraction, applyPassive());
      this.area.addEventListener("pointerdown", this.handleInteraction, applyPassive());
      this.area.addEventListener("mousedown", this.handleInteraction, applyPassive());
      this.area.addEventListener("keydown", this.handleInteraction, applyPassive());
      this.content.addEventListener("transitionend", this.handleTransitionEnd);
    };
    MDCTabScroller2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.area.removeEventListener("wheel", this.handleInteraction, applyPassive());
      this.area.removeEventListener("touchstart", this.handleInteraction, applyPassive());
      this.area.removeEventListener("pointerdown", this.handleInteraction, applyPassive());
      this.area.removeEventListener("mousedown", this.handleInteraction, applyPassive());
      this.area.removeEventListener("keydown", this.handleInteraction, applyPassive());
      this.content.removeEventListener("transitionend", this.handleTransitionEnd);
    };
    MDCTabScroller2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        eventTargetMatchesSelector: function(evtTarget, selector) {
          return matches(evtTarget, selector);
        },
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        addScrollAreaClass: function(className) {
          _this.area.classList.add(className);
        },
        setScrollAreaStyleProperty: function(prop, value) {
          _this.area.style.setProperty(prop, value);
        },
        setScrollContentStyleProperty: function(prop, value) {
          _this.content.style.setProperty(prop, value);
        },
        getScrollContentStyleValue: function(propName) {
          return window.getComputedStyle(_this.content).getPropertyValue(propName);
        },
        setScrollAreaScrollLeft: function(scrollX) {
          return _this.area.scrollLeft = scrollX;
        },
        getScrollAreaScrollLeft: function() {
          return _this.area.scrollLeft;
        },
        getScrollContentOffsetWidth: function() {
          return _this.content.offsetWidth;
        },
        getScrollAreaOffsetWidth: function() {
          return _this.area.offsetWidth;
        },
        computeScrollAreaClientRect: function() {
          return _this.area.getBoundingClientRect();
        },
        computeScrollContentClientRect: function() {
          return _this.content.getBoundingClientRect();
        },
        computeHorizontalScrollbarHeight: function() {
          return computeHorizontalScrollbarHeight(document);
        }
      };
      return new MDCTabScrollerFoundation(adapter);
    };
    MDCTabScroller2.prototype.getScrollPosition = function() {
      return this.foundation.getScrollPosition();
    };
    MDCTabScroller2.prototype.getScrollContentWidth = function() {
      return this.content.offsetWidth;
    };
    MDCTabScroller2.prototype.incrementScroll = function(scrollXIncrement) {
      this.foundation.incrementScroll(scrollXIncrement);
    };
    MDCTabScroller2.prototype.scrollTo = function(scrollX) {
      this.foundation.scrollTo(scrollX);
    };
    return MDCTabScroller2;
  }(MDCComponent)
);

// node_modules/@material/tab/component.js
var import_dist1243 = __toESM(require_dist());
var import_dist1244 = __toESM(require_dist2());
var import_dist1245 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/component.js
var import_dist1234 = __toESM(require_dist());
var import_dist1235 = __toESM(require_dist2());
var import_dist1236 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/fading-foundation.js
var import_dist1228 = __toESM(require_dist());
var import_dist1229 = __toESM(require_dist2());
var import_dist1230 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/foundation.js
var import_dist1225 = __toESM(require_dist());
var import_dist1226 = __toESM(require_dist2());
var import_dist1227 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/constants.js
var import_dist1222 = __toESM(require_dist());
var import_dist1223 = __toESM(require_dist2());
var import_dist1224 = __toESM(require_dist3());
var cssClasses26 = {
  ACTIVE: "mdc-tab-indicator--active",
  FADE: "mdc-tab-indicator--fade",
  NO_TRANSITION: "mdc-tab-indicator--no-transition"
};
var strings25 = {
  CONTENT_SELECTOR: ".mdc-tab-indicator__content"
};

// node_modules/@material/tab-indicator/foundation.js
var MDCTabIndicatorFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTabIndicatorFoundation2, _super);
    function MDCTabIndicatorFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCTabIndicatorFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCTabIndicatorFoundation2, "cssClasses", {
      get: function() {
        return cssClasses26;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabIndicatorFoundation2, "strings", {
      get: function() {
        return strings25;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabIndicatorFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          computeContentClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          setContentStyleProperty: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTabIndicatorFoundation2.prototype.computeContentClientRect = function() {
      return this.adapter.computeContentClientRect();
    };
    return MDCTabIndicatorFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/tab-indicator/fading-foundation.js
var MDCFadingTabIndicatorFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCFadingTabIndicatorFoundation2, _super);
    function MDCFadingTabIndicatorFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCFadingTabIndicatorFoundation2.prototype.activate = function() {
      this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
    };
    MDCFadingTabIndicatorFoundation2.prototype.deactivate = function() {
      this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
    };
    return MDCFadingTabIndicatorFoundation2;
  }(MDCTabIndicatorFoundation)
);

// node_modules/@material/tab-indicator/sliding-foundation.js
var import_dist1231 = __toESM(require_dist());
var import_dist1232 = __toESM(require_dist2());
var import_dist1233 = __toESM(require_dist3());
var MDCSlidingTabIndicatorFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSlidingTabIndicatorFoundation2, _super);
    function MDCSlidingTabIndicatorFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSlidingTabIndicatorFoundation2.prototype.activate = function(previousIndicatorClientRect) {
      if (!previousIndicatorClientRect) {
        this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
        return;
      }
      var currentClientRect = this.computeContentClientRect();
      var widthDelta = previousIndicatorClientRect.width / currentClientRect.width;
      var xPosition = previousIndicatorClientRect.left - currentClientRect.left;
      this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
      this.adapter.setContentStyleProperty("transform", "translateX(" + xPosition + "px) scaleX(" + widthDelta + ")");
      this.computeContentClientRect();
      this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.NO_TRANSITION);
      this.adapter.addClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
      this.adapter.setContentStyleProperty("transform", "");
    };
    MDCSlidingTabIndicatorFoundation2.prototype.deactivate = function() {
      this.adapter.removeClass(MDCTabIndicatorFoundation.cssClasses.ACTIVE);
    };
    return MDCSlidingTabIndicatorFoundation2;
  }(MDCTabIndicatorFoundation)
);

// node_modules/@material/tab-indicator/component.js
var MDCTabIndicator = (
  /** @class */
  function(_super) {
    __extends(MDCTabIndicator2, _super);
    function MDCTabIndicator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabIndicator2.attachTo = function(root) {
      return new MDCTabIndicator2(root);
    };
    MDCTabIndicator2.prototype.initialize = function() {
      this.content = this.root.querySelector(MDCTabIndicatorFoundation.strings.CONTENT_SELECTOR);
    };
    MDCTabIndicator2.prototype.computeContentClientRect = function() {
      return this.foundation.computeContentClientRect();
    };
    MDCTabIndicator2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        computeContentClientRect: function() {
          return _this.content.getBoundingClientRect();
        },
        setContentStyleProperty: function(prop, value) {
          _this.content.style.setProperty(prop, value);
        }
      };
      if (this.root.classList.contains(MDCTabIndicatorFoundation.cssClasses.FADE)) {
        return new MDCFadingTabIndicatorFoundation(adapter);
      }
      return new MDCSlidingTabIndicatorFoundation(adapter);
    };
    MDCTabIndicator2.prototype.activate = function(previousIndicatorClientRect) {
      this.foundation.activate(previousIndicatorClientRect);
    };
    MDCTabIndicator2.prototype.deactivate = function() {
      this.foundation.deactivate();
    };
    return MDCTabIndicator2;
  }(MDCComponent)
);

// node_modules/@material/tab/foundation.js
var import_dist1240 = __toESM(require_dist());
var import_dist1241 = __toESM(require_dist2());
var import_dist1242 = __toESM(require_dist3());

// node_modules/@material/tab/constants.js
var import_dist1237 = __toESM(require_dist());
var import_dist1238 = __toESM(require_dist2());
var import_dist1239 = __toESM(require_dist3());
var cssClasses27 = {
  ACTIVE: "mdc-tab--active"
};
var strings26 = {
  ARIA_SELECTED: "aria-selected",
  CONTENT_SELECTOR: ".mdc-tab__content",
  INTERACTED_EVENT: "MDCTab:interacted",
  RIPPLE_SELECTOR: ".mdc-tab__ripple",
  TABINDEX: "tabIndex",
  TAB_INDICATOR_SELECTOR: ".mdc-tab-indicator"
};

// node_modules/@material/tab/foundation.js
var MDCTabFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTabFoundation2, _super);
    function MDCTabFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCTabFoundation2.defaultAdapter), adapter)) || this;
      _this.focusOnActivate = true;
      return _this;
    }
    Object.defineProperty(MDCTabFoundation2, "cssClasses", {
      get: function() {
        return cssClasses27;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabFoundation2, "strings", {
      get: function() {
        return strings26;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabFoundation2, "defaultAdapter", {
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          setAttr: function() {
            return void 0;
          },
          activateIndicator: function() {
            return void 0;
          },
          deactivateIndicator: function() {
            return void 0;
          },
          notifyInteracted: function() {
            return void 0;
          },
          getOffsetLeft: function() {
            return 0;
          },
          getOffsetWidth: function() {
            return 0;
          },
          getContentOffsetLeft: function() {
            return 0;
          },
          getContentOffsetWidth: function() {
            return 0;
          },
          focus: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTabFoundation2.prototype.handleClick = function() {
      this.adapter.notifyInteracted();
    };
    MDCTabFoundation2.prototype.isActive = function() {
      return this.adapter.hasClass(cssClasses27.ACTIVE);
    };
    MDCTabFoundation2.prototype.setFocusOnActivate = function(focusOnActivate) {
      this.focusOnActivate = focusOnActivate;
    };
    MDCTabFoundation2.prototype.activate = function(previousIndicatorClientRect) {
      this.adapter.addClass(cssClasses27.ACTIVE);
      this.adapter.setAttr(strings26.ARIA_SELECTED, "true");
      this.adapter.setAttr(strings26.TABINDEX, "0");
      this.adapter.activateIndicator(previousIndicatorClientRect);
      if (this.focusOnActivate) {
        this.adapter.focus();
      }
    };
    MDCTabFoundation2.prototype.deactivate = function() {
      if (!this.isActive()) {
        return;
      }
      this.adapter.removeClass(cssClasses27.ACTIVE);
      this.adapter.setAttr(strings26.ARIA_SELECTED, "false");
      this.adapter.setAttr(strings26.TABINDEX, "-1");
      this.adapter.deactivateIndicator();
    };
    MDCTabFoundation2.prototype.computeDimensions = function() {
      var rootWidth = this.adapter.getOffsetWidth();
      var rootLeft = this.adapter.getOffsetLeft();
      var contentWidth = this.adapter.getContentOffsetWidth();
      var contentLeft = this.adapter.getContentOffsetLeft();
      return {
        contentLeft: rootLeft + contentLeft,
        contentRight: rootLeft + contentLeft + contentWidth,
        rootLeft,
        rootRight: rootLeft + rootWidth
      };
    };
    return MDCTabFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/tab/component.js
var MDCTab = (
  /** @class */
  function(_super) {
    __extends(MDCTab2, _super);
    function MDCTab2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTab2.attachTo = function(root) {
      return new MDCTab2(root);
    };
    MDCTab2.prototype.initialize = function(rippleFactory, tabIndicatorFactory) {
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      if (tabIndicatorFactory === void 0) {
        tabIndicatorFactory = function(el) {
          return new MDCTabIndicator(el);
        };
      }
      this.id = this.root.id;
      var rippleFoundation = new MDCRippleFoundation(MDCRipple.createAdapter(this));
      this.ripple = rippleFactory(this.root, rippleFoundation);
      var tabIndicatorElement = this.root.querySelector(MDCTabFoundation.strings.TAB_INDICATOR_SELECTOR);
      this.tabIndicator = tabIndicatorFactory(tabIndicatorElement);
      this.content = this.root.querySelector(MDCTabFoundation.strings.CONTENT_SELECTOR);
    };
    MDCTab2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleClick = function() {
        _this.foundation.handleClick();
      };
      this.listen("click", this.handleClick);
    };
    MDCTab2.prototype.destroy = function() {
      this.unlisten("click", this.handleClick);
      this.ripple.destroy();
      _super.prototype.destroy.call(this);
    };
    MDCTab2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        setAttr: function(attr, value) {
          return _this.root.setAttribute(attr, value);
        },
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        activateIndicator: function(previousIndicatorClientRect) {
          _this.tabIndicator.activate(previousIndicatorClientRect);
        },
        deactivateIndicator: function() {
          _this.tabIndicator.deactivate();
        },
        notifyInteracted: function() {
          return _this.emit(
            MDCTabFoundation.strings.INTERACTED_EVENT,
            { tabId: _this.id },
            true
            /* bubble */
          );
        },
        getOffsetLeft: function() {
          return _this.root.offsetLeft;
        },
        getOffsetWidth: function() {
          return _this.root.offsetWidth;
        },
        getContentOffsetLeft: function() {
          return _this.content.offsetLeft;
        },
        getContentOffsetWidth: function() {
          return _this.content.offsetWidth;
        },
        focus: function() {
          return _this.root.focus();
        }
      };
      return new MDCTabFoundation(adapter);
    };
    Object.defineProperty(MDCTab2.prototype, "active", {
      /**
       * Getter for the active state of the tab
       */
      get: function() {
        return this.foundation.isActive();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTab2.prototype, "focusOnActivate", {
      set: function(focusOnActivate) {
        this.foundation.setFocusOnActivate(focusOnActivate);
      },
      enumerable: false,
      configurable: true
    });
    MDCTab2.prototype.activate = function(computeIndicatorClientRect) {
      this.foundation.activate(computeIndicatorClientRect);
    };
    MDCTab2.prototype.deactivate = function() {
      this.foundation.deactivate();
    };
    MDCTab2.prototype.computeIndicatorClientRect = function() {
      return this.tabIndicator.computeContentClientRect();
    };
    MDCTab2.prototype.computeDimensions = function() {
      return this.foundation.computeDimensions();
    };
    MDCTab2.prototype.focus = function() {
      this.root.focus();
    };
    return MDCTab2;
  }(MDCComponent)
);

// node_modules/@material/tab-bar/foundation.js
var import_dist1249 = __toESM(require_dist());
var import_dist1250 = __toESM(require_dist2());
var import_dist1251 = __toESM(require_dist3());

// node_modules/@material/tab-bar/constants.js
var import_dist1246 = __toESM(require_dist());
var import_dist1247 = __toESM(require_dist2());
var import_dist1248 = __toESM(require_dist3());
var strings27 = {
  ARROW_LEFT_KEY: "ArrowLeft",
  ARROW_RIGHT_KEY: "ArrowRight",
  END_KEY: "End",
  ENTER_KEY: "Enter",
  HOME_KEY: "Home",
  SPACE_KEY: "Space",
  TAB_ACTIVATED_EVENT: "MDCTabBar:activated",
  TAB_SCROLLER_SELECTOR: ".mdc-tab-scroller",
  TAB_SELECTOR: ".mdc-tab"
};
var numbers10 = {
  ARROW_LEFT_KEYCODE: 37,
  ARROW_RIGHT_KEYCODE: 39,
  END_KEYCODE: 35,
  ENTER_KEYCODE: 13,
  EXTRA_SCROLL_AMOUNT: 20,
  HOME_KEYCODE: 36,
  SPACE_KEYCODE: 32
};

// node_modules/@material/tab-bar/foundation.js
var ACCEPTABLE_KEYS = /* @__PURE__ */ new Set();
ACCEPTABLE_KEYS.add(strings27.ARROW_LEFT_KEY);
ACCEPTABLE_KEYS.add(strings27.ARROW_RIGHT_KEY);
ACCEPTABLE_KEYS.add(strings27.END_KEY);
ACCEPTABLE_KEYS.add(strings27.HOME_KEY);
ACCEPTABLE_KEYS.add(strings27.ENTER_KEY);
ACCEPTABLE_KEYS.add(strings27.SPACE_KEY);
var KEYCODE_MAP = /* @__PURE__ */ new Map();
KEYCODE_MAP.set(numbers10.ARROW_LEFT_KEYCODE, strings27.ARROW_LEFT_KEY);
KEYCODE_MAP.set(numbers10.ARROW_RIGHT_KEYCODE, strings27.ARROW_RIGHT_KEY);
KEYCODE_MAP.set(numbers10.END_KEYCODE, strings27.END_KEY);
KEYCODE_MAP.set(numbers10.HOME_KEYCODE, strings27.HOME_KEY);
KEYCODE_MAP.set(numbers10.ENTER_KEYCODE, strings27.ENTER_KEY);
KEYCODE_MAP.set(numbers10.SPACE_KEYCODE, strings27.SPACE_KEY);
var MDCTabBarFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTabBarFoundation2, _super);
    function MDCTabBarFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCTabBarFoundation2.defaultAdapter), adapter)) || this;
      _this.useAutomaticActivation = false;
      return _this;
    }
    Object.defineProperty(MDCTabBarFoundation2, "strings", {
      get: function() {
        return strings27;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabBarFoundation2, "numbers", {
      get: function() {
        return numbers10;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabBarFoundation2, "defaultAdapter", {
      get: function() {
        return {
          scrollTo: function() {
            return void 0;
          },
          incrementScroll: function() {
            return void 0;
          },
          getScrollPosition: function() {
            return 0;
          },
          getScrollContentWidth: function() {
            return 0;
          },
          getOffsetWidth: function() {
            return 0;
          },
          isRTL: function() {
            return false;
          },
          setActiveTab: function() {
            return void 0;
          },
          activateTabAtIndex: function() {
            return void 0;
          },
          deactivateTabAtIndex: function() {
            return void 0;
          },
          focusTabAtIndex: function() {
            return void 0;
          },
          getTabIndicatorClientRectAtIndex: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getTabDimensionsAtIndex: function() {
            return { rootLeft: 0, rootRight: 0, contentLeft: 0, contentRight: 0 };
          },
          getPreviousActiveTabIndex: function() {
            return -1;
          },
          getFocusedTabIndex: function() {
            return -1;
          },
          getIndexOfTabById: function() {
            return -1;
          },
          getTabListLength: function() {
            return 0;
          },
          notifyTabActivated: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTabBarFoundation2.prototype.setUseAutomaticActivation = function(useAutomaticActivation) {
      this.useAutomaticActivation = useAutomaticActivation;
    };
    MDCTabBarFoundation2.prototype.activateTab = function(index) {
      var previousActiveIndex = this.adapter.getPreviousActiveTabIndex();
      if (!this.indexIsInRange(index) || index === previousActiveIndex) {
        return;
      }
      var previousClientRect;
      if (previousActiveIndex !== -1) {
        this.adapter.deactivateTabAtIndex(previousActiveIndex);
        previousClientRect = this.adapter.getTabIndicatorClientRectAtIndex(previousActiveIndex);
      }
      this.adapter.activateTabAtIndex(index, previousClientRect);
      this.scrollIntoView(index);
      this.adapter.notifyTabActivated(index);
    };
    MDCTabBarFoundation2.prototype.handleKeyDown = function(evt) {
      var key = this.getKeyFromEvent(evt);
      if (key === void 0) {
        return;
      }
      if (!this.isActivationKey(key)) {
        evt.preventDefault();
      }
      if (this.useAutomaticActivation) {
        if (this.isActivationKey(key)) {
          return;
        }
        var index = this.determineTargetFromKey(this.adapter.getPreviousActiveTabIndex(), key);
        this.adapter.setActiveTab(index);
        this.scrollIntoView(index);
      } else {
        var focusedTabIndex = this.adapter.getFocusedTabIndex();
        if (this.isActivationKey(key)) {
          this.adapter.setActiveTab(focusedTabIndex);
        } else {
          var index = this.determineTargetFromKey(focusedTabIndex, key);
          this.adapter.focusTabAtIndex(index);
          this.scrollIntoView(index);
        }
      }
    };
    MDCTabBarFoundation2.prototype.handleTabInteraction = function(evt) {
      this.adapter.setActiveTab(this.adapter.getIndexOfTabById(evt.detail.tabId));
    };
    MDCTabBarFoundation2.prototype.scrollIntoView = function(index) {
      if (!this.indexIsInRange(index)) {
        return;
      }
      if (index === 0) {
        this.adapter.scrollTo(0);
        return;
      }
      if (index === this.adapter.getTabListLength() - 1) {
        this.adapter.scrollTo(this.adapter.getScrollContentWidth());
        return;
      }
      if (this.isRTL()) {
        this.scrollIntoViewImplRTL(index);
        return;
      }
      this.scrollIntoViewImpl(index);
    };
    MDCTabBarFoundation2.prototype.determineTargetFromKey = function(origin, key) {
      var isRTL = this.isRTL();
      var maxIndex = this.adapter.getTabListLength() - 1;
      var shouldGoToEnd = key === strings27.END_KEY;
      var shouldDecrement = key === strings27.ARROW_LEFT_KEY && !isRTL || key === strings27.ARROW_RIGHT_KEY && isRTL;
      var shouldIncrement = key === strings27.ARROW_RIGHT_KEY && !isRTL || key === strings27.ARROW_LEFT_KEY && isRTL;
      var index = origin;
      if (shouldGoToEnd) {
        index = maxIndex;
      } else if (shouldDecrement) {
        index -= 1;
      } else if (shouldIncrement) {
        index += 1;
      } else {
        index = 0;
      }
      if (index < 0) {
        index = maxIndex;
      } else if (index > maxIndex) {
        index = 0;
      }
      return index;
    };
    MDCTabBarFoundation2.prototype.calculateScrollIncrement = function(index, nextIndex, scrollPosition, barWidth) {
      var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
      var relativeContentLeft = nextTabDimensions.contentLeft - scrollPosition - barWidth;
      var relativeContentRight = nextTabDimensions.contentRight - scrollPosition;
      var leftIncrement = relativeContentRight - numbers10.EXTRA_SCROLL_AMOUNT;
      var rightIncrement = relativeContentLeft + numbers10.EXTRA_SCROLL_AMOUNT;
      if (nextIndex < index) {
        return Math.min(leftIncrement, 0);
      }
      return Math.max(rightIncrement, 0);
    };
    MDCTabBarFoundation2.prototype.calculateScrollIncrementRTL = function(index, nextIndex, scrollPosition, barWidth, scrollContentWidth) {
      var nextTabDimensions = this.adapter.getTabDimensionsAtIndex(nextIndex);
      var relativeContentLeft = scrollContentWidth - nextTabDimensions.contentLeft - scrollPosition;
      var relativeContentRight = scrollContentWidth - nextTabDimensions.contentRight - scrollPosition - barWidth;
      var leftIncrement = relativeContentRight + numbers10.EXTRA_SCROLL_AMOUNT;
      var rightIncrement = relativeContentLeft - numbers10.EXTRA_SCROLL_AMOUNT;
      if (nextIndex > index) {
        return Math.max(leftIncrement, 0);
      }
      return Math.min(rightIncrement, 0);
    };
    MDCTabBarFoundation2.prototype.findAdjacentTabIndexClosestToEdge = function(index, tabDimensions, scrollPosition, barWidth) {
      var relativeRootLeft = tabDimensions.rootLeft - scrollPosition;
      var relativeRootRight = tabDimensions.rootRight - scrollPosition - barWidth;
      var relativeRootDelta = relativeRootLeft + relativeRootRight;
      var leftEdgeIsCloser = relativeRootLeft < 0 || relativeRootDelta < 0;
      var rightEdgeIsCloser = relativeRootRight > 0 || relativeRootDelta > 0;
      if (leftEdgeIsCloser) {
        return index - 1;
      }
      if (rightEdgeIsCloser) {
        return index + 1;
      }
      return -1;
    };
    MDCTabBarFoundation2.prototype.findAdjacentTabIndexClosestToEdgeRTL = function(index, tabDimensions, scrollPosition, barWidth, scrollContentWidth) {
      var rootLeft = scrollContentWidth - tabDimensions.rootLeft - barWidth - scrollPosition;
      var rootRight = scrollContentWidth - tabDimensions.rootRight - scrollPosition;
      var rootDelta = rootLeft + rootRight;
      var leftEdgeIsCloser = rootLeft > 0 || rootDelta > 0;
      var rightEdgeIsCloser = rootRight < 0 || rootDelta < 0;
      if (leftEdgeIsCloser) {
        return index + 1;
      }
      if (rightEdgeIsCloser) {
        return index - 1;
      }
      return -1;
    };
    MDCTabBarFoundation2.prototype.getKeyFromEvent = function(evt) {
      if (ACCEPTABLE_KEYS.has(evt.key)) {
        return evt.key;
      }
      return KEYCODE_MAP.get(evt.keyCode);
    };
    MDCTabBarFoundation2.prototype.isActivationKey = function(key) {
      return key === strings27.SPACE_KEY || key === strings27.ENTER_KEY;
    };
    MDCTabBarFoundation2.prototype.indexIsInRange = function(index) {
      return index >= 0 && index < this.adapter.getTabListLength();
    };
    MDCTabBarFoundation2.prototype.isRTL = function() {
      return this.adapter.isRTL();
    };
    MDCTabBarFoundation2.prototype.scrollIntoViewImpl = function(index) {
      var scrollPosition = this.adapter.getScrollPosition();
      var barWidth = this.adapter.getOffsetWidth();
      var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
      var nextIndex = this.findAdjacentTabIndexClosestToEdge(index, tabDimensions, scrollPosition, barWidth);
      if (!this.indexIsInRange(nextIndex)) {
        return;
      }
      var scrollIncrement = this.calculateScrollIncrement(index, nextIndex, scrollPosition, barWidth);
      this.adapter.incrementScroll(scrollIncrement);
    };
    MDCTabBarFoundation2.prototype.scrollIntoViewImplRTL = function(index) {
      var scrollPosition = this.adapter.getScrollPosition();
      var barWidth = this.adapter.getOffsetWidth();
      var tabDimensions = this.adapter.getTabDimensionsAtIndex(index);
      var scrollWidth = this.adapter.getScrollContentWidth();
      var nextIndex = this.findAdjacentTabIndexClosestToEdgeRTL(index, tabDimensions, scrollPosition, barWidth, scrollWidth);
      if (!this.indexIsInRange(nextIndex)) {
        return;
      }
      var scrollIncrement = this.calculateScrollIncrementRTL(index, nextIndex, scrollPosition, barWidth, scrollWidth);
      this.adapter.incrementScroll(scrollIncrement);
    };
    return MDCTabBarFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/tab-bar/component.js
var strings28 = MDCTabBarFoundation.strings;
var tabIdCounter = 0;
var MDCTabBar = (
  /** @class */
  function(_super) {
    __extends(MDCTabBar2, _super);
    function MDCTabBar2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTabBar2.attachTo = function(root) {
      return new MDCTabBar2(root);
    };
    Object.defineProperty(MDCTabBar2.prototype, "focusOnActivate", {
      set: function(focusOnActivate) {
        var e_1, _a2;
        try {
          for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
            var tab = _c.value;
            tab.focusOnActivate = focusOnActivate;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTabBar2.prototype, "useAutomaticActivation", {
      set: function(useAutomaticActivation) {
        this.foundation.setUseAutomaticActivation(useAutomaticActivation);
      },
      enumerable: false,
      configurable: true
    });
    MDCTabBar2.prototype.initialize = function(tabFactory, tabScrollerFactory) {
      if (tabFactory === void 0) {
        tabFactory = function(el) {
          return new MDCTab(el);
        };
      }
      if (tabScrollerFactory === void 0) {
        tabScrollerFactory = function(el) {
          return new MDCTabScroller(el);
        };
      }
      this.tabList = this.instantiateTabs(tabFactory);
      this.tabScroller = this.instantiatetabScroller(tabScrollerFactory);
    };
    MDCTabBar2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.handleTabInteraction = function(evt) {
        _this.foundation.handleTabInteraction(evt);
      };
      this.handleKeyDown = function(evt) {
        _this.foundation.handleKeyDown(evt);
      };
      this.listen(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
      this.listen("keydown", this.handleKeyDown);
      for (var i = 0; i < this.tabList.length; i++) {
        if (this.tabList[i].active) {
          this.scrollIntoView(i);
          break;
        }
      }
    };
    MDCTabBar2.prototype.destroy = function() {
      var e_2, _a2;
      _super.prototype.destroy.call(this);
      this.unlisten(MDCTabFoundation.strings.INTERACTED_EVENT, this.handleTabInteraction);
      this.unlisten("keydown", this.handleKeyDown);
      try {
        for (var _b = __values(this.tabList), _c = _b.next(); !_c.done; _c = _b.next()) {
          var tab = _c.value;
          tab.destroy();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      if (this.tabScroller) {
        this.tabScroller.destroy();
      }
    };
    MDCTabBar2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        scrollTo: function(scrollX) {
          _this.tabScroller.scrollTo(scrollX);
        },
        incrementScroll: function(scrollXIncrement) {
          _this.tabScroller.incrementScroll(scrollXIncrement);
        },
        getScrollPosition: function() {
          return _this.tabScroller.getScrollPosition();
        },
        getScrollContentWidth: function() {
          return _this.tabScroller.getScrollContentWidth();
        },
        getOffsetWidth: function() {
          return _this.root.offsetWidth;
        },
        isRTL: function() {
          return window.getComputedStyle(_this.root).getPropertyValue("direction") === "rtl";
        },
        setActiveTab: function(index) {
          _this.foundation.activateTab(index);
        },
        activateTabAtIndex: function(index, clientRect) {
          _this.tabList[index].activate(clientRect);
        },
        deactivateTabAtIndex: function(index) {
          _this.tabList[index].deactivate();
        },
        focusTabAtIndex: function(index) {
          _this.tabList[index].focus();
        },
        getTabIndicatorClientRectAtIndex: function(index) {
          return _this.tabList[index].computeIndicatorClientRect();
        },
        getTabDimensionsAtIndex: function(index) {
          return _this.tabList[index].computeDimensions();
        },
        getPreviousActiveTabIndex: function() {
          for (var i = 0; i < _this.tabList.length; i++) {
            if (_this.tabList[i].active) {
              return i;
            }
          }
          return -1;
        },
        getFocusedTabIndex: function() {
          var tabElements = _this.getTabElements();
          var activeElement = document.activeElement;
          return tabElements.indexOf(activeElement);
        },
        getIndexOfTabById: function(id5) {
          for (var i = 0; i < _this.tabList.length; i++) {
            if (_this.tabList[i].id === id5) {
              return i;
            }
          }
          return -1;
        },
        getTabListLength: function() {
          return _this.tabList.length;
        },
        notifyTabActivated: function(index) {
          return _this.emit(strings28.TAB_ACTIVATED_EVENT, { index }, true);
        }
      };
      return new MDCTabBarFoundation(adapter);
    };
    MDCTabBar2.prototype.activateTab = function(index) {
      this.foundation.activateTab(index);
    };
    MDCTabBar2.prototype.scrollIntoView = function(index) {
      this.foundation.scrollIntoView(index);
    };
    MDCTabBar2.prototype.getTabElements = function() {
      return [].slice.call(this.root.querySelectorAll(strings28.TAB_SELECTOR));
    };
    MDCTabBar2.prototype.instantiateTabs = function(tabFactory) {
      return this.getTabElements().map(function(el) {
        el.id = el.id || "mdc-tab-" + ++tabIdCounter;
        return tabFactory(el);
      });
    };
    MDCTabBar2.prototype.instantiatetabScroller = function(tabScrollerFactory) {
      var tabScrollerElement = this.root.querySelector(strings28.TAB_SCROLLER_SELECTOR);
      if (tabScrollerElement) {
        return tabScrollerFactory(tabScrollerElement);
      }
      return null;
    };
    return MDCTabBar2;
  }(MDCComponent)
);

// node_modules/@material/tab-bar/types.js
var import_dist1255 = __toESM(require_dist());
var import_dist1256 = __toESM(require_dist2());
var import_dist1257 = __toESM(require_dist3());

// node_modules/@material/tab/index.js
var import_dist1267 = __toESM(require_dist());
var import_dist1268 = __toESM(require_dist2());
var import_dist1269 = __toESM(require_dist3());

// node_modules/@material/tab/adapter.js
var import_dist1261 = __toESM(require_dist());
var import_dist1262 = __toESM(require_dist2());
var import_dist1263 = __toESM(require_dist3());

// node_modules/@material/tab/types.js
var import_dist1264 = __toESM(require_dist());
var import_dist1265 = __toESM(require_dist2());
var import_dist1266 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/dist/mdc-tab-bar.html?raw
var mdc_tab_bar_default = '<template class="mdc-tab-bar" role="tablist" keydown.trigger="handleKeyDown_($event)"\n  mdctab:interacted.trigger="handleTabInteraction_($event)">\n  <div as-element="mdc-tab-scroller" component.ref="tabScroller_" align.bind="align">\n    <au-slot></au-slot>\n  </div>\n</template>\n';

// node_modules/@aurelia-mdc-web/tab-bar/dist/mdc-tab-bar.js
MDCTabFoundation.strings.INTERACTED_EVENT = MDCTabFoundation.strings.INTERACTED_EVENT.toLowerCase();
strings27.TAB_ACTIVATED_EVENT = strings27.TAB_ACTIVATED_EVENT.toLowerCase();
var MdcTabBar = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-tab-bar", template: mdc_tab_bar_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent22;
  let _focusOnActivate_decorators;
  let _focusOnActivate_initializers = [];
  let _focusOnActivate_extraInitializers = [];
  let _useAutomaticActivation_decorators;
  let _useAutomaticActivation_initializers = [];
  let _useAutomaticActivation_extraInitializers = [];
  let _align_decorators;
  let _align_initializers = [];
  let _align_extraInitializers = [];
  var MdcTabBar2 = _classThis = class extends _classSuper {
    focusOnActivateChanged() {
      var _a2;
      (_a2 = this.tabScroller_) == null ? void 0 : _a2.tabs.forEach((tab) => tab.focusOnActivate = this.focusOnActivate);
    }
    useAutomaticActivationChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setUseAutomaticActivation(this.useAutomaticActivation);
    }
    initialSyncWithDOM() {
      this.focusOnActivateChanged();
      this.useAutomaticActivationChanged();
      for (let i = 0; i < this.tabScroller_.tabs.length; i++) {
        if (this.tabScroller_.tabs[i].active) {
          this.scrollIntoView(i);
          break;
        }
      }
    }
    handleKeyDown_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeyDown(evt);
      return true;
    }
    handleTabInteraction_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleTabInteraction(evt);
    }
    getDefaultFoundation() {
      const adapter = {
        scrollTo: (scrollX) => this.tabScroller_.scrollTo(scrollX),
        incrementScroll: (scrollXIncrement) => this.tabScroller_.incrementScroll(scrollXIncrement),
        getScrollPosition: () => this.tabScroller_.getScrollPosition(),
        getScrollContentWidth: () => this.tabScroller_.getScrollContentWidth(),
        getOffsetWidth: () => this.root.offsetWidth,
        isRTL: () => window.getComputedStyle(this.root).getPropertyValue("direction") === "rtl",
        setActiveTab: (index) => {
          var _a2;
          return (_a2 = this.foundation) == null ? void 0 : _a2.activateTab(index);
        },
        activateTabAtIndex: (index, clientRect) => this.tabScroller_.tabs[index].activate(clientRect),
        deactivateTabAtIndex: (index) => this.tabScroller_.tabs[index].deactivate(),
        focusTabAtIndex: (index) => this.tabScroller_.tabs[index].focus(),
        getTabIndicatorClientRectAtIndex: (index) => this.tabScroller_.tabs[index].computeIndicatorClientRect(),
        getTabDimensionsAtIndex: (index) => this.tabScroller_.tabs[index].computeDimensions(),
        getPreviousActiveTabIndex: () => {
          for (let i = 0; i < this.tabScroller_.tabs.length; i++) {
            if (this.tabScroller_.tabs[i].isActive()) {
              return i;
            }
          }
          return -1;
        },
        getFocusedTabIndex: () => {
          const tabElements = this.getTabElements_();
          const activeElement = document.activeElement;
          return tabElements.indexOf(activeElement);
        },
        getIndexOfTabById: (id5) => {
          for (let i = 0; i < this.tabScroller_.tabs.length; i++) {
            if (this.tabScroller_.tabs[i].id === id5) {
              return i;
            }
          }
          return -1;
        },
        getTabListLength: () => this.tabScroller_.tabs.length,
        notifyTabActivated: (index) => this.emit(strings27.TAB_ACTIVATED_EVENT, { index }, true)
      };
      return new MDCTabBarFoundation(adapter);
    }
    /**
     * Activates the tab at the given index
     * @param index The index of the tab
     */
    activateTab(index) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activateTab(index);
    }
    /**
     * Scrolls the tab at the given index into view
     * @param index THe index of the tab
     */
    scrollIntoView(index) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.scrollIntoView(index);
    }
    /**
     * Returns all the tab elements in a nice clean array
     */
    getTabElements_() {
      return [].slice.call(this.root.querySelectorAll(strings27.TAB_SELECTOR));
    }
    constructor() {
      super(...arguments);
      this.focusOnActivate = __runInitializers(this, _focusOnActivate_initializers, void 0);
      this.useAutomaticActivation = (__runInitializers(this, _focusOnActivate_extraInitializers), __runInitializers(this, _useAutomaticActivation_initializers, void 0));
      this.align = (__runInitializers(this, _useAutomaticActivation_extraInitializers), __runInitializers(this, _align_initializers, void 0));
      __runInitializers(this, _align_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTabBar");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _focusOnActivate_decorators = [bindable({ set: booleanAttr22 })];
    _useAutomaticActivation_decorators = [bindable({ set: booleanAttr22 })];
    _align_decorators = [bindable()];
    __esDecorate(null, null, _focusOnActivate_decorators, { kind: "field", name: "focusOnActivate", static: false, private: false, access: { has: (obj) => "focusOnActivate" in obj, get: (obj) => obj.focusOnActivate, set: (obj, value) => {
      obj.focusOnActivate = value;
    } }, metadata: _metadata }, _focusOnActivate_initializers, _focusOnActivate_extraInitializers);
    __esDecorate(null, null, _useAutomaticActivation_decorators, { kind: "field", name: "useAutomaticActivation", static: false, private: false, access: { has: (obj) => "useAutomaticActivation" in obj, get: (obj) => obj.useAutomaticActivation, set: (obj, value) => {
      obj.useAutomaticActivation = value;
    } }, metadata: _metadata }, _useAutomaticActivation_initializers, _useAutomaticActivation_extraInitializers);
    __esDecorate(null, null, _align_decorators, { kind: "field", name: "align", static: false, private: false, access: { has: (obj) => "align" in obj, get: (obj) => obj.align, set: (obj, value) => {
      obj.align = value;
    } }, metadata: _metadata }, _align_initializers, _align_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTabBar2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTabBar2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/dist/tab/mdc-tab.js
var import_dist1273 = __toESM(require_dist());
var import_dist1274 = __toESM(require_dist2());
var import_dist1275 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/dist/tab/mdc-tab.html?raw
var mdc_tab_default = `<template class="
    mdc-tab
    \${active ? 'mdc-tab--active' : ''}
    \${minWidth ? 'mdc-tab--min-width' : ''}
    \${stacked ? 'mdc-tab--stacked' : ''}
  " role="tab" aria-selected="false" tabindex="-1" mdc-ripple="no-class.bind: true"
  click.trigger="handleClick_()">
  <span class="mdc-tab__content" element.ref="content_">
    <span class="mdc-tab__icon material-icons" aria-hidden="true" if.bind="icon">\${icon}</span>
    <span class="mdc-tab__text-label" if.bind="label">\${label}</span>
    <au-slot></au-slot>
    <mdc-tab-indicator if.bind="fixed" active.bind="active" fade.bind="fade" component.ref="tabIndicator_"
      icon.bind="indicatorIcon">
    </mdc-tab-indicator>
  </span>
  <mdc-tab-indicator if.bind="!fixed" active.bind="active" fade.bind="fade" component.ref="tabIndicator_"
    icon.bind="indicatorIcon">
  </mdc-tab-indicator>
  <span class="mdc-tab__ripple" ref="rippleSurface"></span>
</template>
`;

// node_modules/@aurelia-mdc-web/tab-bar/dist/tab/mdc-tab.js
var tabId = 0;
MDCTabFoundation.strings.INTERACTED_EVENT = MDCTabFoundation.strings.INTERACTED_EVENT.toLowerCase();
var MdcTab = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-tab", template: mdc_tab_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent22;
  let _id_decorators;
  let _id_initializers = [];
  let _id_extraInitializers = [];
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _active_decorators;
  let _active_initializers = [];
  let _active_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _minWidth_decorators;
  let _minWidth_initializers = [];
  let _minWidth_extraInitializers = [];
  let _fade_decorators;
  let _fade_initializers = [];
  let _fade_extraInitializers = [];
  let _stacked_decorators;
  let _stacked_initializers = [];
  let _stacked_extraInitializers = [];
  let _indicatorIcon_decorators;
  let _indicatorIcon_initializers = [];
  let _indicatorIcon_extraInitializers = [];
  var MdcTab2 = _classThis = class extends _classSuper {
    handleClick_() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick();
      return true;
    }
    getDefaultFoundation() {
      const adapter = {
        setAttr: (attr, value) => this.root.setAttribute(attr, value),
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        activateIndicator: (previousIndicatorClientRect) => this.tabIndicator_.activate(previousIndicatorClientRect),
        deactivateIndicator: () => this.tabIndicator_.deactivate(),
        notifyInteracted: () => this.emit(
          MDCTabFoundation.strings.INTERACTED_EVENT,
          { tabId: this.id },
          true
          /* bubble */
        ),
        getOffsetLeft: () => this.root.offsetLeft,
        getOffsetWidth: () => this.root.offsetWidth,
        getContentOffsetLeft: () => this.content_.offsetLeft,
        getContentOffsetWidth: () => this.content_.offsetWidth,
        focus: () => this.root.focus()
      };
      return new MDCTabFoundation(adapter);
    }
    isActive() {
      return this.foundation.isActive();
    }
    set focusOnActivate(focusOnActivate) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setFocusOnActivate(focusOnActivate);
    }
    /**
     * Activates the tab
     */
    activate(computeIndicatorClientRect) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activate(computeIndicatorClientRect);
    }
    /**
     * Deactivates the tab
     */
    deactivate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.deactivate();
    }
    /**
     * Returns the indicator's client rect
     */
    computeIndicatorClientRect() {
      return this.tabIndicator_.computeContentClientRect();
    }
    computeDimensions() {
      return this.foundation.computeDimensions();
    }
    /**
     * Focuses the tab
     */
    focus() {
      this.root.focus();
    }
    constructor() {
      super(...arguments);
      this.id = __runInitializers(this, _id_initializers, `mdc-tab-${++tabId}`);
      this.fixed = (__runInitializers(this, _id_extraInitializers), __runInitializers(this, _fixed_initializers, void 0));
      this.active = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _active_initializers, void 0));
      this.icon = (__runInitializers(this, _active_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.label = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _label_initializers, void 0));
      this.minWidth = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _minWidth_initializers, void 0));
      this.fade = (__runInitializers(this, _minWidth_extraInitializers), __runInitializers(this, _fade_initializers, void 0));
      this.stacked = (__runInitializers(this, _fade_extraInitializers), __runInitializers(this, _stacked_initializers, void 0));
      this.indicatorIcon = (__runInitializers(this, _stacked_extraInitializers), __runInitializers(this, _indicatorIcon_initializers, void 0));
      __runInitializers(this, _indicatorIcon_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTab");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _id_decorators = [bindable()];
    _fixed_decorators = [bindable({ set: booleanAttr22 })];
    _active_decorators = [bindable({ set: booleanAttr22 })];
    _icon_decorators = [bindable()];
    _label_decorators = [bindable()];
    _minWidth_decorators = [bindable({ set: booleanAttr22 })];
    _fade_decorators = [bindable({ set: booleanAttr22 })];
    _stacked_decorators = [bindable({ set: booleanAttr22 })];
    _indicatorIcon_decorators = [bindable()];
    __esDecorate(null, null, _id_decorators, { kind: "field", name: "id", static: false, private: false, access: { has: (obj) => "id" in obj, get: (obj) => obj.id, set: (obj, value) => {
      obj.id = value;
    } }, metadata: _metadata }, _id_initializers, _id_extraInitializers);
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _active_decorators, { kind: "field", name: "active", static: false, private: false, access: { has: (obj) => "active" in obj, get: (obj) => obj.active, set: (obj, value) => {
      obj.active = value;
    } }, metadata: _metadata }, _active_initializers, _active_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _minWidth_decorators, { kind: "field", name: "minWidth", static: false, private: false, access: { has: (obj) => "minWidth" in obj, get: (obj) => obj.minWidth, set: (obj, value) => {
      obj.minWidth = value;
    } }, metadata: _metadata }, _minWidth_initializers, _minWidth_extraInitializers);
    __esDecorate(null, null, _fade_decorators, { kind: "field", name: "fade", static: false, private: false, access: { has: (obj) => "fade" in obj, get: (obj) => obj.fade, set: (obj, value) => {
      obj.fade = value;
    } }, metadata: _metadata }, _fade_initializers, _fade_extraInitializers);
    __esDecorate(null, null, _stacked_decorators, { kind: "field", name: "stacked", static: false, private: false, access: { has: (obj) => "stacked" in obj, get: (obj) => obj.stacked, set: (obj, value) => {
      obj.stacked = value;
    } }, metadata: _metadata }, _stacked_initializers, _stacked_extraInitializers);
    __esDecorate(null, null, _indicatorIcon_decorators, { kind: "field", name: "indicatorIcon", static: false, private: false, access: { has: (obj) => "indicatorIcon" in obj, get: (obj) => obj.indicatorIcon, set: (obj, value) => {
      obj.indicatorIcon = value;
    } }, metadata: _metadata }, _indicatorIcon_initializers, _indicatorIcon_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTab2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTab2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/dist/scroller/mdc-tab-scroller.js
var import_dist1285 = __toESM(require_dist());
var import_dist1286 = __toESM(require_dist2());
var import_dist1287 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/index.js
var import_dist1282 = __toESM(require_dist());
var import_dist1283 = __toESM(require_dist2());
var import_dist1284 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/adapter.js
var import_dist1276 = __toESM(require_dist());
var import_dist1277 = __toESM(require_dist2());
var import_dist1278 = __toESM(require_dist3());

// node_modules/@material/tab-scroller/types.js
var import_dist1279 = __toESM(require_dist());
var import_dist1280 = __toESM(require_dist2());
var import_dist1281 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/dist/scroller/mdc-tab-scroller.html?raw
var mdc_tab_scroller_default = `<template class="mdc-tab-scroller
  \${align ? 'mdc-tab-scroller--align-' + align : ''}
  " wheel.trigger="handleInteraction_()" touchstart.trigger="handleInteraction_()"
  pointerdown.trigger="handleInteraction_()" mousedown.trigger="handleInteraction_()"
  keydown.trigger="handleInteraction_()" transitionend.trigger="handleTransitionEnd_($event)">
  <div class="mdc-tab-scroller__scroll-area" element.ref="area_">
    <div class="mdc-tab-scroller__scroll-content" element.ref="content_">
      <au-slot></au-slot>
    </div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/tab-bar/dist/scroller/mdc-tab-scroller.js
var MdcTabScroller = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-tab-scroller", template: mdc_tab_scroller_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent22;
  let _align_decorators;
  let _align_initializers = [];
  let _align_extraInitializers = [];
  let _tabElements_decorators;
  let _tabElements_initializers = [];
  let _tabElements_extraInitializers = [];
  var MdcTabScroller2 = _classThis = class extends _classSuper {
    get tabs() {
      return this.tabElements.map((x) => CustomElement.for(x).viewModel);
    }
    getDefaultFoundation() {
      const adapter = {
        eventTargetMatchesSelector: (evtTarget, selector) => matches(evtTarget, selector),
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        addScrollAreaClass: (className) => this.area_.classList.add(className),
        setScrollAreaStyleProperty: (prop, value) => this.area_.style.setProperty(prop, value),
        setScrollContentStyleProperty: (prop, value) => this.content_.style.setProperty(prop, value),
        getScrollContentStyleValue: (propName) => window.getComputedStyle(this.content_).getPropertyValue(propName),
        setScrollAreaScrollLeft: (scrollX) => this.area_.scrollLeft = scrollX,
        getScrollAreaScrollLeft: () => this.area_.scrollLeft,
        getScrollContentOffsetWidth: () => this.content_.offsetWidth,
        getScrollAreaOffsetWidth: () => this.area_.offsetWidth,
        computeScrollAreaClientRect: () => this.area_.getBoundingClientRect(),
        computeScrollContentClientRect: () => this.content_.getBoundingClientRect(),
        computeHorizontalScrollbarHeight: () => util_exports4.computeHorizontalScrollbarHeight(document)
      };
      return new MDCTabScrollerFoundation(adapter);
    }
    handleInteraction_() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleInteraction();
      return true;
    }
    handleTransitionEnd_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleTransitionEnd(evt);
      return true;
    }
    /**
     * Returns the current visual scroll position
     */
    getScrollPosition() {
      return this.foundation.getScrollPosition();
    }
    /**
     * Returns the width of the scroll content
     */
    getScrollContentWidth() {
      return this.content_.offsetWidth;
    }
    /**
     * Increments the scroll value by the given amount
     * @param scrollXIncrement The pixel value by which to increment the scroll value
     */
    incrementScroll(scrollXIncrement) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.incrementScroll(scrollXIncrement);
    }
    /**
     * Scrolls to the given pixel position
     * @param scrollX The pixel value to scroll to
     */
    scrollTo(scrollX) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.scrollTo(scrollX);
    }
    constructor() {
      super(...arguments);
      this.align = __runInitializers(this, _align_initializers, void 0);
      this.tabElements = (__runInitializers(this, _align_extraInitializers), __runInitializers(this, _tabElements_initializers, void 0));
      __runInitializers(this, _tabElements_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTabScroller");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _align_decorators = [bindable()];
    _tabElements_decorators = [slotted({ query: "mdc-tab" })];
    __esDecorate(null, null, _align_decorators, { kind: "field", name: "align", static: false, private: false, access: { has: (obj) => "align" in obj, get: (obj) => obj.align, set: (obj, value) => {
      obj.align = value;
    } }, metadata: _metadata }, _align_initializers, _align_extraInitializers);
    __esDecorate(null, null, _tabElements_decorators, { kind: "field", name: "tabElements", static: false, private: false, access: { has: (obj) => "tabElements" in obj, get: (obj) => obj.tabElements, set: (obj, value) => {
      obj.tabElements = value;
    } }, metadata: _metadata }, _tabElements_initializers, _tabElements_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTabScroller2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTabScroller2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/dist/indicator/mdc-tab-indicator.js
var import_dist1294 = __toESM(require_dist());
var import_dist1295 = __toESM(require_dist2());
var import_dist1296 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/index.js
var import_dist1291 = __toESM(require_dist());
var import_dist1292 = __toESM(require_dist2());
var import_dist1293 = __toESM(require_dist3());

// node_modules/@material/tab-indicator/adapter.js
var import_dist1288 = __toESM(require_dist());
var import_dist1289 = __toESM(require_dist2());
var import_dist1290 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tab-bar/dist/indicator/mdc-tab-indicator.html?raw
var mdc_tab_indicator_default = `<template class="
    mdc-tab-indicator
    \${fade ? 'mdc-tab-indicator--fade' : ''}
    \${active ? 'mdc-tab-indicator--active' : ''}
  ">
  <span
    class="mdc-tab-indicator__content mdc-tab-indicator__content--\${icon ? 'icon' : 'underline'} \${icon ? 'material-icons' : ''}"
    aria-hidden="true" element.ref="content"><span if.bind="icon">\${icon}</span></span>
</template>
`;

// node_modules/@aurelia-mdc-web/tab-bar/dist/indicator/mdc-tab-indicator.js
var MdcTabIndicator = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-tab-indicator", template: mdc_tab_indicator_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent22;
  let _fade_decorators;
  let _fade_initializers = [];
  let _fade_extraInitializers = [];
  let _active_decorators;
  let _active_initializers = [];
  let _active_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  var MdcTabIndicator2 = _classThis = class extends _classSuper {
    computeContentClientRect() {
      return this.foundation.computeContentClientRect();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        computeContentClientRect: () => this.content.getBoundingClientRect(),
        setContentStyleProperty: (prop, value) => this.content.style.setProperty(prop, value)
      };
      if (this.root.classList.contains(MDCTabIndicatorFoundation.cssClasses.FADE)) {
        return new MDCFadingTabIndicatorFoundation(adapter);
      }
      return new MDCSlidingTabIndicatorFoundation(adapter);
    }
    activate(previousIndicatorClientRect) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activate(previousIndicatorClientRect);
    }
    deactivate() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.deactivate();
    }
    constructor() {
      super(...arguments);
      this.fade = __runInitializers(this, _fade_initializers, void 0);
      this.active = (__runInitializers(this, _fade_extraInitializers), __runInitializers(this, _active_initializers, void 0));
      this.icon = (__runInitializers(this, _active_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      __runInitializers(this, _icon_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTabIndicator");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _fade_decorators = [bindable({ set: booleanAttr22 })];
    _active_decorators = [bindable({ set: booleanAttr22 })];
    _icon_decorators = [bindable()];
    __esDecorate(null, null, _fade_decorators, { kind: "field", name: "fade", static: false, private: false, access: { has: (obj) => "fade" in obj, get: (obj) => obj.fade, set: (obj, value) => {
      obj.fade = value;
    } }, metadata: _metadata }, _fade_initializers, _fade_extraInitializers);
    __esDecorate(null, null, _active_decorators, { kind: "field", name: "active", static: false, private: false, access: { has: (obj) => "active" in obj, get: (obj) => obj.active, set: (obj, value) => {
      obj.active = value;
    } }, metadata: _metadata }, _active_initializers, _active_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTabIndicator2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTabIndicator2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tab-bar/dist/index.js
var registered18 = false;
var TabBarConfiguration = {
  register(container) {
    if (registered18) {
      return container;
    } else {
      registered18 = true;
      return container.register(MdcTabBar, MdcTab, MdcTabScroller, MdcTabIndicator);
    }
  }
};

// node_modules/@aurelia-mdc-web/text-field/dist/index.js
var import_dist1405 = __toESM(require_dist());
var import_dist1406 = __toESM(require_dist2());
var import_dist1407 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field.js
var import_dist1390 = __toESM(require_dist());
var import_dist1391 = __toESM(require_dist2());
var import_dist1392 = __toESM(require_dist3());

// node_modules/@material/textfield/index.js
var import_dist1360 = __toESM(require_dist());
var import_dist1361 = __toESM(require_dist2());
var import_dist1362 = __toESM(require_dist3());

// node_modules/@material/textfield/adapter.js
var import_dist1300 = __toESM(require_dist());
var import_dist1301 = __toESM(require_dist2());
var import_dist1302 = __toESM(require_dist3());

// node_modules/@material/textfield/component.js
var import_dist1336 = __toESM(require_dist());
var import_dist1337 = __toESM(require_dist2());
var import_dist1338 = __toESM(require_dist3());

// node_modules/@material/textfield/character-counter/component.js
var import_dist1309 = __toESM(require_dist());
var import_dist1310 = __toESM(require_dist2());
var import_dist1311 = __toESM(require_dist3());

// node_modules/@material/textfield/character-counter/foundation.js
var import_dist1306 = __toESM(require_dist());
var import_dist1307 = __toESM(require_dist2());
var import_dist1308 = __toESM(require_dist3());

// node_modules/@material/textfield/character-counter/constants.js
var import_dist1303 = __toESM(require_dist());
var import_dist1304 = __toESM(require_dist2());
var import_dist1305 = __toESM(require_dist3());
var cssClasses28 = {
  ROOT: "mdc-text-field-character-counter"
};
var strings29 = {
  ROOT_SELECTOR: "." + cssClasses28.ROOT
};

// node_modules/@material/textfield/character-counter/foundation.js
var MDCTextFieldCharacterCounterFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldCharacterCounterFoundation2, _super);
    function MDCTextFieldCharacterCounterFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCTextFieldCharacterCounterFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "cssClasses", {
      get: function() {
        return cssClasses28;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "strings", {
      get: function() {
        return strings29;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldCharacterCounterFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldCharacterCounterAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          setContent: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldCharacterCounterFoundation2.prototype.setCounterValue = function(currentLength, maxLength) {
      currentLength = Math.min(currentLength, maxLength);
      this.adapter.setContent(currentLength + " / " + maxLength);
    };
    return MDCTextFieldCharacterCounterFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/textfield/character-counter/component.js
var MDCTextFieldCharacterCounter = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldCharacterCounter2, _super);
    function MDCTextFieldCharacterCounter2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldCharacterCounter2.attachTo = function(root) {
      return new MDCTextFieldCharacterCounter2(root);
    };
    Object.defineProperty(MDCTextFieldCharacterCounter2.prototype, "foundationForTextField", {
      // Provided for access by MDCTextField component
      get: function() {
        return this.foundation;
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldCharacterCounter2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        setContent: function(content) {
          _this.root.textContent = content;
        }
      };
      return new MDCTextFieldCharacterCounterFoundation(adapter);
    };
    return MDCTextFieldCharacterCounter2;
  }(MDCComponent)
);

// node_modules/@material/textfield/constants.js
var import_dist1312 = __toESM(require_dist());
var import_dist1313 = __toESM(require_dist2());
var import_dist1314 = __toESM(require_dist3());
var strings30 = {
  ARIA_CONTROLS: "aria-controls",
  ARIA_DESCRIBEDBY: "aria-describedby",
  INPUT_SELECTOR: ".mdc-text-field__input",
  LABEL_SELECTOR: ".mdc-floating-label",
  LEADING_ICON_SELECTOR: ".mdc-text-field__icon--leading",
  LINE_RIPPLE_SELECTOR: ".mdc-line-ripple",
  OUTLINE_SELECTOR: ".mdc-notched-outline",
  PREFIX_SELECTOR: ".mdc-text-field__affix--prefix",
  SUFFIX_SELECTOR: ".mdc-text-field__affix--suffix",
  TRAILING_ICON_SELECTOR: ".mdc-text-field__icon--trailing"
};
var cssClasses29 = {
  DISABLED: "mdc-text-field--disabled",
  FOCUSED: "mdc-text-field--focused",
  HELPER_LINE: "mdc-text-field-helper-line",
  INVALID: "mdc-text-field--invalid",
  LABEL_FLOATING: "mdc-text-field--label-floating",
  NO_LABEL: "mdc-text-field--no-label",
  OUTLINED: "mdc-text-field--outlined",
  ROOT: "mdc-text-field",
  TEXTAREA: "mdc-text-field--textarea",
  WITH_LEADING_ICON: "mdc-text-field--with-leading-icon",
  WITH_TRAILING_ICON: "mdc-text-field--with-trailing-icon",
  WITH_INTERNAL_COUNTER: "mdc-text-field--with-internal-counter"
};
var numbers11 = {
  LABEL_SCALE: 0.75
};
var VALIDATION_ATTR_WHITELIST = [
  "pattern",
  "min",
  "max",
  "required",
  "step",
  "minlength",
  "maxlength"
];
var ALWAYS_FLOAT_TYPES = [
  "color",
  "date",
  "datetime-local",
  "month",
  "range",
  "time",
  "week"
];

// node_modules/@material/textfield/foundation.js
var import_dist1315 = __toESM(require_dist());
var import_dist1316 = __toESM(require_dist2());
var import_dist1317 = __toESM(require_dist3());
var POINTERDOWN_EVENTS = ["mousedown", "touchstart"];
var INTERACTION_EVENTS2 = ["click", "keydown"];
var MDCTextFieldFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldFoundation2, _super);
    function MDCTextFieldFoundation2(adapter, foundationMap) {
      if (foundationMap === void 0) {
        foundationMap = {};
      }
      var _this = _super.call(this, __assign(__assign({}, MDCTextFieldFoundation2.defaultAdapter), adapter)) || this;
      _this.isFocused = false;
      _this.receivedUserInput = false;
      _this.valid = true;
      _this.useNativeValidation = true;
      _this.validateOnValueChange = true;
      _this.helperText = foundationMap.helperText;
      _this.characterCounter = foundationMap.characterCounter;
      _this.leadingIcon = foundationMap.leadingIcon;
      _this.trailingIcon = foundationMap.trailingIcon;
      _this.inputFocusHandler = function() {
        _this.activateFocus();
      };
      _this.inputBlurHandler = function() {
        _this.deactivateFocus();
      };
      _this.inputInputHandler = function() {
        _this.handleInput();
      };
      _this.setPointerXOffset = function(evt) {
        _this.setTransformOrigin(evt);
      };
      _this.textFieldInteractionHandler = function() {
        _this.handleTextFieldInteraction();
      };
      _this.validationAttributeChangeHandler = function(attributesList) {
        _this.handleValidationAttributeChange(attributesList);
      };
      return _this;
    }
    Object.defineProperty(MDCTextFieldFoundation2, "cssClasses", {
      get: function() {
        return cssClasses29;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2, "strings", {
      get: function() {
        return strings30;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2, "numbers", {
      get: function() {
        return numbers11;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldAlwaysFloat", {
      get: function() {
        var type = this.getNativeInput().type;
        return ALWAYS_FLOAT_TYPES.indexOf(type) >= 0;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldFloat", {
      get: function() {
        return this.shouldAlwaysFloat || this.isFocused || !!this.getValue() || this.isBadInput();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2.prototype, "shouldShake", {
      get: function() {
        return !this.isFocused && !this.isValid() && !!this.getValue();
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldAdapter} for typing information on parameters and
       * return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return true;
          },
          setInputAttr: function() {
            return void 0;
          },
          removeInputAttr: function() {
            return void 0;
          },
          registerTextFieldInteractionHandler: function() {
            return void 0;
          },
          deregisterTextFieldInteractionHandler: function() {
            return void 0;
          },
          registerInputInteractionHandler: function() {
            return void 0;
          },
          deregisterInputInteractionHandler: function() {
            return void 0;
          },
          registerValidationAttributeChangeHandler: function() {
            return new MutationObserver(function() {
              return void 0;
            });
          },
          deregisterValidationAttributeChangeHandler: function() {
            return void 0;
          },
          getNativeInput: function() {
            return null;
          },
          isFocused: function() {
            return false;
          },
          activateLineRipple: function() {
            return void 0;
          },
          deactivateLineRipple: function() {
            return void 0;
          },
          setLineRippleTransformOrigin: function() {
            return void 0;
          },
          shakeLabel: function() {
            return void 0;
          },
          floatLabel: function() {
            return void 0;
          },
          setLabelRequired: function() {
            return void 0;
          },
          hasLabel: function() {
            return false;
          },
          getLabelWidth: function() {
            return 0;
          },
          hasOutline: function() {
            return false;
          },
          notchOutline: function() {
            return void 0;
          },
          closeOutline: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldFoundation2.prototype.init = function() {
      var e_1, _a2, e_2, _b;
      if (this.adapter.hasLabel() && this.getNativeInput().required) {
        this.adapter.setLabelRequired(true);
      }
      if (this.adapter.isFocused()) {
        this.inputFocusHandler();
      } else if (this.adapter.hasLabel() && this.shouldFloat) {
        this.notchOutline(true);
        this.adapter.floatLabel(true);
        this.styleFloating(true);
      }
      this.adapter.registerInputInteractionHandler("focus", this.inputFocusHandler);
      this.adapter.registerInputInteractionHandler("blur", this.inputBlurHandler);
      this.adapter.registerInputInteractionHandler("input", this.inputInputHandler);
      try {
        for (var POINTERDOWN_EVENTS_1 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next(); !POINTERDOWN_EVENTS_1_1.done; POINTERDOWN_EVENTS_1_1 = POINTERDOWN_EVENTS_1.next()) {
          var evtType = POINTERDOWN_EVENTS_1_1.value;
          this.adapter.registerInputInteractionHandler(evtType, this.setPointerXOffset);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (POINTERDOWN_EVENTS_1_1 && !POINTERDOWN_EVENTS_1_1.done && (_a2 = POINTERDOWN_EVENTS_1.return)) _a2.call(POINTERDOWN_EVENTS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      try {
        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS2), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
          var evtType = INTERACTION_EVENTS_1_1.value;
          this.adapter.registerTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_b = INTERACTION_EVENTS_1.return)) _b.call(INTERACTION_EVENTS_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
      this.validationObserver = this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler);
      this.setcharacterCounter(this.getValue().length);
    };
    MDCTextFieldFoundation2.prototype.destroy = function() {
      var e_3, _a2, e_4, _b;
      this.adapter.deregisterInputInteractionHandler("focus", this.inputFocusHandler);
      this.adapter.deregisterInputInteractionHandler("blur", this.inputBlurHandler);
      this.adapter.deregisterInputInteractionHandler("input", this.inputInputHandler);
      try {
        for (var POINTERDOWN_EVENTS_2 = __values(POINTERDOWN_EVENTS), POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next(); !POINTERDOWN_EVENTS_2_1.done; POINTERDOWN_EVENTS_2_1 = POINTERDOWN_EVENTS_2.next()) {
          var evtType = POINTERDOWN_EVENTS_2_1.value;
          this.adapter.deregisterInputInteractionHandler(evtType, this.setPointerXOffset);
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (POINTERDOWN_EVENTS_2_1 && !POINTERDOWN_EVENTS_2_1.done && (_a2 = POINTERDOWN_EVENTS_2.return)) _a2.call(POINTERDOWN_EVENTS_2);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      try {
        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS2), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
          var evtType = INTERACTION_EVENTS_2_1.value;
          this.adapter.deregisterTextFieldInteractionHandler(evtType, this.textFieldInteractionHandler);
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_b = INTERACTION_EVENTS_2.return)) _b.call(INTERACTION_EVENTS_2);
        } finally {
          if (e_4) throw e_4.error;
        }
      }
      this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver);
    };
    MDCTextFieldFoundation2.prototype.handleTextFieldInteraction = function() {
      var nativeInput = this.adapter.getNativeInput();
      if (nativeInput && nativeInput.disabled) {
        return;
      }
      this.receivedUserInput = true;
    };
    MDCTextFieldFoundation2.prototype.handleValidationAttributeChange = function(attributesList) {
      var _this = this;
      attributesList.some(function(attributeName) {
        if (VALIDATION_ATTR_WHITELIST.indexOf(attributeName) > -1) {
          _this.styleValidity(true);
          _this.adapter.setLabelRequired(_this.getNativeInput().required);
          return true;
        }
        return false;
      });
      if (attributesList.indexOf("maxlength") > -1) {
        this.setcharacterCounter(this.getValue().length);
      }
    };
    MDCTextFieldFoundation2.prototype.notchOutline = function(openNotch) {
      if (!this.adapter.hasOutline() || !this.adapter.hasLabel()) {
        return;
      }
      if (openNotch) {
        var labelWidth = this.adapter.getLabelWidth() * numbers11.LABEL_SCALE;
        this.adapter.notchOutline(labelWidth);
      } else {
        this.adapter.closeOutline();
      }
    };
    MDCTextFieldFoundation2.prototype.activateFocus = function() {
      this.isFocused = true;
      this.styleFocused(this.isFocused);
      this.adapter.activateLineRipple();
      if (this.adapter.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter.floatLabel(this.shouldFloat);
        this.styleFloating(this.shouldFloat);
        this.adapter.shakeLabel(this.shouldShake);
      }
      if (this.helperText && (this.helperText.isPersistent() || !this.helperText.isValidation() || !this.valid)) {
        this.helperText.showToScreenReader();
      }
    };
    MDCTextFieldFoundation2.prototype.setTransformOrigin = function(evt) {
      if (this.isDisabled() || this.adapter.hasOutline()) {
        return;
      }
      var touches = evt.touches;
      var targetEvent = touches ? touches[0] : evt;
      var targetClientRect = targetEvent.target.getBoundingClientRect();
      var normalizedX = targetEvent.clientX - targetClientRect.left;
      this.adapter.setLineRippleTransformOrigin(normalizedX);
    };
    MDCTextFieldFoundation2.prototype.handleInput = function() {
      this.autoCompleteFocus();
      this.setcharacterCounter(this.getValue().length);
    };
    MDCTextFieldFoundation2.prototype.autoCompleteFocus = function() {
      if (!this.receivedUserInput) {
        this.activateFocus();
      }
    };
    MDCTextFieldFoundation2.prototype.deactivateFocus = function() {
      this.isFocused = false;
      this.adapter.deactivateLineRipple();
      var isValid = this.isValid();
      this.styleValidity(isValid);
      this.styleFocused(this.isFocused);
      if (this.adapter.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter.floatLabel(this.shouldFloat);
        this.styleFloating(this.shouldFloat);
        this.adapter.shakeLabel(this.shouldShake);
      }
      if (!this.shouldFloat) {
        this.receivedUserInput = false;
      }
    };
    MDCTextFieldFoundation2.prototype.getValue = function() {
      return this.getNativeInput().value;
    };
    MDCTextFieldFoundation2.prototype.setValue = function(value) {
      if (this.getValue() !== value) {
        this.getNativeInput().value = value;
      }
      this.setcharacterCounter(value.length);
      if (this.validateOnValueChange) {
        var isValid = this.isValid();
        this.styleValidity(isValid);
      }
      if (this.adapter.hasLabel()) {
        this.notchOutline(this.shouldFloat);
        this.adapter.floatLabel(this.shouldFloat);
        this.styleFloating(this.shouldFloat);
        if (this.validateOnValueChange) {
          this.adapter.shakeLabel(this.shouldShake);
        }
      }
    };
    MDCTextFieldFoundation2.prototype.isValid = function() {
      return this.useNativeValidation ? this.isNativeInputValid() : this.valid;
    };
    MDCTextFieldFoundation2.prototype.setValid = function(isValid) {
      this.valid = isValid;
      this.styleValidity(isValid);
      var shouldShake = !isValid && !this.isFocused && !!this.getValue();
      if (this.adapter.hasLabel()) {
        this.adapter.shakeLabel(shouldShake);
      }
    };
    MDCTextFieldFoundation2.prototype.setValidateOnValueChange = function(shouldValidate) {
      this.validateOnValueChange = shouldValidate;
    };
    MDCTextFieldFoundation2.prototype.getValidateOnValueChange = function() {
      return this.validateOnValueChange;
    };
    MDCTextFieldFoundation2.prototype.setUseNativeValidation = function(useNativeValidation) {
      this.useNativeValidation = useNativeValidation;
    };
    MDCTextFieldFoundation2.prototype.isDisabled = function() {
      return this.getNativeInput().disabled;
    };
    MDCTextFieldFoundation2.prototype.setDisabled = function(disabled) {
      this.getNativeInput().disabled = disabled;
      this.styleDisabled(disabled);
    };
    MDCTextFieldFoundation2.prototype.setHelperTextContent = function(content) {
      if (this.helperText) {
        this.helperText.setContent(content);
      }
    };
    MDCTextFieldFoundation2.prototype.setLeadingIconAriaLabel = function(label) {
      if (this.leadingIcon) {
        this.leadingIcon.setAriaLabel(label);
      }
    };
    MDCTextFieldFoundation2.prototype.setLeadingIconContent = function(content) {
      if (this.leadingIcon) {
        this.leadingIcon.setContent(content);
      }
    };
    MDCTextFieldFoundation2.prototype.setTrailingIconAriaLabel = function(label) {
      if (this.trailingIcon) {
        this.trailingIcon.setAriaLabel(label);
      }
    };
    MDCTextFieldFoundation2.prototype.setTrailingIconContent = function(content) {
      if (this.trailingIcon) {
        this.trailingIcon.setContent(content);
      }
    };
    MDCTextFieldFoundation2.prototype.setcharacterCounter = function(currentLength) {
      if (!this.characterCounter) {
        return;
      }
      var maxLength = this.getNativeInput().maxLength;
      if (maxLength === -1) {
        throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");
      }
      this.characterCounter.setCounterValue(currentLength, maxLength);
    };
    MDCTextFieldFoundation2.prototype.isBadInput = function() {
      return this.getNativeInput().validity.badInput || false;
    };
    MDCTextFieldFoundation2.prototype.isNativeInputValid = function() {
      return this.getNativeInput().validity.valid;
    };
    MDCTextFieldFoundation2.prototype.styleValidity = function(isValid) {
      var INVALID = MDCTextFieldFoundation2.cssClasses.INVALID;
      if (isValid) {
        this.adapter.removeClass(INVALID);
      } else {
        this.adapter.addClass(INVALID);
      }
      if (this.helperText) {
        this.helperText.setValidity(isValid);
        var helperTextValidation = this.helperText.isValidation();
        if (!helperTextValidation) {
          return;
        }
        var helperTextVisible = this.helperText.isVisible();
        var helperTextId = this.helperText.getId();
        if (helperTextVisible && helperTextId) {
          this.adapter.setInputAttr(strings30.ARIA_DESCRIBEDBY, helperTextId);
        } else {
          this.adapter.removeInputAttr(strings30.ARIA_DESCRIBEDBY);
        }
      }
    };
    MDCTextFieldFoundation2.prototype.styleFocused = function(isFocused) {
      var FOCUSED = MDCTextFieldFoundation2.cssClasses.FOCUSED;
      if (isFocused) {
        this.adapter.addClass(FOCUSED);
      } else {
        this.adapter.removeClass(FOCUSED);
      }
    };
    MDCTextFieldFoundation2.prototype.styleDisabled = function(isDisabled) {
      var _a2 = MDCTextFieldFoundation2.cssClasses, DISABLED = _a2.DISABLED, INVALID = _a2.INVALID;
      if (isDisabled) {
        this.adapter.addClass(DISABLED);
        this.adapter.removeClass(INVALID);
      } else {
        this.adapter.removeClass(DISABLED);
      }
      if (this.leadingIcon) {
        this.leadingIcon.setDisabled(isDisabled);
      }
      if (this.trailingIcon) {
        this.trailingIcon.setDisabled(isDisabled);
      }
    };
    MDCTextFieldFoundation2.prototype.styleFloating = function(isFloating) {
      var LABEL_FLOATING = MDCTextFieldFoundation2.cssClasses.LABEL_FLOATING;
      if (isFloating) {
        this.adapter.addClass(LABEL_FLOATING);
      } else {
        this.adapter.removeClass(LABEL_FLOATING);
      }
    };
    MDCTextFieldFoundation2.prototype.getNativeInput = function() {
      var nativeInput = this.adapter ? this.adapter.getNativeInput() : null;
      return nativeInput || {
        disabled: false,
        maxLength: -1,
        required: false,
        type: "input",
        validity: {
          badInput: false,
          valid: true
        },
        value: ""
      };
    };
    return MDCTextFieldFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/textfield/helper-text/component.js
var import_dist1324 = __toESM(require_dist());
var import_dist1325 = __toESM(require_dist2());
var import_dist1326 = __toESM(require_dist3());

// node_modules/@material/textfield/helper-text/foundation.js
var import_dist1321 = __toESM(require_dist());
var import_dist1322 = __toESM(require_dist2());
var import_dist1323 = __toESM(require_dist3());

// node_modules/@material/textfield/helper-text/constants.js
var import_dist1318 = __toESM(require_dist());
var import_dist1319 = __toESM(require_dist2());
var import_dist1320 = __toESM(require_dist3());
var cssClasses30 = {
  HELPER_TEXT_PERSISTENT: "mdc-text-field-helper-text--persistent",
  HELPER_TEXT_VALIDATION_MSG: "mdc-text-field-helper-text--validation-msg",
  ROOT: "mdc-text-field-helper-text"
};
var strings31 = {
  ARIA_HIDDEN: "aria-hidden",
  ROLE: "role",
  ROOT_SELECTOR: "." + cssClasses30.ROOT
};

// node_modules/@material/textfield/helper-text/foundation.js
var MDCTextFieldHelperTextFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldHelperTextFoundation2, _super);
    function MDCTextFieldHelperTextFoundation2(adapter) {
      return _super.call(this, __assign(__assign({}, MDCTextFieldHelperTextFoundation2.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "cssClasses", {
      get: function() {
        return cssClasses30;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "strings", {
      get: function() {
        return strings31;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldHelperTextFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldHelperTextAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          getAttr: function() {
            return null;
          },
          setAttr: function() {
            return void 0;
          },
          removeAttr: function() {
            return void 0;
          },
          setContent: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldHelperTextFoundation2.prototype.getId = function() {
      return this.adapter.getAttr("id");
    };
    MDCTextFieldHelperTextFoundation2.prototype.isVisible = function() {
      return this.adapter.getAttr(strings31.ARIA_HIDDEN) !== "true";
    };
    MDCTextFieldHelperTextFoundation2.prototype.setContent = function(content) {
      this.adapter.setContent(content);
    };
    MDCTextFieldHelperTextFoundation2.prototype.isPersistent = function() {
      return this.adapter.hasClass(cssClasses30.HELPER_TEXT_PERSISTENT);
    };
    MDCTextFieldHelperTextFoundation2.prototype.setPersistent = function(isPersistent) {
      if (isPersistent) {
        this.adapter.addClass(cssClasses30.HELPER_TEXT_PERSISTENT);
      } else {
        this.adapter.removeClass(cssClasses30.HELPER_TEXT_PERSISTENT);
      }
    };
    MDCTextFieldHelperTextFoundation2.prototype.isValidation = function() {
      return this.adapter.hasClass(cssClasses30.HELPER_TEXT_VALIDATION_MSG);
    };
    MDCTextFieldHelperTextFoundation2.prototype.setValidation = function(isValidation) {
      if (isValidation) {
        this.adapter.addClass(cssClasses30.HELPER_TEXT_VALIDATION_MSG);
      } else {
        this.adapter.removeClass(cssClasses30.HELPER_TEXT_VALIDATION_MSG);
      }
    };
    MDCTextFieldHelperTextFoundation2.prototype.showToScreenReader = function() {
      this.adapter.removeAttr(strings31.ARIA_HIDDEN);
    };
    MDCTextFieldHelperTextFoundation2.prototype.setValidity = function(inputIsValid) {
      var helperTextIsPersistent = this.adapter.hasClass(cssClasses30.HELPER_TEXT_PERSISTENT);
      var helperTextIsValidationMsg = this.adapter.hasClass(cssClasses30.HELPER_TEXT_VALIDATION_MSG);
      var validationMsgNeedsDisplay = helperTextIsValidationMsg && !inputIsValid;
      if (validationMsgNeedsDisplay) {
        this.showToScreenReader();
        if (this.adapter.getAttr(strings31.ROLE) === "alert") {
          this.refreshAlertRole();
        } else {
          this.adapter.setAttr(strings31.ROLE, "alert");
        }
      } else {
        this.adapter.removeAttr(strings31.ROLE);
      }
      if (!helperTextIsPersistent && !validationMsgNeedsDisplay) {
        this.hide();
      }
    };
    MDCTextFieldHelperTextFoundation2.prototype.hide = function() {
      this.adapter.setAttr(strings31.ARIA_HIDDEN, "true");
    };
    MDCTextFieldHelperTextFoundation2.prototype.refreshAlertRole = function() {
      var _this = this;
      this.adapter.removeAttr(strings31.ROLE);
      requestAnimationFrame(function() {
        _this.adapter.setAttr(strings31.ROLE, "alert");
      });
    };
    return MDCTextFieldHelperTextFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/textfield/helper-text/component.js
var MDCTextFieldHelperText = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldHelperText2, _super);
    function MDCTextFieldHelperText2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldHelperText2.attachTo = function(root) {
      return new MDCTextFieldHelperText2(root);
    };
    Object.defineProperty(MDCTextFieldHelperText2.prototype, "foundationForTextField", {
      // Provided for access by MDCTextField component
      get: function() {
        return this.foundation;
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldHelperText2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        getAttr: function(attr) {
          return _this.root.getAttribute(attr);
        },
        setAttr: function(attr, value) {
          return _this.root.setAttribute(attr, value);
        },
        removeAttr: function(attr) {
          return _this.root.removeAttribute(attr);
        },
        setContent: function(content) {
          _this.root.textContent = content;
        }
      };
      return new MDCTextFieldHelperTextFoundation(adapter);
    };
    return MDCTextFieldHelperText2;
  }(MDCComponent)
);

// node_modules/@material/textfield/icon/component.js
var import_dist1333 = __toESM(require_dist());
var import_dist1334 = __toESM(require_dist2());
var import_dist1335 = __toESM(require_dist3());

// node_modules/@material/textfield/icon/foundation.js
var import_dist1330 = __toESM(require_dist());
var import_dist1331 = __toESM(require_dist2());
var import_dist1332 = __toESM(require_dist3());

// node_modules/@material/textfield/icon/constants.js
var import_dist1327 = __toESM(require_dist());
var import_dist1328 = __toESM(require_dist2());
var import_dist1329 = __toESM(require_dist3());
var strings32 = {
  ICON_EVENT: "MDCTextField:icon",
  ICON_ROLE: "button"
};
var cssClasses31 = {
  ROOT: "mdc-text-field__icon"
};

// node_modules/@material/textfield/icon/foundation.js
var INTERACTION_EVENTS3 = ["click", "keydown"];
var MDCTextFieldIconFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldIconFoundation2, _super);
    function MDCTextFieldIconFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCTextFieldIconFoundation2.defaultAdapter), adapter)) || this;
      _this.savedTabIndex = null;
      _this.interactionHandler = function(evt) {
        _this.handleInteraction(evt);
      };
      return _this;
    }
    Object.defineProperty(MDCTextFieldIconFoundation2, "strings", {
      get: function() {
        return strings32;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldIconFoundation2, "cssClasses", {
      get: function() {
        return cssClasses31;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextFieldIconFoundation2, "defaultAdapter", {
      /**
       * See {@link MDCTextFieldIconAdapter} for typing information on parameters and return types.
       */
      get: function() {
        return {
          getAttr: function() {
            return null;
          },
          setAttr: function() {
            return void 0;
          },
          removeAttr: function() {
            return void 0;
          },
          setContent: function() {
            return void 0;
          },
          registerInteractionHandler: function() {
            return void 0;
          },
          deregisterInteractionHandler: function() {
            return void 0;
          },
          notifyIconAction: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldIconFoundation2.prototype.init = function() {
      var e_1, _a2;
      this.savedTabIndex = this.adapter.getAttr("tabindex");
      try {
        for (var INTERACTION_EVENTS_1 = __values(INTERACTION_EVENTS3), INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next(); !INTERACTION_EVENTS_1_1.done; INTERACTION_EVENTS_1_1 = INTERACTION_EVENTS_1.next()) {
          var evtType = INTERACTION_EVENTS_1_1.value;
          this.adapter.registerInteractionHandler(evtType, this.interactionHandler);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_1_1 && !INTERACTION_EVENTS_1_1.done && (_a2 = INTERACTION_EVENTS_1.return)) _a2.call(INTERACTION_EVENTS_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    MDCTextFieldIconFoundation2.prototype.destroy = function() {
      var e_2, _a2;
      try {
        for (var INTERACTION_EVENTS_2 = __values(INTERACTION_EVENTS3), INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next(); !INTERACTION_EVENTS_2_1.done; INTERACTION_EVENTS_2_1 = INTERACTION_EVENTS_2.next()) {
          var evtType = INTERACTION_EVENTS_2_1.value;
          this.adapter.deregisterInteractionHandler(evtType, this.interactionHandler);
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (INTERACTION_EVENTS_2_1 && !INTERACTION_EVENTS_2_1.done && (_a2 = INTERACTION_EVENTS_2.return)) _a2.call(INTERACTION_EVENTS_2);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    };
    MDCTextFieldIconFoundation2.prototype.setDisabled = function(disabled) {
      if (!this.savedTabIndex) {
        return;
      }
      if (disabled) {
        this.adapter.setAttr("tabindex", "-1");
        this.adapter.removeAttr("role");
      } else {
        this.adapter.setAttr("tabindex", this.savedTabIndex);
        this.adapter.setAttr("role", strings32.ICON_ROLE);
      }
    };
    MDCTextFieldIconFoundation2.prototype.setAriaLabel = function(label) {
      this.adapter.setAttr("aria-label", label);
    };
    MDCTextFieldIconFoundation2.prototype.setContent = function(content) {
      this.adapter.setContent(content);
    };
    MDCTextFieldIconFoundation2.prototype.handleInteraction = function(evt) {
      var isEnterKey = evt.key === "Enter" || evt.keyCode === 13;
      if (evt.type === "click" || isEnterKey) {
        evt.preventDefault();
        this.adapter.notifyIconAction();
      }
    };
    return MDCTextFieldIconFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/textfield/icon/component.js
var MDCTextFieldIcon = (
  /** @class */
  function(_super) {
    __extends(MDCTextFieldIcon2, _super);
    function MDCTextFieldIcon2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextFieldIcon2.attachTo = function(root) {
      return new MDCTextFieldIcon2(root);
    };
    Object.defineProperty(MDCTextFieldIcon2.prototype, "foundationForTextField", {
      // Provided for access by MDCTextField component
      get: function() {
        return this.foundation;
      },
      enumerable: false,
      configurable: true
    });
    MDCTextFieldIcon2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        getAttr: function(attr) {
          return _this.root.getAttribute(attr);
        },
        setAttr: function(attr, value) {
          return _this.root.setAttribute(attr, value);
        },
        removeAttr: function(attr) {
          return _this.root.removeAttribute(attr);
        },
        setContent: function(content) {
          _this.root.textContent = content;
        },
        registerInteractionHandler: function(evtType, handler) {
          return _this.listen(evtType, handler);
        },
        deregisterInteractionHandler: function(evtType, handler) {
          return _this.unlisten(evtType, handler);
        },
        notifyIconAction: function() {
          return _this.emit(
            MDCTextFieldIconFoundation.strings.ICON_EVENT,
            {},
            true
            /* shouldBubble */
          );
        }
      };
      return new MDCTextFieldIconFoundation(adapter);
    };
    return MDCTextFieldIcon2;
  }(MDCComponent)
);

// node_modules/@material/textfield/component.js
var MDCTextField = (
  /** @class */
  function(_super) {
    __extends(MDCTextField2, _super);
    function MDCTextField2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTextField2.attachTo = function(root) {
      return new MDCTextField2(root);
    };
    MDCTextField2.prototype.initialize = function(rippleFactory, lineRippleFactory, helperTextFactory, characterCounterFactory, iconFactory, labelFactory, outlineFactory) {
      if (rippleFactory === void 0) {
        rippleFactory = function(el, foundation) {
          return new MDCRipple(el, foundation);
        };
      }
      if (lineRippleFactory === void 0) {
        lineRippleFactory = function(el) {
          return new MDCLineRipple(el);
        };
      }
      if (helperTextFactory === void 0) {
        helperTextFactory = function(el) {
          return new MDCTextFieldHelperText(el);
        };
      }
      if (characterCounterFactory === void 0) {
        characterCounterFactory = function(el) {
          return new MDCTextFieldCharacterCounter(el);
        };
      }
      if (iconFactory === void 0) {
        iconFactory = function(el) {
          return new MDCTextFieldIcon(el);
        };
      }
      if (labelFactory === void 0) {
        labelFactory = function(el) {
          return new MDCFloatingLabel(el);
        };
      }
      if (outlineFactory === void 0) {
        outlineFactory = function(el) {
          return new MDCNotchedOutline(el);
        };
      }
      this.input = this.root.querySelector(strings30.INPUT_SELECTOR);
      var labelElement = this.root.querySelector(strings30.LABEL_SELECTOR);
      this.label = labelElement ? labelFactory(labelElement) : null;
      var lineRippleElement = this.root.querySelector(strings30.LINE_RIPPLE_SELECTOR);
      this.lineRipple = lineRippleElement ? lineRippleFactory(lineRippleElement) : null;
      var outlineElement = this.root.querySelector(strings30.OUTLINE_SELECTOR);
      this.outline = outlineElement ? outlineFactory(outlineElement) : null;
      var helperTextStrings = MDCTextFieldHelperTextFoundation.strings;
      var nextElementSibling = this.root.nextElementSibling;
      var hasHelperLine = nextElementSibling && nextElementSibling.classList.contains(cssClasses29.HELPER_LINE);
      var helperTextEl = hasHelperLine && nextElementSibling && nextElementSibling.querySelector(helperTextStrings.ROOT_SELECTOR);
      this.helperText = helperTextEl ? helperTextFactory(helperTextEl) : null;
      var characterCounterStrings = MDCTextFieldCharacterCounterFoundation.strings;
      var characterCounterEl = this.root.querySelector(characterCounterStrings.ROOT_SELECTOR);
      if (!characterCounterEl && hasHelperLine && nextElementSibling) {
        characterCounterEl = nextElementSibling.querySelector(characterCounterStrings.ROOT_SELECTOR);
      }
      this.characterCounter = characterCounterEl ? characterCounterFactory(characterCounterEl) : null;
      var leadingIconEl = this.root.querySelector(strings30.LEADING_ICON_SELECTOR);
      this.leadingIcon = leadingIconEl ? iconFactory(leadingIconEl) : null;
      var trailingIconEl = this.root.querySelector(strings30.TRAILING_ICON_SELECTOR);
      this.trailingIcon = trailingIconEl ? iconFactory(trailingIconEl) : null;
      this.prefix = this.root.querySelector(strings30.PREFIX_SELECTOR);
      this.suffix = this.root.querySelector(strings30.SUFFIX_SELECTOR);
      this.ripple = this.createRipple(rippleFactory);
    };
    MDCTextField2.prototype.destroy = function() {
      if (this.ripple) {
        this.ripple.destroy();
      }
      if (this.lineRipple) {
        this.lineRipple.destroy();
      }
      if (this.helperText) {
        this.helperText.destroy();
      }
      if (this.characterCounter) {
        this.characterCounter.destroy();
      }
      if (this.leadingIcon) {
        this.leadingIcon.destroy();
      }
      if (this.trailingIcon) {
        this.trailingIcon.destroy();
      }
      if (this.label) {
        this.label.destroy();
      }
      if (this.outline) {
        this.outline.destroy();
      }
      _super.prototype.destroy.call(this);
    };
    MDCTextField2.prototype.initialSyncWithDOM = function() {
      this.disabled = this.input.disabled;
    };
    Object.defineProperty(MDCTextField2.prototype, "value", {
      get: function() {
        return this.foundation.getValue();
      },
      /**
       * @param value The value to set on the input.
       */
      set: function(value) {
        this.foundation.setValue(value);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "disabled", {
      get: function() {
        return this.foundation.isDisabled();
      },
      /**
       * @param disabled Sets the Text Field disabled or enabled.
       */
      set: function(disabled) {
        this.foundation.setDisabled(disabled);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "valid", {
      get: function() {
        return this.foundation.isValid();
      },
      /**
       * @param valid Sets the Text Field valid or invalid.
       */
      set: function(valid) {
        this.foundation.setValid(valid);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "required", {
      get: function() {
        return this.input.required;
      },
      /**
       * @param required Sets the Text Field to required.
       */
      set: function(required) {
        this.input.required = required;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "pattern", {
      get: function() {
        return this.input.pattern;
      },
      /**
       * @param pattern Sets the input element's validation pattern.
       */
      set: function(pattern) {
        this.input.pattern = pattern;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "minLength", {
      get: function() {
        return this.input.minLength;
      },
      /**
       * @param minLength Sets the input element's minLength.
       */
      set: function(minLength) {
        this.input.minLength = minLength;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "maxLength", {
      get: function() {
        return this.input.maxLength;
      },
      /**
       * @param maxLength Sets the input element's maxLength.
       */
      set: function(maxLength) {
        if (maxLength < 0) {
          this.input.removeAttribute("maxLength");
        } else {
          this.input.maxLength = maxLength;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "min", {
      get: function() {
        return this.input.min;
      },
      /**
       * @param min Sets the input element's min.
       */
      set: function(min) {
        this.input.min = min;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "max", {
      get: function() {
        return this.input.max;
      },
      /**
       * @param max Sets the input element's max.
       */
      set: function(max) {
        this.input.max = max;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "step", {
      get: function() {
        return this.input.step;
      },
      /**
       * @param step Sets the input element's step.
       */
      set: function(step) {
        this.input.step = step;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "helperTextContent", {
      /**
       * Sets the helper text element content.
       */
      set: function(content) {
        this.foundation.setHelperTextContent(content);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "leadingIconAriaLabel", {
      /**
       * Sets the aria label of the leading icon.
       */
      set: function(label) {
        this.foundation.setLeadingIconAriaLabel(label);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "leadingIconContent", {
      /**
       * Sets the text content of the leading icon.
       */
      set: function(content) {
        this.foundation.setLeadingIconContent(content);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "trailingIconAriaLabel", {
      /**
       * Sets the aria label of the trailing icon.
       */
      set: function(label) {
        this.foundation.setTrailingIconAriaLabel(label);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "trailingIconContent", {
      /**
       * Sets the text content of the trailing icon.
       */
      set: function(content) {
        this.foundation.setTrailingIconContent(content);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "useNativeValidation", {
      /**
       * Enables or disables the use of native validation. Use this for custom validation.
       * @param useNativeValidation Set this to false to ignore native input validation.
       */
      set: function(useNativeValidation) {
        this.foundation.setUseNativeValidation(useNativeValidation);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "prefixText", {
      /**
       * Gets the text content of the prefix, or null if it does not exist.
       */
      get: function() {
        return this.prefix ? this.prefix.textContent : null;
      },
      /**
       * Sets the text content of the prefix, if it exists.
       */
      set: function(prefixText) {
        if (this.prefix) {
          this.prefix.textContent = prefixText;
        }
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCTextField2.prototype, "suffixText", {
      /**
       * Gets the text content of the suffix, or null if it does not exist.
       */
      get: function() {
        return this.suffix ? this.suffix.textContent : null;
      },
      /**
       * Sets the text content of the suffix, if it exists.
       */
      set: function(suffixText) {
        if (this.suffix) {
          this.suffix.textContent = suffixText;
        }
      },
      enumerable: false,
      configurable: true
    });
    MDCTextField2.prototype.focus = function() {
      this.input.focus();
    };
    MDCTextField2.prototype.layout = function() {
      var openNotch = this.foundation.shouldFloat;
      this.foundation.notchOutline(openNotch);
    };
    MDCTextField2.prototype.getDefaultFoundation = function() {
      var adapter = __assign(__assign(__assign(__assign(__assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());
      return new MDCTextFieldFoundation(adapter, this.getFoundationMap());
    };
    MDCTextField2.prototype.getRootAdapterMethods = function() {
      var _this = this;
      return {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        registerTextFieldInteractionHandler: function(evtType, handler) {
          _this.listen(evtType, handler);
        },
        deregisterTextFieldInteractionHandler: function(evtType, handler) {
          _this.unlisten(evtType, handler);
        },
        registerValidationAttributeChangeHandler: function(handler) {
          var getAttributesList = function(mutationsList) {
            return mutationsList.map(function(mutation) {
              return mutation.attributeName;
            }).filter(function(attributeName) {
              return attributeName;
            });
          };
          var observer = new MutationObserver(function(mutationsList) {
            return handler(getAttributesList(mutationsList));
          });
          var config = { attributes: true };
          observer.observe(_this.input, config);
          return observer;
        },
        deregisterValidationAttributeChangeHandler: function(observer) {
          observer.disconnect();
        }
      };
    };
    MDCTextField2.prototype.getInputAdapterMethods = function() {
      var _this = this;
      return {
        getNativeInput: function() {
          return _this.input;
        },
        setInputAttr: function(attr, value) {
          _this.input.setAttribute(attr, value);
        },
        removeInputAttr: function(attr) {
          _this.input.removeAttribute(attr);
        },
        isFocused: function() {
          return document.activeElement === _this.input;
        },
        registerInputInteractionHandler: function(evtType, handler) {
          _this.input.addEventListener(evtType, handler, applyPassive());
        },
        deregisterInputInteractionHandler: function(evtType, handler) {
          _this.input.removeEventListener(evtType, handler, applyPassive());
        }
      };
    };
    MDCTextField2.prototype.getLabelAdapterMethods = function() {
      var _this = this;
      return {
        floatLabel: function(shouldFloat) {
          _this.label && _this.label.float(shouldFloat);
        },
        getLabelWidth: function() {
          return _this.label ? _this.label.getWidth() : 0;
        },
        hasLabel: function() {
          return Boolean(_this.label);
        },
        shakeLabel: function(shouldShake) {
          _this.label && _this.label.shake(shouldShake);
        },
        setLabelRequired: function(isRequired) {
          _this.label && _this.label.setRequired(isRequired);
        }
      };
    };
    MDCTextField2.prototype.getLineRippleAdapterMethods = function() {
      var _this = this;
      return {
        activateLineRipple: function() {
          if (_this.lineRipple) {
            _this.lineRipple.activate();
          }
        },
        deactivateLineRipple: function() {
          if (_this.lineRipple) {
            _this.lineRipple.deactivate();
          }
        },
        setLineRippleTransformOrigin: function(normalizedX) {
          if (_this.lineRipple) {
            _this.lineRipple.setRippleCenter(normalizedX);
          }
        }
      };
    };
    MDCTextField2.prototype.getOutlineAdapterMethods = function() {
      var _this = this;
      return {
        closeOutline: function() {
          _this.outline && _this.outline.closeNotch();
        },
        hasOutline: function() {
          return Boolean(_this.outline);
        },
        notchOutline: function(labelWidth) {
          _this.outline && _this.outline.notch(labelWidth);
        }
      };
    };
    MDCTextField2.prototype.getFoundationMap = function() {
      return {
        characterCounter: this.characterCounter ? this.characterCounter.foundationForTextField : void 0,
        helperText: this.helperText ? this.helperText.foundationForTextField : void 0,
        leadingIcon: this.leadingIcon ? this.leadingIcon.foundationForTextField : void 0,
        trailingIcon: this.trailingIcon ? this.trailingIcon.foundationForTextField : void 0
      };
    };
    MDCTextField2.prototype.createRipple = function(rippleFactory) {
      var _this = this;
      var isTextArea = this.root.classList.contains(cssClasses29.TEXTAREA);
      var isOutlined = this.root.classList.contains(cssClasses29.OUTLINED);
      if (isTextArea || isOutlined) {
        return null;
      }
      var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { isSurfaceActive: function() {
        return matches(_this.input, ":active");
      }, registerInteractionHandler: function(evtType, handler) {
        _this.input.addEventListener(evtType, handler, applyPassive());
      }, deregisterInteractionHandler: function(evtType, handler) {
        _this.input.removeEventListener(evtType, handler, applyPassive());
      } });
      return rippleFactory(this.root, new MDCRippleFoundation(adapter));
    };
    return MDCTextField2;
  }(MDCComponent)
);

// node_modules/@material/textfield/types.js
var import_dist1339 = __toESM(require_dist());
var import_dist1340 = __toESM(require_dist2());
var import_dist1341 = __toESM(require_dist3());

// node_modules/@material/textfield/character-counter/index.js
var import_dist1345 = __toESM(require_dist());
var import_dist1346 = __toESM(require_dist2());
var import_dist1347 = __toESM(require_dist3());

// node_modules/@material/textfield/character-counter/adapter.js
var import_dist1342 = __toESM(require_dist());
var import_dist1343 = __toESM(require_dist2());
var import_dist1344 = __toESM(require_dist3());

// node_modules/@material/textfield/helper-text/index.js
var import_dist1351 = __toESM(require_dist());
var import_dist1352 = __toESM(require_dist2());
var import_dist1353 = __toESM(require_dist3());

// node_modules/@material/textfield/helper-text/adapter.js
var import_dist1348 = __toESM(require_dist());
var import_dist1349 = __toESM(require_dist2());
var import_dist1350 = __toESM(require_dist3());

// node_modules/@material/textfield/icon/index.js
var import_dist1357 = __toESM(require_dist());
var import_dist1358 = __toESM(require_dist2());
var import_dist1359 = __toESM(require_dist3());

// node_modules/@material/textfield/icon/adapter.js
var import_dist1354 = __toESM(require_dist());
var import_dist1355 = __toESM(require_dist2());
var import_dist1356 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1381 = __toESM(require_dist());
var import_dist1382 = __toESM(require_dist2());
var import_dist1383 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1366 = __toESM(require_dist());
var import_dist1367 = __toESM(require_dist2());
var import_dist1368 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1363 = __toESM(require_dist());
var import_dist1364 = __toESM(require_dist2());
var import_dist1365 = __toESM(require_dist3());
function number23(a) {
  return Number(a);
}
function booleanAttr23(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap23 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr23 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr23 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr23 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1369 = __toESM(require_dist());
var import_dist1370 = __toESM(require_dist2());
var import_dist1371 = __toESM(require_dist3());
var MdcPromisifyReference23 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1372 = __toESM(require_dist());
var import_dist1373 = __toESM(require_dist2());
var import_dist1374 = __toESM(require_dist3());
var MdcComponent23 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1375 = __toESM(require_dist());
var import_dist1376 = __toESM(require_dist2());
var import_dist1377 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1378 = __toESM(require_dist());
var import_dist1379 = __toESM(require_dist2());
var import_dist1380 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-icon.js
var import_dist1384 = __toESM(require_dist());
var import_dist1385 = __toESM(require_dist2());
var import_dist1386 = __toESM(require_dist3());
var mdcIconStrings2 = {
  ATTRIBUTE: "mdc-text-field-icon",
  LEADING: "leading",
  TRAILING: "trailing"
};
strings32.ICON_EVENT = strings32.ICON_EVENT.toLowerCase();
var MdcTextFieldIcon = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-text-field-icon")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent23;
  var MdcTextFieldIcon2 = _classThis = class extends _classSuper {
    attaching() {
      this.root.classList.add(cssClasses31.ROOT);
      if (this.root.hasAttribute(mdcIconStrings2.LEADING)) {
        this.root.classList.add(`${cssClasses31.ROOT}--${mdcIconStrings2.LEADING}`);
      }
      if (this.root.hasAttribute(mdcIconStrings2.TRAILING)) {
        this.root.classList.add(`${cssClasses31.ROOT}--${mdcIconStrings2.TRAILING}`);
      }
    }
    // Provided for access by MDCTextField component
    get foundationForTextField() {
      return this.foundation;
    }
    getDefaultFoundation() {
      const adapter = {
        getAttr: (attr) => this.root.getAttribute(attr),
        setAttr: (attr, value) => this.root.setAttribute(attr, value),
        removeAttr: (attr) => this.root.removeAttribute(attr),
        setContent: (content) => {
          this.root.textContent = content;
        },
        registerInteractionHandler: (evtType, handler) => this.listen(evtType, handler),
        deregisterInteractionHandler: (evtType, handler) => this.unlisten(evtType, handler),
        notifyIconAction: () => this.emit(
          MDCTextFieldIconFoundation.strings.ICON_EVENT,
          {},
          true
          /* shouldBubble */
        )
      };
      return new MDCTextFieldIconFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcTextFieldIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTextFieldIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTextFieldIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-default-text-field-configuration.js
var import_dist1387 = __toESM(require_dist());
var import_dist1388 = __toESM(require_dist2());
var import_dist1389 = __toESM(require_dist3());
var MdcDefaultTextFieldConfiguration = class {
};

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field.html?raw
var mdc_text_field_default = `<template class="
    mdc-text-field
    \${textarea ? 'mdc-text-field--textarea' : ''}
    \${endAligned ? 'mdc-text-field--end-aligned' : ''}
    \${ltrText ? 'mdc-text-field--ltr-text' : ''}
    \${label ? '' : 'mdc-text-field--no-label'}
    mdc-text-field--\${outlined ? 'outlined' : 'filled'}
    \${leadingIcon_ ? 'mdc-text-field--with-leading-icon' : ''}
    \${trailingIcon_ ? 'mdc-text-field--with-trailing-icon' : ''}
  " mdc-ripple="no-class.bind: true; input.bind: input_">
  <span class="mdc-text-field__ripple"></span>
  <au-slot name="leading-icon"></au-slot>
  <span class="mdc-text-field__affix mdc-text-field__affix--prefix" if.bind="prefix && !textarea">\${prefix}</span>
  <mdc-notched-outline if.bind="outlined" component.ref="outline_">
    <mdc-floating-label if.bind="label" id.bind="id" component.ref="label_">\${label}</mdc-floating-label>
  </mdc-notched-outline>
  <input if.bind="!textarea" class="mdc-text-field__input" type="text" aria-labelledby.bind="id" ref="input_"
    focus.trigger="onFocus()" input.trigger="onInput($event)" change.trigger="onChange($event)" blur.trigger="onBlur()"
    placeholder.bind="placeholder" keyup.trigger="onKeyup($event)">
  <span if.bind="textarea" class="mdc-text-field__resizer">
    <textarea class="mdc-text-field__input" aria-labelledby.bind="id" ref="input_"
      focus.trigger="onFocus()" input.trigger="onInput($event)" change.trigger="onChange($event)"
      blur.trigger="onBlur()" keyup.trigger="onKeyup($event)"></textarea>
  </span>
  <span class="mdc-text-field__affix mdc-text-field__affix--suffix" if.bind="suffix && !textarea">\${suffix}</span>
  <au-slot name="trailing-icon"></au-slot>
  <mdc-floating-label if.bind="label && !outlined" id.bind="id" component.ref="label_">\${label}</mdc-floating-label>
  <mdc-line-ripple if.bind="!outlined" component.ref="lineRipple_"></mdc-line-ripple>
</template>
`;

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field.js
var textFieldId = 0;
var leadingIconSelector = ".mdc-text-field__icon--leading";
var trailingIconSelector = ".mdc-text-field__icon--trailing";
var MdcTextField = (() => {
  let _classDecorators = [inject(Element, IPlatform, MdcDefaultTextFieldConfiguration), customElement({ name: "mdc-text-field", template: mdc_text_field_default }), processContent(function processContent2(node) {
    const element = node;
    const leadingIcon = element.querySelector(`[${mdcIconStrings2.ATTRIBUTE}][${mdcIconStrings2.LEADING}]`);
    leadingIcon == null ? void 0 : leadingIcon.setAttribute("au-slot", "leading-icon");
    const trailingIcon = element.querySelector(`[${mdcIconStrings2.ATTRIBUTE}][${mdcIconStrings2.TRAILING}]`);
    trailingIcon == null ? void 0 : trailingIcon.setAttribute("au-slot", "trailing-icon");
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent23;
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _textarea_decorators;
  let _textarea_initializers = [];
  let _textarea_extraInitializers = [];
  let _endAligned_decorators;
  let _endAligned_initializers = [];
  let _endAligned_extraInitializers = [];
  let _ltrText_decorators;
  let _ltrText_initializers = [];
  let _ltrText_extraInitializers = [];
  let _outlined_decorators;
  let _outlined_initializers = [];
  let _outlined_extraInitializers = [];
  let _prefix_decorators;
  let _prefix_initializers = [];
  let _prefix_extraInitializers = [];
  let _suffix_decorators;
  let _suffix_initializers = [];
  let _suffix_extraInitializers = [];
  let _required_decorators;
  let _required_initializers = [];
  let _required_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _readonly_decorators;
  let _readonly_initializers = [];
  let _readonly_extraInitializers = [];
  let _blurOnEnter_decorators;
  let _blurOnEnter_initializers = [];
  let _blurOnEnter_extraInitializers = [];
  let _maxlength_decorators;
  let _maxlength_initializers = [];
  let _maxlength_extraInitializers = [];
  let _rows_decorators;
  let _rows_initializers = [];
  let _rows_extraInitializers = [];
  let _cols_decorators;
  let _cols_initializers = [];
  let _cols_extraInitializers = [];
  let _max_decorators;
  let _max_initializers = [];
  let _max_extraInitializers = [];
  let _min_decorators;
  let _min_initializers = [];
  let _min_extraInitializers = [];
  let _step_decorators;
  let _step_initializers = [];
  let _step_extraInitializers = [];
  let _autocomplete_decorators;
  let _autocomplete_initializers = [];
  let _autocomplete_extraInitializers = [];
  let _tabindex_decorators;
  let _tabindex_initializers = [];
  let _tabindex_extraInitializers = [];
  let _type_decorators;
  let _type_initializers = [];
  let _type_extraInitializers = [];
  let _name_decorators;
  let _name_initializers = [];
  let _name_extraInitializers = [];
  let _placeholder_decorators;
  let _placeholder_initializers = [];
  let _placeholder_extraInitializers = [];
  var MdcTextField2 = _classThis = class extends _classSuper {
    constructor(root, platform, defaultConfiguration) {
      super(root);
      this.platform = platform;
      this.defaultConfiguration = defaultConfiguration;
      this.id = `mdc-text-field-${++textFieldId}`;
      this.id1 = `mdc-text-field-${textFieldId}`;
      this.label_ = void 0;
      this.errors = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.mutated(mutations));
      this.label = __runInitializers(this, _label_initializers, void 0);
      this.textarea = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _textarea_initializers, void 0));
      this.endAligned = (__runInitializers(this, _textarea_extraInitializers), __runInitializers(this, _endAligned_initializers, void 0));
      this.ltrText = (__runInitializers(this, _endAligned_extraInitializers), __runInitializers(this, _ltrText_initializers, void 0));
      this.outlined = (__runInitializers(this, _ltrText_extraInitializers), __runInitializers(this, _outlined_initializers, this.defaultConfiguration.outlined));
      this.prefix = (__runInitializers(this, _outlined_extraInitializers), __runInitializers(this, _prefix_initializers, void 0));
      this.suffix = (__runInitializers(this, _prefix_extraInitializers), __runInitializers(this, _suffix_initializers, void 0));
      this.required = (__runInitializers(this, _suffix_extraInitializers), __runInitializers(this, _required_initializers, void 0));
      this.disabled = (__runInitializers(this, _required_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      this.readonly = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _readonly_initializers, void 0));
      this.blurOnEnter = (__runInitializers(this, _readonly_extraInitializers), __runInitializers(this, _blurOnEnter_initializers, void 0));
      this.maxlength = (__runInitializers(this, _blurOnEnter_extraInitializers), __runInitializers(this, _maxlength_initializers, void 0));
      this.rows = (__runInitializers(this, _maxlength_extraInitializers), __runInitializers(this, _rows_initializers, void 0));
      this.cols = (__runInitializers(this, _rows_extraInitializers), __runInitializers(this, _cols_initializers, void 0));
      this.max = (__runInitializers(this, _cols_extraInitializers), __runInitializers(this, _max_initializers, void 0));
      this.min = (__runInitializers(this, _max_extraInitializers), __runInitializers(this, _min_initializers, void 0));
      this.step = (__runInitializers(this, _min_extraInitializers), __runInitializers(this, _step_initializers, void 0));
      this.autocomplete = (__runInitializers(this, _step_extraInitializers), __runInitializers(this, _autocomplete_initializers, void 0));
      this.tabindex = (__runInitializers(this, _autocomplete_extraInitializers), __runInitializers(this, _tabindex_initializers, void 0));
      this.type = (__runInitializers(this, _tabindex_extraInitializers), __runInitializers(this, _type_initializers, void 0));
      this.name = (__runInitializers(this, _type_extraInitializers), __runInitializers(this, _name_initializers, void 0));
      this.placeholder = (__runInitializers(this, _name_extraInitializers), __runInitializers(this, _placeholder_initializers, " "));
      this.initialValue = __runInitializers(this, _placeholder_extraInitializers);
      defineMdcTextFieldElementApis(this.root);
    }
    labelChanged() {
      this.platform.domWriteQueue.queueTask(() => {
        if (this.foundation) {
          const openNotch = this.foundation.shouldFloat;
          this.foundation.notchOutline(openNotch);
        }
      });
    }
    requiredChanged() {
      var _a2;
      if (this.required !== void 0) {
        this.input_.required = this.required;
        (_a2 = this.foundation) == null ? void 0 : _a2.setUseNativeValidation(true);
      }
    }
    disabledChanged() {
      var _a2;
      this.input_.disabled = this.disabled;
      (_a2 = this.foundation) == null ? void 0 : _a2.setDisabled(this.disabled);
    }
    readonlyChanged() {
      this.input_.readOnly = this.readonly;
    }
    maxlengthChanged() {
      if (this.maxlength) {
        this.input_.setAttribute("maxlength", this.maxlength);
      } else {
        this.input_.removeAttribute("maxlength");
      }
    }
    rowsChanged() {
      if (this.rows) {
        this.input_.setAttribute("rows", this.rows);
      } else {
        this.input_.removeAttribute("rows");
      }
    }
    colsChanged() {
      if (this.rows) {
        this.input_.setAttribute("cols", this.cols);
      } else {
        this.input_.removeAttribute("cols");
      }
    }
    maxChanged() {
      if (this.max === void 0) {
        this.input_.removeAttribute("max");
      } else {
        this.input_.max = this.max;
      }
    }
    minChanged() {
      if (this.min === void 0) {
        this.input_.removeAttribute("min");
      } else {
        this.input_.min = this.min;
      }
    }
    stepChanged() {
      if (this.step === void 0) {
        this.input_.removeAttribute("step");
      } else {
        this.input_.step = this.step;
      }
    }
    autocompleteChanged() {
      if (this.autocomplete === void 0) {
        this.input_.removeAttribute("autocomplete");
      } else {
        this.input_.autocomplete = this.autocomplete;
      }
    }
    tabindexChanged() {
      if (isNaN(this.tabindex)) {
        this.input_.removeAttribute("tabindex");
      } else {
        this.input_.tabIndex = this.tabindex;
      }
    }
    typeChanged() {
      if (!this.textarea) {
        if (this.type === void 0) {
          this.input_.removeAttribute("type");
        } else {
          this.input_.type = this.type;
        }
      }
    }
    nameChanged() {
      if (this.name === void 0) {
        this.input_.removeAttribute("name");
      } else {
        this.input_.name = this.name;
      }
    }
    get value() {
      if (this.foundation) {
        return this.foundation.getValue();
      } else {
        return this.initialValue;
      }
    }
    set value(value) {
      if (this.foundation) {
        if (this.foundation.getValue() !== value) {
          this.foundation.setValue(value === null || value === void 0 ? "" : value.toString());
        }
      } else {
        this.initialValue = value;
      }
    }
    addError(error) {
      this.errors.set(error, true);
      this.valid = false;
    }
    removeError(error) {
      this.errors.delete(error);
      this.valid = this.errors.size === 0;
    }
    get valid() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isValid()) ?? true;
    }
    set valid(value) {
      var _a2, _b;
      (_a2 = this.foundation) == null ? void 0 : _a2.setUseNativeValidation(false);
      (_b = this.foundation) == null ? void 0 : _b.setValid(value);
    }
    renderErrors() {
      const helperLine = this.root.nextElementSibling;
      if ((helperLine == null ? void 0 : helperLine.tagName) === "MDC-TEXT-FIELD-HELPER-LINE") {
        CustomElement.for(helperLine).viewModel.errors = Array.from(this.errors.keys()).filter((x) => x.message !== null).map((x) => x.message);
      }
    }
    async attaching() {
      const nextSibling = this.root.nextElementSibling;
      if ((nextSibling == null ? void 0 : nextSibling.tagName) === cssClasses29.HELPER_LINE.toUpperCase()) {
        await CustomElement.for(nextSibling).viewModel.attachedPromise;
        const helperTextEl = nextSibling.querySelector(strings31.ROOT_SELECTOR);
        this.helperText_ = helperTextEl ? CustomElement.for(nextSibling).viewModel : void 0;
        const characterCounterEl = nextSibling.querySelector(strings29.ROOT_SELECTOR);
        this.characterCounter_ = characterCounterEl ? CustomElement.for(characterCounterEl).viewModel : void 0;
      }
    }
    beforeFoundationCreated() {
      this.maxlengthChanged();
      this.typeChanged();
      this.mutationObserver.observe(this.root, { subtree: true, childList: true });
      this.leadingIconChanged();
      this.trailingIconChanged();
    }
    mutated(mutations) {
      if (mutations.find((x) => [...Array.from(x.addedNodes), ...Array.from(x.removedNodes)].find((y) => y instanceof HTMLElement && y.matches(leadingIconSelector)))) {
        this.leadingIconChanged();
      }
      if (mutations.find((x) => [...Array.from(x.addedNodes), ...Array.from(x.removedNodes)].find((y) => y instanceof HTMLElement && y.matches(trailingIconSelector)))) {
        this.trailingIconChanged();
      }
    }
    trailingIconChanged() {
      var _a2;
      const el = this.root.querySelector(trailingIconSelector);
      this.trailingIcon_ = el ? (_a2 = CustomAttribute.for(el, mdcIconStrings2.ATTRIBUTE)) == null ? void 0 : _a2.viewModel : void 0;
    }
    leadingIconChanged() {
      var _a2;
      const el = this.root.querySelector(leadingIconSelector);
      this.leadingIcon_ = el ? (_a2 = CustomAttribute.for(el, mdcIconStrings2.ATTRIBUTE)) == null ? void 0 : _a2.viewModel : void 0;
    }
    destroy() {
      this.mutationObserver.disconnect();
    }
    initialSyncWithDOM() {
      this.value = this.initialValue;
      this.errors = /* @__PURE__ */ new Map();
      this.valid = true;
      this.requiredChanged();
      this.disabledChanged();
      this.readonlyChanged();
      this.tabindexChanged();
      this.rowsChanged();
      this.colsChanged();
      this.minChanged();
      this.maxChanged();
      this.stepChanged();
      this.autocompleteChanged();
      this.nameChanged();
      if (this.root.hasAttribute("value")) {
        this.value = this.root.getAttribute("value") ?? "";
      }
    }
    getDefaultFoundation() {
      const adapter = {
        ...this.getRootAdapterMethods_(),
        ...this.getInputAdapterMethods_(),
        ...this.getLabelAdapterMethods_(),
        ...this.getLineRippleAdapterMethods_(),
        ...this.getOutlineAdapterMethods_()
      };
      return new MDCTextFieldFoundation(adapter, this.getFoundationMap_());
    }
    getRootAdapterMethods_() {
      return {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        registerTextFieldInteractionHandler: (evtType, handler) => this.listen(evtType, handler),
        deregisterTextFieldInteractionHandler: (evtType, handler) => this.unlisten(evtType, handler),
        registerValidationAttributeChangeHandler: (handler) => {
          const getAttributesList = (mutationsList) => {
            return mutationsList.map((mutation) => mutation.attributeName).filter((attributeName) => attributeName);
          };
          const observer = new MutationObserver((mutationsList) => handler(getAttributesList(mutationsList)));
          const config = { attributes: true };
          observer.observe(this.input_, config);
          return observer;
        },
        deregisterValidationAttributeChangeHandler: (observer) => observer.disconnect()
      };
    }
    getInputAdapterMethods_() {
      return {
        getNativeInput: () => this.input_,
        setInputAttr: (attr, value) => {
          this.input_.setAttribute(attr, value);
        },
        removeInputAttr: (attr) => {
          this.input_.removeAttribute(attr);
        },
        isFocused: () => document.activeElement === this.input_,
        registerInputInteractionHandler: (evtType, handler) => this.input_.addEventListener(evtType, handler, applyPassive()),
        deregisterInputInteractionHandler: (evtType, handler) => {
          var _a2;
          return (_a2 = this.input_) == null ? void 0 : _a2.removeEventListener(evtType, handler, applyPassive());
        }
      };
    }
    getLabelAdapterMethods_() {
      return {
        floatLabel: (shouldFloat) => {
          var _a2;
          return (_a2 = this.label_) == null ? void 0 : _a2.float(shouldFloat);
        },
        getLabelWidth: () => this.label_ ? this.label_.getWidth() : 0,
        hasLabel: () => Boolean(this.label_),
        shakeLabel: (shouldShake) => {
          var _a2;
          return (_a2 = this.label_) == null ? void 0 : _a2.shake(shouldShake);
        },
        setLabelRequired: (isRequired) => {
          var _a2;
          return (_a2 = this.label_) == null ? void 0 : _a2.setRequired(isRequired);
        }
      };
    }
    getLineRippleAdapterMethods_() {
      return {
        activateLineRipple: () => {
          var _a2;
          return (_a2 = this.lineRipple_) == null ? void 0 : _a2.activate();
        },
        deactivateLineRipple: () => {
          var _a2;
          return (_a2 = this.lineRipple_) == null ? void 0 : _a2.deactivate();
        },
        setLineRippleTransformOrigin: (normalizedX) => {
          var _a2;
          return (_a2 = this.lineRipple_) == null ? void 0 : _a2.setRippleCenter(normalizedX);
        }
      };
    }
    getOutlineAdapterMethods_() {
      return {
        closeOutline: () => {
          var _a2;
          return (_a2 = this.outline_) == null ? void 0 : _a2.closeNotch();
        },
        hasOutline: () => Boolean(this.outline_),
        notchOutline: (labelWidth) => {
          var _a2;
          return (_a2 = this.outline_) == null ? void 0 : _a2.notch(labelWidth);
        }
      };
    }
    /**
     * @return A map of all subcomponents to subfoundations.
     */
    getFoundationMap_() {
      var _a2;
      return {
        characterCounter: this.characterCounter_ ? (_a2 = this.characterCounter_) == null ? void 0 : _a2.foundationForTextField : void 0,
        helperText: this.helperText_ ? this.helperText_.foundationForTextField : void 0,
        leadingIcon: this.leadingIcon_ ? this.leadingIcon_.foundationForTextField : void 0,
        trailingIcon: this.trailingIcon_ ? this.trailingIcon_.foundationForTextField : void 0
      };
    }
    onInput(evt) {
      const value = evt.target.value;
      this.value = value;
    }
    onFocus() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.activateFocus();
      this.emit("focus", {}, true);
    }
    onChange(evt) {
      const value = evt.target.value;
      this.value = value;
    }
    onBlur() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.deactivateFocus();
      this.emit("blur", {}, true);
    }
    focus() {
      this.input_.focus();
    }
    blur() {
      this.input_.blur();
    }
    onKeyup(e) {
      if (this.blurOnEnter && e.keyCode === 13) {
        this.blur();
      }
      return true;
    }
  };
  __setFunctionName(_classThis, "MdcTextField");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _label_decorators = [bindable()];
    _textarea_decorators = [bindable({ set: booleanAttr23 })];
    _endAligned_decorators = [bindable({ set: booleanAttr23 })];
    _ltrText_decorators = [bindable({ set: booleanAttr23 })];
    _outlined_decorators = [bindable({ set: booleanAttr23 })];
    _prefix_decorators = [bindable()];
    _suffix_decorators = [bindable()];
    _required_decorators = [bindable({ set: booleanAttr23 })];
    _disabled_decorators = [bindable({ set: booleanAttr23 })];
    _readonly_decorators = [bindable({ set: booleanAttr23 })];
    _blurOnEnter_decorators = [bindable({ set: booleanAttr23 })];
    _maxlength_decorators = [bindable()];
    _rows_decorators = [bindable()];
    _cols_decorators = [bindable()];
    _max_decorators = [bindable()];
    _min_decorators = [bindable()];
    _step_decorators = [bindable()];
    _autocomplete_decorators = [bindable()];
    _tabindex_decorators = [bindable({ set: number23 })];
    _type_decorators = [bindable()];
    _name_decorators = [bindable()];
    _placeholder_decorators = [bindable()];
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _textarea_decorators, { kind: "field", name: "textarea", static: false, private: false, access: { has: (obj) => "textarea" in obj, get: (obj) => obj.textarea, set: (obj, value) => {
      obj.textarea = value;
    } }, metadata: _metadata }, _textarea_initializers, _textarea_extraInitializers);
    __esDecorate(null, null, _endAligned_decorators, { kind: "field", name: "endAligned", static: false, private: false, access: { has: (obj) => "endAligned" in obj, get: (obj) => obj.endAligned, set: (obj, value) => {
      obj.endAligned = value;
    } }, metadata: _metadata }, _endAligned_initializers, _endAligned_extraInitializers);
    __esDecorate(null, null, _ltrText_decorators, { kind: "field", name: "ltrText", static: false, private: false, access: { has: (obj) => "ltrText" in obj, get: (obj) => obj.ltrText, set: (obj, value) => {
      obj.ltrText = value;
    } }, metadata: _metadata }, _ltrText_initializers, _ltrText_extraInitializers);
    __esDecorate(null, null, _outlined_decorators, { kind: "field", name: "outlined", static: false, private: false, access: { has: (obj) => "outlined" in obj, get: (obj) => obj.outlined, set: (obj, value) => {
      obj.outlined = value;
    } }, metadata: _metadata }, _outlined_initializers, _outlined_extraInitializers);
    __esDecorate(null, null, _prefix_decorators, { kind: "field", name: "prefix", static: false, private: false, access: { has: (obj) => "prefix" in obj, get: (obj) => obj.prefix, set: (obj, value) => {
      obj.prefix = value;
    } }, metadata: _metadata }, _prefix_initializers, _prefix_extraInitializers);
    __esDecorate(null, null, _suffix_decorators, { kind: "field", name: "suffix", static: false, private: false, access: { has: (obj) => "suffix" in obj, get: (obj) => obj.suffix, set: (obj, value) => {
      obj.suffix = value;
    } }, metadata: _metadata }, _suffix_initializers, _suffix_extraInitializers);
    __esDecorate(null, null, _required_decorators, { kind: "field", name: "required", static: false, private: false, access: { has: (obj) => "required" in obj, get: (obj) => obj.required, set: (obj, value) => {
      obj.required = value;
    } }, metadata: _metadata }, _required_initializers, _required_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _readonly_decorators, { kind: "field", name: "readonly", static: false, private: false, access: { has: (obj) => "readonly" in obj, get: (obj) => obj.readonly, set: (obj, value) => {
      obj.readonly = value;
    } }, metadata: _metadata }, _readonly_initializers, _readonly_extraInitializers);
    __esDecorate(null, null, _blurOnEnter_decorators, { kind: "field", name: "blurOnEnter", static: false, private: false, access: { has: (obj) => "blurOnEnter" in obj, get: (obj) => obj.blurOnEnter, set: (obj, value) => {
      obj.blurOnEnter = value;
    } }, metadata: _metadata }, _blurOnEnter_initializers, _blurOnEnter_extraInitializers);
    __esDecorate(null, null, _maxlength_decorators, { kind: "field", name: "maxlength", static: false, private: false, access: { has: (obj) => "maxlength" in obj, get: (obj) => obj.maxlength, set: (obj, value) => {
      obj.maxlength = value;
    } }, metadata: _metadata }, _maxlength_initializers, _maxlength_extraInitializers);
    __esDecorate(null, null, _rows_decorators, { kind: "field", name: "rows", static: false, private: false, access: { has: (obj) => "rows" in obj, get: (obj) => obj.rows, set: (obj, value) => {
      obj.rows = value;
    } }, metadata: _metadata }, _rows_initializers, _rows_extraInitializers);
    __esDecorate(null, null, _cols_decorators, { kind: "field", name: "cols", static: false, private: false, access: { has: (obj) => "cols" in obj, get: (obj) => obj.cols, set: (obj, value) => {
      obj.cols = value;
    } }, metadata: _metadata }, _cols_initializers, _cols_extraInitializers);
    __esDecorate(null, null, _max_decorators, { kind: "field", name: "max", static: false, private: false, access: { has: (obj) => "max" in obj, get: (obj) => obj.max, set: (obj, value) => {
      obj.max = value;
    } }, metadata: _metadata }, _max_initializers, _max_extraInitializers);
    __esDecorate(null, null, _min_decorators, { kind: "field", name: "min", static: false, private: false, access: { has: (obj) => "min" in obj, get: (obj) => obj.min, set: (obj, value) => {
      obj.min = value;
    } }, metadata: _metadata }, _min_initializers, _min_extraInitializers);
    __esDecorate(null, null, _step_decorators, { kind: "field", name: "step", static: false, private: false, access: { has: (obj) => "step" in obj, get: (obj) => obj.step, set: (obj, value) => {
      obj.step = value;
    } }, metadata: _metadata }, _step_initializers, _step_extraInitializers);
    __esDecorate(null, null, _autocomplete_decorators, { kind: "field", name: "autocomplete", static: false, private: false, access: { has: (obj) => "autocomplete" in obj, get: (obj) => obj.autocomplete, set: (obj, value) => {
      obj.autocomplete = value;
    } }, metadata: _metadata }, _autocomplete_initializers, _autocomplete_extraInitializers);
    __esDecorate(null, null, _tabindex_decorators, { kind: "field", name: "tabindex", static: false, private: false, access: { has: (obj) => "tabindex" in obj, get: (obj) => obj.tabindex, set: (obj, value) => {
      obj.tabindex = value;
    } }, metadata: _metadata }, _tabindex_initializers, _tabindex_extraInitializers);
    __esDecorate(null, null, _type_decorators, { kind: "field", name: "type", static: false, private: false, access: { has: (obj) => "type" in obj, get: (obj) => obj.type, set: (obj, value) => {
      obj.type = value;
    } }, metadata: _metadata }, _type_initializers, _type_extraInitializers);
    __esDecorate(null, null, _name_decorators, { kind: "field", name: "name", static: false, private: false, access: { has: (obj) => "name" in obj, get: (obj) => obj.name, set: (obj, value) => {
      obj.name = value;
    } }, metadata: _metadata }, _name_initializers, _name_extraInitializers);
    __esDecorate(null, null, _placeholder_decorators, { kind: "field", name: "placeholder", static: false, private: false, access: { has: (obj) => "placeholder" in obj, get: (obj) => obj.placeholder, set: (obj, value) => {
      obj.placeholder = value;
    } }, metadata: _metadata }, _placeholder_initializers, _placeholder_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTextField2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTextField2 = _classThis;
})();
function defineMdcTextFieldElementApis(element) {
  Object.defineProperties(element, {
    tagName: {
      get() {
        return "MDC-TEXT-FIELD";
      }
    },
    value: {
      get() {
        return CustomElement.for(this).viewModel.value;
      },
      set(value) {
        CustomElement.for(this).viewModel.value = value;
      },
      configurable: true
    },
    disabled: {
      get() {
        return CustomElement.for(this).viewModel.disabled;
      },
      set(value) {
        CustomElement.for(this).viewModel.disabled = value;
      },
      configurable: true
    },
    readOnly: {
      get() {
        return CustomElement.for(this).viewModel.readonly;
      },
      set(value) {
        CustomElement.for(this).viewModel.readonly = value;
      },
      configurable: true
    },
    valid: {
      get() {
        return CustomElement.for(this).viewModel.valid;
      },
      set(value) {
        CustomElement.for(this).viewModel.valid = value;
      },
      configurable: true
    },
    addError: {
      value(error) {
        CustomElement.for(this).viewModel.addError(error);
      },
      configurable: true
    },
    removeError: {
      value(error) {
        CustomElement.for(this).viewModel.removeError(error);
      },
      configurable: true
    },
    renderErrors: {
      value() {
        CustomElement.for(this).viewModel.renderErrors();
      },
      configurable: true
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    },
    blur: {
      value() {
        CustomElement.for(this).viewModel.blur();
      },
      configurable: true
    },
    isFocused: {
      get() {
        return document.activeElement === CustomElement.for(this).viewModel.input_;
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-line/mdc-text-field-helper-line.js
var import_dist1393 = __toESM(require_dist());
var import_dist1394 = __toESM(require_dist2());
var import_dist1395 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-line/mdc-text-field-helper-line.html?raw
var mdc_text_field_helper_line_default = `<template class="mdc-text-field-helper-line \${errors.length ? 'mdc-text-field-helper-line--with-errors' : ''}">
  <au-slot></au-slot>
  <!-- DO NOT FORMAT THIS FILE! ANY SPACE BEFORE <SLOT> BREAKS HELPER TEXT ALIGNMENT! -->
  <!-- beautify ignore:start -->
  <mdc-text-field-helper-text if.bind="errors.length" validation class="mdc-text-field-helper-text--errors"><span class="mdc-text-field-helper-text__error" repeat.for="e of errors">\${e}<br/></span></mdc-text-field-helper-text>
  <!-- beautify ignore:end -->
</template>
`;

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-line/mdc-text-field-helper-line.js
var MdcTextFieldHelperLine = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-text-field-helper-line", template: mdc_text_field_helper_line_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _errors_decorators;
  let _errors_initializers = [];
  let _errors_extraInitializers = [];
  var MdcTextFieldHelperLine2 = _classThis = class {
    constructor() {
      this.errors = __runInitializers(this, _errors_initializers, void 0);
      this.attachedPromise = (__runInitializers(this, _errors_extraInitializers), this.createAttachedPromise());
    }
    async createAttachedPromise() {
      return new Promise((r) => this.attachedPromiseResolve = r);
    }
    attached() {
      this.attachedPromiseResolve();
    }
    detached() {
      this.attachedPromise = this.createAttachedPromise();
    }
  };
  __setFunctionName(_classThis, "MdcTextFieldHelperLine");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _errors_decorators = [bindable()];
    __esDecorate(null, null, _errors_decorators, { kind: "field", name: "errors", static: false, private: false, access: { has: (obj) => "errors" in obj, get: (obj) => obj.errors, set: (obj, value) => {
      obj.errors = value;
    } }, metadata: _metadata }, _errors_initializers, _errors_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTextFieldHelperLine2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTextFieldHelperLine2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-text/mdc-text-field-helper-text.js
var import_dist1396 = __toESM(require_dist());
var import_dist1397 = __toESM(require_dist2());
var import_dist1398 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-text/mdc-text-field-helper-text.html?raw
var mdc_text_field_helper_text_default = "<!-- DO NOT FORMAT THIS FILE! ANY SPACE BETWEEN <TEMPLATE> BREAKS HELPER TEXT ALIGNMENT! -->\n<!-- beautify ignore:start -->\n<template class=\"\n    ${helperTextCssClasses.ROOT} ${persistent ? helperTextCssClasses.ROOT + '--persistent' : ''}\n    ${validation ? helperTextCssClasses.ROOT + '--validation-msg' : ''}\"><au-slot></au-slot></template>\n<!-- beautify ignore:end -->\n";

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-helper-text/mdc-text-field-helper-text.js
var MdcTextFieldHelperText = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-text-field-helper-text", template: mdc_text_field_helper_text_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent23;
  let _persistent_decorators;
  let _persistent_initializers = [];
  let _persistent_extraInitializers = [];
  let _validation_decorators;
  let _validation_initializers = [];
  let _validation_extraInitializers = [];
  var MdcTextFieldHelperText2 = _classThis = class extends _classSuper {
    // Provided for access by MDCTextField component
    get foundationForTextField() {
      return this.foundation;
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        getAttr: (attr) => this.root.getAttribute(attr),
        setAttr: (attr, value) => this.root.setAttribute(attr, value),
        removeAttr: (attr) => this.root.removeAttribute(attr),
        setContent: (content) => {
          this.root.textContent = content;
        }
      };
      return new MDCTextFieldHelperTextFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.helperTextCssClasses = cssClasses30;
      this.persistent = __runInitializers(this, _persistent_initializers, void 0);
      this.validation = (__runInitializers(this, _persistent_extraInitializers), __runInitializers(this, _validation_initializers, void 0));
      __runInitializers(this, _validation_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTextFieldHelperText");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _persistent_decorators = [bindable({ set: booleanAttr23 })];
    _validation_decorators = [bindable({ set: booleanAttr23 })];
    __esDecorate(null, null, _persistent_decorators, { kind: "field", name: "persistent", static: false, private: false, access: { has: (obj) => "persistent" in obj, get: (obj) => obj.persistent, set: (obj, value) => {
      obj.persistent = value;
    } }, metadata: _metadata }, _persistent_initializers, _persistent_extraInitializers);
    __esDecorate(null, null, _validation_decorators, { kind: "field", name: "validation", static: false, private: false, access: { has: (obj) => "validation" in obj, get: (obj) => obj.validation, set: (obj, value) => {
      obj.validation = value;
    } }, metadata: _metadata }, _validation_initializers, _validation_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTextFieldHelperText2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTextFieldHelperText2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/dist/mdc-text-field-character-counter.js
var import_dist1399 = __toESM(require_dist());
var import_dist1400 = __toESM(require_dist2());
var import_dist1401 = __toESM(require_dist3());
var MdcTextFieldCharacterCounter = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-text-field-character-counter", template: `<template class="${cssClasses28.ROOT}"></template>` })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent23;
  var MdcTextFieldCharacterCounter2 = _classThis = class extends _classSuper {
    // Provided for access by MDCTextField component
    get foundationForTextField() {
      return this.foundation;
    }
    getDefaultFoundation() {
      const adapter = {
        setContent: (content) => {
          this.root.textContent = content;
        }
      };
      return new MDCTextFieldCharacterCounterFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcTextFieldCharacterCounter");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTextFieldCharacterCounter2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTextFieldCharacterCounter2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/dist/enhance-mdc-text-field.js
var import_dist1402 = __toESM(require_dist());
var import_dist1403 = __toESM(require_dist2());
var import_dist1404 = __toESM(require_dist3());
var EnhanceMdcTextfield = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcTextfield2 = _classThis = class {
    compiling(template) {
      if (template.innerHTML.includes("<mdc-text-field")) {
        template.innerHTML = template.innerHTML.replaceAll("<mdc-text-field ", '<label as-element="mdc-text-field" mdc-text-field-element ').replaceAll("</mdc-text-field>", "</label>");
      }
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcTextfield");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcTextfield2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcTextfield2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/text-field/dist/index.js
var configured6 = false;
var TextFieldConfiguration = {
  register(container) {
    if (configured6) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.hasAttribute("mdc-text-field-element") ? property === "value" : false);
        nodeObserverLocator.useConfig("MDC-TEXT-FIELD", "value", { events: ["input", "change"] });
      }).register(container);
      configured6 = true;
      return container.register(MdcTextField, MdcTextFieldIcon, MdcTextFieldHelperLine, MdcTextFieldHelperText, MdcTextFieldCharacterCounter, FloatingLabelConfiguration, LineRippleConfiguration, NotchedOutlineConfiguration, RippleConfiguration, EnhanceMdcTextfield);
    }
  },
  customize(optionsProvider) {
    return {
      register(container) {
        const options = container.get(MdcDefaultTextFieldConfiguration);
        optionsProvider(options);
        return TextFieldConfiguration.register(container);
      }
    };
  }
};

// node_modules/@aurelia-mdc-web/top-app-bar/dist/index.js
var import_dist1453 = __toESM(require_dist());
var import_dist1454 = __toESM(require_dist2());
var import_dist1455 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar.js
var import_dist1429 = __toESM(require_dist());
var import_dist1430 = __toESM(require_dist2());
var import_dist1431 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1426 = __toESM(require_dist());
var import_dist1427 = __toESM(require_dist2());
var import_dist1428 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1411 = __toESM(require_dist());
var import_dist1412 = __toESM(require_dist2());
var import_dist1413 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1408 = __toESM(require_dist());
var import_dist1409 = __toESM(require_dist2());
var import_dist1410 = __toESM(require_dist3());
function booleanAttr24(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap24 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr24 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr24 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr24 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1414 = __toESM(require_dist());
var import_dist1415 = __toESM(require_dist2());
var import_dist1416 = __toESM(require_dist3());
var MdcPromisifyReference24 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1417 = __toESM(require_dist());
var import_dist1418 = __toESM(require_dist2());
var import_dist1419 = __toESM(require_dist3());
var MdcComponent24 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1420 = __toESM(require_dist());
var import_dist1421 = __toESM(require_dist2());
var import_dist1422 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1423 = __toESM(require_dist());
var import_dist1424 = __toESM(require_dist2());
var import_dist1425 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar.html?raw
var mdc_top_app_bar_default = "<template class=\"mdc-top-app-bar\n  ${short ? 'mdc-top-app-bar--short' : ''}\n  ${short && collapsed ? 'mdc-top-app-bar--short-collapsed' : ''}\n  ${fixed ? 'mdc-top-app-bar--fixed' : ''}\n  ${prominent ? 'mdc-top-app-bar--prominent' : ''}\n  ${dense ? 'mdc-top-app-bar--dense' : ''}\n  ${hasActionItems ? 'mdc-top-app-bar--short-has-action-item' : ''}\">\n  <au-slot></au-slot>\n</template>\n";

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar.js
var MdcTopAppBar = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-top-app-bar", template: mdc_top_app_bar_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent24;
  let _short_decorators;
  let _short_initializers = [];
  let _short_extraInitializers = [];
  let _collapsed_decorators;
  let _collapsed_initializers = [];
  let _collapsed_extraInitializers = [];
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _prominent_decorators;
  let _prominent_initializers = [];
  let _prominent_extraInitializers = [];
  let _dense_decorators;
  let _dense_initializers = [];
  let _dense_extraInitializers = [];
  let _scrollTarget_decorators;
  let _scrollTarget_initializers = [];
  let _scrollTarget_extraInitializers = [];
  var MdcTopAppBar2 = _classThis = class extends _classSuper {
    scrollTargetChanged(newValue, oldValue) {
      oldValue == null ? void 0 : oldValue.removeEventListener("scroll", this.handleTargetScroll_);
      newValue == null ? void 0 : newValue.addEventListener("scroll", this.handleTargetScroll_);
    }
    initialSyncWithDOM() {
      var _a2, _b, _c;
      this.handleNavigationClick_ = (_a2 = this.foundation) == null ? void 0 : _a2.handleNavigationClick.bind(this.foundation);
      this.handleWindowResize_ = (_b = this.foundation) == null ? void 0 : _b.handleWindowResize.bind(this.foundation);
      this.handleTargetScroll_ = (_c = this.foundation) == null ? void 0 : _c.handleTargetScroll.bind(this.foundation);
      this.hasActionItems = !!this.root.querySelector(strings3.ACTION_ITEM_SELECTOR);
      this.scrollTargetChanged(this.scrollTarget, window);
      this.navIcon_ = this.root.querySelector(strings3.NAVIGATION_ICON_SELECTOR);
      if (this.navIcon_) {
        this.navIcon_.addEventListener("click", this.handleNavigationClick_);
      }
      const isFixed = this.root.classList.contains(cssClasses3.FIXED_CLASS);
      const isShort = this.root.classList.contains(cssClasses3.SHORT_CLASS);
      if (!isShort && !isFixed) {
        window.addEventListener("resize", this.handleWindowResize_);
      }
    }
    getDefaultFoundation() {
      const adapter = {
        hasClass: (className) => this.root.classList.contains(className),
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        setStyle: (property, value) => this.root.style.setProperty(property, value),
        getTopAppBarHeight: () => this.root.clientHeight,
        notifyNavigationIconClicked: () => this.emit(strings3.NAVIGATION_EVENT, {}),
        getViewportScrollY: () => {
          const win = this.scrollTarget;
          const el = this.scrollTarget;
          return win.pageYOffset !== void 0 ? win.pageYOffset : el.scrollTop;
        },
        getTotalActionItems: () => this.root.querySelectorAll(strings3.ACTION_ITEM_SELECTOR).length
      };
      let foundation;
      if (this.root.classList.contains(cssClasses3.SHORT_CLASS)) {
        foundation = new MDCShortTopAppBarFoundation(adapter);
      } else if (this.root.classList.contains(cssClasses3.FIXED_CLASS)) {
        foundation = new MDCFixedTopAppBarFoundation(adapter);
      } else {
        foundation = new MDCTopAppBarFoundation(adapter);
      }
      return foundation;
    }
    constructor() {
      super(...arguments);
      this.short = __runInitializers(this, _short_initializers, void 0);
      this.collapsed = (__runInitializers(this, _short_extraInitializers), __runInitializers(this, _collapsed_initializers, void 0));
      this.fixed = (__runInitializers(this, _collapsed_extraInitializers), __runInitializers(this, _fixed_initializers, void 0));
      this.prominent = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _prominent_initializers, void 0));
      this.dense = (__runInitializers(this, _prominent_extraInitializers), __runInitializers(this, _dense_initializers, void 0));
      this.scrollTarget = (__runInitializers(this, _dense_extraInitializers), __runInitializers(this, _scrollTarget_initializers, window));
      __runInitializers(this, _scrollTarget_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTopAppBar");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _short_decorators = [bindable({ set: booleanAttr24 })];
    _collapsed_decorators = [bindable({ set: booleanAttr24 })];
    _fixed_decorators = [bindable({ set: booleanAttr24 })];
    _prominent_decorators = [bindable({ set: booleanAttr24 })];
    _dense_decorators = [bindable({ set: booleanAttr24 })];
    _scrollTarget_decorators = [bindable()];
    __esDecorate(null, null, _short_decorators, { kind: "field", name: "short", static: false, private: false, access: { has: (obj) => "short" in obj, get: (obj) => obj.short, set: (obj, value) => {
      obj.short = value;
    } }, metadata: _metadata }, _short_initializers, _short_extraInitializers);
    __esDecorate(null, null, _collapsed_decorators, { kind: "field", name: "collapsed", static: false, private: false, access: { has: (obj) => "collapsed" in obj, get: (obj) => obj.collapsed, set: (obj, value) => {
      obj.collapsed = value;
    } }, metadata: _metadata }, _collapsed_initializers, _collapsed_extraInitializers);
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _prominent_decorators, { kind: "field", name: "prominent", static: false, private: false, access: { has: (obj) => "prominent" in obj, get: (obj) => obj.prominent, set: (obj, value) => {
      obj.prominent = value;
    } }, metadata: _metadata }, _prominent_initializers, _prominent_extraInitializers);
    __esDecorate(null, null, _dense_decorators, { kind: "field", name: "dense", static: false, private: false, access: { has: (obj) => "dense" in obj, get: (obj) => obj.dense, set: (obj, value) => {
      obj.dense = value;
    } }, metadata: _metadata }, _dense_initializers, _dense_extraInitializers);
    __esDecorate(null, null, _scrollTarget_decorators, { kind: "field", name: "scrollTarget", static: false, private: false, access: { has: (obj) => "scrollTarget" in obj, get: (obj) => obj.scrollTarget, set: (obj, value) => {
      obj.scrollTarget = value;
    } }, metadata: _metadata }, _scrollTarget_initializers, _scrollTarget_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBar2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBar2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-row.js
var import_dist1432 = __toESM(require_dist());
var import_dist1433 = __toESM(require_dist2());
var import_dist1434 = __toESM(require_dist3());
var MdcTopAppBarRow = (() => {
  let _classDecorators = [customElement({
    name: "mdc-top-app-bar-row",
    template: '<template class="mdc-top-app-bar__row"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTopAppBarRow2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcTopAppBarRow");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarRow2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarRow2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-title.js
var import_dist1435 = __toESM(require_dist());
var import_dist1436 = __toESM(require_dist2());
var import_dist1437 = __toESM(require_dist3());
var MdcTopAppBarTitle = (() => {
  let _classDecorators = [customElement({
    name: "mdc-top-app-bar-title",
    template: '<template class="mdc-top-app-bar__title"><au-slot></au-slot></template>'
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTopAppBarTitle2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcTopAppBarTitle");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarTitle2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarTitle2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-section/mdc-top-app-bar-section.js
var import_dist1438 = __toESM(require_dist());
var import_dist1439 = __toESM(require_dist2());
var import_dist1440 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-section/mdc-top-app-bar-section.html?raw
var mdc_top_app_bar_section_default = `<template class="mdc-top-app-bar__section mdc-top-app-bar__section--align-\${end ? 'end' : 'start'}" role="toolbar">
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-section/mdc-top-app-bar-section.js
var MdcTopAppBarSection = (() => {
  let _classDecorators = [customElement({ name: "mdc-top-app-bar-section", template: mdc_top_app_bar_section_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _end_decorators;
  let _end_initializers = [];
  let _end_extraInitializers = [];
  var MdcTopAppBarSection2 = _classThis = class {
    constructor() {
      this.end = __runInitializers(this, _end_initializers, void 0);
      __runInitializers(this, _end_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcTopAppBarSection");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _end_decorators = [bindable({ set: booleanAttr24 })];
    __esDecorate(null, null, _end_decorators, { kind: "field", name: "end", static: false, private: false, access: { has: (obj) => "end" in obj, get: (obj) => obj.end, set: (obj, value) => {
      obj.end = value;
    } }, metadata: _metadata }, _end_initializers, _end_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarSection2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarSection2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-fixed-adjust.js
var import_dist1441 = __toESM(require_dist());
var import_dist1442 = __toESM(require_dist2());
var import_dist1443 = __toESM(require_dist3());
var MdcTopAppBarFixedAdjust = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-top-app-bar-fixed-adjust")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTopAppBarFixedAdjust2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add(this.value ? `mdc-top-app-bar--${this.value}-fixed-adjust` : "mdc-top-app-bar--fixed-adjust");
    }
  };
  __setFunctionName(_classThis, "MdcTopAppBarFixedAdjust");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarFixedAdjust2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarFixedAdjust2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-nav-icon.js
var import_dist1444 = __toESM(require_dist());
var import_dist1445 = __toESM(require_dist2());
var import_dist1446 = __toESM(require_dist3());
var MdcTopAppBarNavIcon = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-top-app-bar-nav-icon")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTopAppBarNavIcon2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.setAttribute("role", "button");
      this.root.classList.add("mdc-top-app-bar__navigation-icon", "mdc-icon-button");
    }
  };
  __setFunctionName(_classThis, "MdcTopAppBarNavIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarNavIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarNavIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/mdc-top-app-bar-action-item.js
var import_dist1447 = __toESM(require_dist());
var import_dist1448 = __toESM(require_dist2());
var import_dist1449 = __toESM(require_dist3());
var MdcTopAppBarActionItem = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-top-app-bar-action-item")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTopAppBarActionItem2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.setAttribute("role", "button");
      this.root.classList.add("mdc-top-app-bar__action-item", "mdc-icon-button");
    }
  };
  __setFunctionName(_classThis, "MdcTopAppBarActionItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTopAppBarActionItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTopAppBarActionItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/enhance-top-app-bar-actions.js
var import_dist1450 = __toESM(require_dist());
var import_dist1451 = __toESM(require_dist2());
var import_dist1452 = __toESM(require_dist3());
var EnhanceTopAppBarActions = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceTopAppBarActions2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-top-app-bar-action-item=""', 'mdc-top-app-bar-action-item="" mdc-ripple="unbounded.bind: true"');
      template.innerHTML = template.innerHTML.replaceAll('mdc-top-app-bar-nav-icon=""', 'mdc-top-app-bar-nav-icon="" mdc-ripple="unbounded.bind: true"');
    }
  };
  __setFunctionName(_classThis, "EnhanceTopAppBarActions");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceTopAppBarActions2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceTopAppBarActions2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/top-app-bar/dist/index.js
var registered19 = false;
var TopAppBarConfiguration = {
  register(container) {
    if (registered19) {
      return container;
    } else {
      registered19 = true;
      return container.register(MdcTopAppBar, MdcTopAppBarRow, MdcTopAppBarTitle, MdcTopAppBarSection, MdcTopAppBarFixedAdjust, MdcTopAppBarNavIcon, MdcTopAppBarActionItem, EnhanceTopAppBarActions);
    }
  }
};

// node_modules/@aurelia-mdc-web/typography/dist/index.js
var import_dist1459 = __toESM(require_dist());
var import_dist1460 = __toESM(require_dist2());
var import_dist1461 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/typography/dist/mdc-typography.js
var import_dist1456 = __toESM(require_dist());
var import_dist1457 = __toESM(require_dist2());
var import_dist1458 = __toESM(require_dist3());
var MdcTypography = (() => {
  let _classDecorators = [inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTypography2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add(this.type ? `mdc-typography--${this.type}` : "mdc-typography");
    }
  };
  __setFunctionName(_classThis, "MdcTypography");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTypography2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTypography2 = _classThis;
})();
var MdcHeadline1 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline1")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline12 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline1";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline1");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline12 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline12 = _classThis;
})();
var MdcHeadline2 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline2")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline22 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline2";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline2");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline22 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline22 = _classThis;
})();
var MdcHeadline3 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline3")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline32 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline3";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline3");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline32 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline32 = _classThis;
})();
var MdcHeadline4 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline4")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline42 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline4";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline4");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline42 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline42 = _classThis;
})();
var MdcHeadline5 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline5")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline52 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline5";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline5");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline52 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline52 = _classThis;
})();
var MdcHeadline6 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-headline6")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcHeadline62 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "headline6";
    }
  };
  __setFunctionName(_classThis, "MdcHeadline6");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcHeadline62 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcHeadline62 = _classThis;
})();
var MdcSubtitle1 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-subtitle1")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcSubtitle12 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "subtitle1";
    }
  };
  __setFunctionName(_classThis, "MdcSubtitle1");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSubtitle12 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSubtitle12 = _classThis;
})();
var MdcSubtitle2 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-subtitle2")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcSubtitle22 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "subtitle2";
    }
  };
  __setFunctionName(_classThis, "MdcSubtitle2");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSubtitle22 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSubtitle22 = _classThis;
})();
var MdcBody1 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-body1")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcBody12 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "body1";
    }
  };
  __setFunctionName(_classThis, "MdcBody1");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcBody12 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcBody12 = _classThis;
})();
var MdcBody2 = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-body2")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcBody22 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "body2";
    }
  };
  __setFunctionName(_classThis, "MdcBody2");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcBody22 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcBody22 = _classThis;
})();
var MdcCaption = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-caption")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcCaption2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "caption";
    }
  };
  __setFunctionName(_classThis, "MdcCaption");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcCaption2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcCaption2 = _classThis;
})();
var MdcTypographyButton = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-typography-button")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcTypographyButton2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "button";
    }
  };
  __setFunctionName(_classThis, "MdcTypographyButton");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTypographyButton2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTypographyButton2 = _classThis;
})();
var MdcOveline = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-overline")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcTypography;
  var MdcOveline2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.type = "overline";
    }
  };
  __setFunctionName(_classThis, "MdcOveline");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcOveline2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcOveline2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/typography/dist/index.js
var registered20 = false;
var TypographyConfiguration = {
  register(container) {
    if (registered20) {
      return container;
    } else {
      registered20 = true;
      return container.register(MdcBody1, MdcBody2, MdcCaption, MdcHeadline1, MdcHeadline2, MdcHeadline3, MdcHeadline4, MdcHeadline5, MdcHeadline6, MdcOveline, MdcSubtitle1, MdcSubtitle2, MdcTypographyButton);
    }
  }
};

// node_modules/@aurelia-mdc-web/menu/dist/index.js
var import_dist1540 = __toESM(require_dist());
var import_dist1541 = __toESM(require_dist2());
var import_dist1542 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/dist/mdc-menu.js
var import_dist1492 = __toESM(require_dist());
var import_dist1493 = __toESM(require_dist2());
var import_dist1494 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1480 = __toESM(require_dist());
var import_dist1481 = __toESM(require_dist2());
var import_dist1482 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1465 = __toESM(require_dist());
var import_dist1466 = __toESM(require_dist2());
var import_dist1467 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1462 = __toESM(require_dist());
var import_dist1463 = __toESM(require_dist2());
var import_dist1464 = __toESM(require_dist3());
function number25(a) {
  return Number(a);
}
function booleanAttr25(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap25 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr25 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr25 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr25 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1468 = __toESM(require_dist());
var import_dist1469 = __toESM(require_dist2());
var import_dist1470 = __toESM(require_dist3());
var MdcPromisifyReference25 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1471 = __toESM(require_dist());
var import_dist1472 = __toESM(require_dist2());
var import_dist1473 = __toESM(require_dist3());
var MdcComponent25 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1474 = __toESM(require_dist());
var import_dist1475 = __toESM(require_dist2());
var import_dist1476 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1477 = __toESM(require_dist());
var import_dist1478 = __toESM(require_dist2());
var import_dist1479 = __toESM(require_dist3());

// node_modules/@material/menu/index.js
var import_dist1489 = __toESM(require_dist());
var import_dist1490 = __toESM(require_dist2());
var import_dist1491 = __toESM(require_dist3());

// node_modules/@material/menu/adapter.js
var import_dist1483 = __toESM(require_dist());
var import_dist1484 = __toESM(require_dist2());
var import_dist1485 = __toESM(require_dist3());

// node_modules/@material/menu/types.js
var import_dist1486 = __toESM(require_dist());
var import_dist1487 = __toESM(require_dist2());
var import_dist1488 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu/dist/mdc-menu.html?raw
var mdc_menu_default = '<template class="mdc-menu"\n  mdc-menu-surface="fixed.bind: fixed; anchor-corner.bind: anchorCorner; anchor-margin.bind: anchorMargin; hoist-to-body.bind: hoistToBody; anchor.bind: anchor; quick-open.bind: quickOpen; max-height.bind: maxHeight; open-bottom-bias.bind: openBottomBias; stay-open.bind: stayOpen"\n  mdc-menu-surface.ref="menuSurface" keydown.trigger="handleKeydown_($event)"\n  mdcmenusurface:opened.trigger="handleMenuSurfaceOpened_()" mdclist:action.trigger="handleItemAction_($event)">\n  <au-slot></au-slot>\n</template>\n';

// node_modules/@aurelia-mdc-web/menu/dist/mdc-menu.js
strings19.SELECTED_EVENT = strings19.SELECTED_EVENT.toLowerCase();
var MdcMenu = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-menu", template: mdc_menu_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent25;
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _typeahead_decorators;
  let _typeahead_initializers = [];
  let _typeahead_extraInitializers = [];
  let _hoistToBody_decorators;
  let _hoistToBody_initializers = [];
  let _hoistToBody_extraInitializers = [];
  let _anchor_decorators;
  let _anchor_initializers = [];
  let _anchor_extraInitializers = [];
  let _defaultFocusState_decorators;
  let _defaultFocusState_initializers = [];
  let _defaultFocusState_extraInitializers = [];
  let _anchorCorner_decorators;
  let _anchorCorner_initializers = [];
  let _anchorCorner_extraInitializers = [];
  let _anchorMargin_decorators;
  let _anchorMargin_initializers = [];
  let _anchorMargin_extraInitializers = [];
  let _quickOpen_decorators;
  let _quickOpen_initializers = [];
  let _quickOpen_extraInitializers = [];
  let _stayOpenOnSelection_decorators;
  let _stayOpenOnSelection_initializers = [];
  let _stayOpenOnSelection_extraInitializers = [];
  let _maxHeight_decorators;
  let _maxHeight_initializers = [];
  let _maxHeight_extraInitializers = [];
  let _openBottomBias_decorators;
  let _openBottomBias_initializers = [];
  let _openBottomBias_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  let _selectOnTab_decorators;
  let _selectOnTab_initializers = [];
  let _selectOnTab_extraInitializers = [];
  let _stayOpen_decorators;
  let _stayOpen_initializers = [];
  let _stayOpen_extraInitializers = [];
  var MdcMenu2 = _classThis = class extends _classSuper {
    // TODO: can we use child here?
    // @child('mdc-list')
    get list_() {
      const el = this.root.querySelector("mdc-list,mdc-deprecated-list");
      return el ? CustomElement.for(el).viewModel : void 0;
    }
    typeaheadChanged() {
      if (this.list_ && this.typeahead !== void 0) {
        setTimeout(() => {
          this.list_.typeahead = this.typeahead;
        }, 0);
      }
    }
    defaultFocusStateChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setDefaultFocusState(DefaultFocusState[this.defaultFocusState]);
    }
    skipRestoreFocusChanged() {
      if (this.skipRestoreFocus) {
        this.root.setAttribute("data-menu-item-skip-restore-focus", "true");
      } else {
        this.root.removeAttribute("data-menu-item-skip-restore-focus");
      }
    }
    handleKeydown_(evt) {
      var _a2, _b, _c, _d;
      const focusedItemIndex = ((_b = (_a2 = this.list_) == null ? void 0 : _a2.foundation) == null ? void 0 : _b.getFocusedItemIndex()) ?? numbers.UNSET_INDEX;
      if (this.selectOnTab && (evt.key === "Tab" || evt.keyCode === 9) && focusedItemIndex !== numbers.UNSET_INDEX) {
        (_c = this.foundation) == null ? void 0 : _c.handleItemAction(this.items[focusedItemIndex]);
      } else {
        (_d = this.foundation) == null ? void 0 : _d.handleKeydown(evt);
      }
      return true;
    }
    handleItemAction_(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleItemAction(this.items[evt.detail.index]);
      return true;
    }
    handleMenuSurfaceOpened_() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleMenuSurfaceOpened();
      return true;
    }
    get open() {
      return this.menuSurface.open;
    }
    set open(value) {
      this.menuSurface.open = value;
    }
    /** Toggles the menu to open or close */
    toggle() {
      this.open = !this.open;
    }
    openAnchored(anchor) {
      this.anchor = anchor;
      this.open = true;
    }
    get wrapFocus() {
      return this.list_ ? this.list_.wrapFocus : false;
    }
    set wrapFocus(value) {
      if (this.list_) {
        this.list_.wrapFocus = value;
      }
    }
    /**
     * @return Whether typeahead logic is currently matching some user prefix.
     */
    get typeaheadInProgress() {
      return this.list_ ? this.list_.typeaheadInProgress : false;
    }
    /**
     * Return the items within the menu. Note that this only contains the set of elements within
     * the items container that are proper list items, and not supplemental / presentational DOM
     * elements.
     */
    get items() {
      return this.list_ ? this.list_.listElements : [];
    }
    /**
     * Retrieves the selected index. Only applicable to select menus.
     * @return The selected index, which is a number for single selection and
     *     radio lists, and an array of numbers for checkbox lists.
     */
    get selectedIndex() {
      return this.list_ ? this.list_.selectedIndex : numbers.UNSET_INDEX;
    }
    /**
     * Sets the selected index of the list. Only applicable to select menus.
     * @param index The selected index, which is a number for single selection and
     *     radio lists, and an array of numbers for checkbox lists.
     */
    set selectedIndex(index) {
      if (this.list_) {
        this.list_.selectedIndex = index;
      }
    }
    attaching() {
      if (this.defaultFocusState !== void 0) {
        this.defaultFocusStateChanged();
      }
      if (this.hoistToBody) {
        this.root.style.position = "fixed";
      }
    }
    initialSyncWithDOM() {
      this.typeaheadChanged();
    }
    /**
     * Given the next desired character from the user, adds it to the typeahead
     * buffer. Then, attempts to find the next option matching the buffer. Wraps
     * around if at the end of options.
     *
     * @param nextChar The next character to add to the prefix buffer.
     * @param startingIndex The index from which to start matching. Only relevant
     *     when starting a new match sequence. To start a new match sequence,
     *     clear the buffer using `clearTypeaheadBuffer`, or wait for the buffer
     *     to clear after a set interval defined in list foundation. Defaults to
     *     the currently focused index.
     * @return The index of the matched item, or -1 if no match.
     */
    typeaheadMatchItem(nextChar, startingIndex) {
      if (this.list_) {
        return this.list_.typeaheadMatchItem(nextChar, startingIndex);
      }
      return -1;
    }
    /**
     * Layout the underlying list element in the case of any dynamic updates
     * to its structure.
     */
    layout() {
      if (this.list_) {
        this.list_.layout();
      }
    }
    /**
     * @param corner Default anchor corner alignment of top-left menu corner.
     */
    setAnchorCorner(corner) {
      this.menuSurface.setAnchorCorner(corner);
    }
    /**
     * Sets the list item as the selected row at the specified index.
     * @param index Index of list item within menu.
     */
    setSelectedIndex(index) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setSelectedIndex(index);
    }
    /**
     * Sets the enabled state to isEnabled for the menu item at the given index.
     * @param index Index of the menu item
     * @param isEnabled The desired enabled state of the menu item.
     */
    setEnabled(index, isEnabled) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setEnabled(index, isEnabled);
    }
    /**
     * @return The item within the menu at the index specified.
     */
    getOptionByIndex(index) {
      const items = this.items;
      if (index < items.length) {
        return this.items[index];
      } else {
        return null;
      }
    }
    /**
     * @param index A menu item's index.
     * @return The primary text within the menu at the index specified.
     */
    getPrimaryTextAtIndex(index) {
      const item = this.getOptionByIndex(index);
      if (item && this.list_) {
        return this.list_.getPrimaryText(item) || "";
      }
      return "";
    }
    setAbsolutePosition(x, y) {
      this.menuSurface.setAbsolutePosition(x, y);
    }
    getDefaultFoundation() {
      const adapter = {
        addClassToElementAtIndex: (index, className) => {
          const list = this.items;
          list[index].classList.add(className);
        },
        removeClassFromElementAtIndex: (index, className) => {
          const list = this.items;
          list[index].classList.remove(className);
        },
        addAttributeToElementAtIndex: (index, attr, value) => {
          const list = this.items;
          list[index].setAttribute(attr, value);
        },
        removeAttributeFromElementAtIndex: (index, attr) => {
          const list = this.items;
          list[index].removeAttribute(attr);
        },
        getAttributeFromElementAtIndex: (index, attr) => {
          const list = this.items;
          return list[index].getAttribute(attr);
        },
        elementContainsClass: (element, className) => element.classList.contains(className),
        closeSurface: (skipRestoreFocus) => {
          var _a2;
          if (!this.stayOpenOnSelection) {
            (_a2 = this.menuSurface) == null ? void 0 : _a2.close(skipRestoreFocus);
          }
        },
        getElementIndex: (element) => this.items.indexOf(element),
        notifySelected: (evtData) => {
          const item = this.items[evtData.index];
          this.emit(strings19.SELECTED_EVENT, { index: evtData.index, item, data: CustomElement.for(item).viewModel.value });
        },
        getMenuItemCount: () => this.items.length,
        focusItemAtIndex: (index) => this.items[index].focus(),
        focusListRoot: () => this.root.querySelector(strings19.LIST_SELECTOR).focus(),
        isSelectableItemAtIndex: (index) => !!closest(this.items[index], `.${cssClasses21.MENU_SELECTION_GROUP}`),
        getSelectedSiblingOfItemAtIndex: (index) => {
          const selectionGroupEl = closest(this.items[index], `.${cssClasses21.MENU_SELECTION_GROUP}`);
          const selectedItemEl = selectionGroupEl.querySelector(`.${cssClasses21.MENU_SELECTED_LIST_ITEM}`);
          return selectedItemEl ? this.items.indexOf(selectedItemEl) : -1;
        }
      };
      return new MDCMenuFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.fixed = __runInitializers(this, _fixed_initializers, void 0);
      this.typeahead = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _typeahead_initializers, void 0));
      this.hoistToBody = (__runInitializers(this, _typeahead_extraInitializers), __runInitializers(this, _hoistToBody_initializers, void 0));
      this.anchor = (__runInitializers(this, _hoistToBody_extraInitializers), __runInitializers(this, _anchor_initializers, void 0));
      this.defaultFocusState = (__runInitializers(this, _anchor_extraInitializers), __runInitializers(this, _defaultFocusState_initializers, "LIST_ROOT"));
      this.anchorCorner = (__runInitializers(this, _defaultFocusState_extraInitializers), __runInitializers(this, _anchorCorner_initializers, void 0));
      this.anchorMargin = (__runInitializers(this, _anchorCorner_extraInitializers), __runInitializers(this, _anchorMargin_initializers, void 0));
      this.quickOpen = (__runInitializers(this, _anchorMargin_extraInitializers), __runInitializers(this, _quickOpen_initializers, void 0));
      this.stayOpenOnSelection = (__runInitializers(this, _quickOpen_extraInitializers), __runInitializers(this, _stayOpenOnSelection_initializers, void 0));
      this.maxHeight = (__runInitializers(this, _stayOpenOnSelection_extraInitializers), __runInitializers(this, _maxHeight_initializers, void 0));
      this.openBottomBias = (__runInitializers(this, _maxHeight_extraInitializers), __runInitializers(this, _openBottomBias_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _openBottomBias_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      this.selectOnTab = (__runInitializers(this, _skipRestoreFocus_extraInitializers), __runInitializers(this, _selectOnTab_initializers, void 0));
      this.stayOpen = (__runInitializers(this, _selectOnTab_extraInitializers), __runInitializers(this, _stayOpen_initializers, void 0));
      __runInitializers(this, _stayOpen_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcMenu");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _fixed_decorators = [bindable({ set: booleanAttr25 })];
    _typeahead_decorators = [bindable({ set: booleanAttr25 })];
    _hoistToBody_decorators = [bindable({ set: booleanAttr25, mode: BindingMode.oneTime })];
    _anchor_decorators = [bindable()];
    _defaultFocusState_decorators = [bindable()];
    _anchorCorner_decorators = [bindable()];
    _anchorMargin_decorators = [bindable()];
    _quickOpen_decorators = [bindable({ set: booleanAttr25 })];
    _stayOpenOnSelection_decorators = [bindable({ set: booleanAttr25 })];
    _maxHeight_decorators = [bindable()];
    _openBottomBias_decorators = [bindable({ set: number25 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr25 })];
    _selectOnTab_decorators = [bindable({ set: booleanAttr25 })];
    _stayOpen_decorators = [bindable({ set: booleanAttr25 })];
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _typeahead_decorators, { kind: "field", name: "typeahead", static: false, private: false, access: { has: (obj) => "typeahead" in obj, get: (obj) => obj.typeahead, set: (obj, value) => {
      obj.typeahead = value;
    } }, metadata: _metadata }, _typeahead_initializers, _typeahead_extraInitializers);
    __esDecorate(null, null, _hoistToBody_decorators, { kind: "field", name: "hoistToBody", static: false, private: false, access: { has: (obj) => "hoistToBody" in obj, get: (obj) => obj.hoistToBody, set: (obj, value) => {
      obj.hoistToBody = value;
    } }, metadata: _metadata }, _hoistToBody_initializers, _hoistToBody_extraInitializers);
    __esDecorate(null, null, _anchor_decorators, { kind: "field", name: "anchor", static: false, private: false, access: { has: (obj) => "anchor" in obj, get: (obj) => obj.anchor, set: (obj, value) => {
      obj.anchor = value;
    } }, metadata: _metadata }, _anchor_initializers, _anchor_extraInitializers);
    __esDecorate(null, null, _defaultFocusState_decorators, { kind: "field", name: "defaultFocusState", static: false, private: false, access: { has: (obj) => "defaultFocusState" in obj, get: (obj) => obj.defaultFocusState, set: (obj, value) => {
      obj.defaultFocusState = value;
    } }, metadata: _metadata }, _defaultFocusState_initializers, _defaultFocusState_extraInitializers);
    __esDecorate(null, null, _anchorCorner_decorators, { kind: "field", name: "anchorCorner", static: false, private: false, access: { has: (obj) => "anchorCorner" in obj, get: (obj) => obj.anchorCorner, set: (obj, value) => {
      obj.anchorCorner = value;
    } }, metadata: _metadata }, _anchorCorner_initializers, _anchorCorner_extraInitializers);
    __esDecorate(null, null, _anchorMargin_decorators, { kind: "field", name: "anchorMargin", static: false, private: false, access: { has: (obj) => "anchorMargin" in obj, get: (obj) => obj.anchorMargin, set: (obj, value) => {
      obj.anchorMargin = value;
    } }, metadata: _metadata }, _anchorMargin_initializers, _anchorMargin_extraInitializers);
    __esDecorate(null, null, _quickOpen_decorators, { kind: "field", name: "quickOpen", static: false, private: false, access: { has: (obj) => "quickOpen" in obj, get: (obj) => obj.quickOpen, set: (obj, value) => {
      obj.quickOpen = value;
    } }, metadata: _metadata }, _quickOpen_initializers, _quickOpen_extraInitializers);
    __esDecorate(null, null, _stayOpenOnSelection_decorators, { kind: "field", name: "stayOpenOnSelection", static: false, private: false, access: { has: (obj) => "stayOpenOnSelection" in obj, get: (obj) => obj.stayOpenOnSelection, set: (obj, value) => {
      obj.stayOpenOnSelection = value;
    } }, metadata: _metadata }, _stayOpenOnSelection_initializers, _stayOpenOnSelection_extraInitializers);
    __esDecorate(null, null, _maxHeight_decorators, { kind: "field", name: "maxHeight", static: false, private: false, access: { has: (obj) => "maxHeight" in obj, get: (obj) => obj.maxHeight, set: (obj, value) => {
      obj.maxHeight = value;
    } }, metadata: _metadata }, _maxHeight_initializers, _maxHeight_extraInitializers);
    __esDecorate(null, null, _openBottomBias_decorators, { kind: "field", name: "openBottomBias", static: false, private: false, access: { has: (obj) => "openBottomBias" in obj, get: (obj) => obj.openBottomBias, set: (obj, value) => {
      obj.openBottomBias = value;
    } }, metadata: _metadata }, _openBottomBias_initializers, _openBottomBias_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, null, _selectOnTab_decorators, { kind: "field", name: "selectOnTab", static: false, private: false, access: { has: (obj) => "selectOnTab" in obj, get: (obj) => obj.selectOnTab, set: (obj, value) => {
      obj.selectOnTab = value;
    } }, metadata: _metadata }, _selectOnTab_initializers, _selectOnTab_extraInitializers);
    __esDecorate(null, null, _stayOpen_decorators, { kind: "field", name: "stayOpen", static: false, private: false, access: { has: (obj) => "stayOpen" in obj, get: (obj) => obj.stayOpen, set: (obj, value) => {
      obj.stayOpen = value;
    } }, metadata: _metadata }, _stayOpen_initializers, _stayOpen_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcMenu2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcMenu2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu/dist/mdc-menu-selection-group.js
var import_dist1495 = __toESM(require_dist());
var import_dist1496 = __toESM(require_dist2());
var import_dist1497 = __toESM(require_dist3());
var MdcMenuSelectionGroup = (() => {
  let _classDecorators = [customElement({ name: "mdc-menu-selection-group", template: '<template class="mdc-menu__selection-group"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcMenuSelectionGroup2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcMenuSelectionGroup");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcMenuSelectionGroup2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcMenuSelectionGroup2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu/dist/mdc-menu-selection-group-icon.js
var import_dist1498 = __toESM(require_dist());
var import_dist1499 = __toESM(require_dist2());
var import_dist1500 = __toESM(require_dist3());
var MdcMenuSelectionGroupIcon = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-menu-selection-group-icon")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcMenuSelectionGroupIcon2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-menu__selection-group-icon");
    }
  };
  __setFunctionName(_classThis, "MdcMenuSelectionGroupIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcMenuSelectionGroupIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcMenuSelectionGroupIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu-surface/dist/index.js
var import_dist1537 = __toESM(require_dist());
var import_dist1538 = __toESM(require_dist2());
var import_dist1539 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/dist/mdc-menu-surface.js
var import_dist1531 = __toESM(require_dist());
var import_dist1532 = __toESM(require_dist2());
var import_dist1533 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1519 = __toESM(require_dist());
var import_dist1520 = __toESM(require_dist2());
var import_dist1521 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1504 = __toESM(require_dist());
var import_dist1505 = __toESM(require_dist2());
var import_dist1506 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1501 = __toESM(require_dist());
var import_dist1502 = __toESM(require_dist2());
var import_dist1503 = __toESM(require_dist3());
function number26(a) {
  return Number(a);
}
function booleanAttr26(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap26 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr26 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr26 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr26 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1507 = __toESM(require_dist());
var import_dist1508 = __toESM(require_dist2());
var import_dist1509 = __toESM(require_dist3());
var MdcPromisifyReference26 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1510 = __toESM(require_dist());
var import_dist1511 = __toESM(require_dist2());
var import_dist1512 = __toESM(require_dist3());
var MdcComponent26 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1513 = __toESM(require_dist());
var import_dist1514 = __toESM(require_dist2());
var import_dist1515 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1516 = __toESM(require_dist());
var import_dist1517 = __toESM(require_dist2());
var import_dist1518 = __toESM(require_dist3());

// node_modules/@material/menu-surface/index.js
var import_dist1528 = __toESM(require_dist());
var import_dist1529 = __toESM(require_dist2());
var import_dist1530 = __toESM(require_dist3());

// node_modules/@material/menu-surface/adapter.js
var import_dist1522 = __toESM(require_dist());
var import_dist1523 = __toESM(require_dist2());
var import_dist1524 = __toESM(require_dist3());

// node_modules/@material/menu-surface/types.js
var import_dist1525 = __toESM(require_dist());
var import_dist1526 = __toESM(require_dist2());
var import_dist1527 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/menu-surface/dist/mdc-menu-surface.js
strings18.OPENED_EVENT = strings18.OPENED_EVENT.toLowerCase();
strings18.CLOSED_EVENT = strings18.CLOSED_EVENT.toLowerCase();
var MdcMenuSurface = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-menu-surface")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent26;
  let _anchor_decorators;
  let _anchor_initializers = [];
  let _anchor_extraInitializers = [];
  let _hoistToBody_decorators;
  let _hoistToBody_initializers = [];
  let _hoistToBody_extraInitializers = [];
  let _fixed_decorators;
  let _fixed_initializers = [];
  let _fixed_extraInitializers = [];
  let _anchorCorner_decorators;
  let _anchorCorner_initializers = [];
  let _anchorCorner_extraInitializers = [];
  let _anchorMargin_decorators;
  let _anchorMargin_initializers = [];
  let _anchorMargin_extraInitializers = [];
  let _quickOpen_decorators;
  let _quickOpen_initializers = [];
  let _quickOpen_extraInitializers = [];
  let _fullWidth_decorators;
  let _fullWidth_initializers = [];
  let _fullWidth_extraInitializers = [];
  let _stayOpen_decorators;
  let _stayOpen_initializers = [];
  let _stayOpen_extraInitializers = [];
  let _maxHeight_decorators;
  let _maxHeight_initializers = [];
  let _maxHeight_extraInitializers = [];
  let _horizontallyCenteredOnViewport_decorators;
  let _horizontallyCenteredOnViewport_initializers = [];
  let _horizontallyCenteredOnViewport_extraInitializers = [];
  let _openBottomBias_decorators;
  let _openBottomBias_initializers = [];
  let _openBottomBias_extraInitializers = [];
  var MdcMenuSurface2 = _classThis = class extends _classSuper {
    fixedChanged() {
      var _a2;
      if (this.fixed) {
        this.root.classList.add(cssClasses20.FIXED);
      } else {
        this.root.classList.remove(cssClasses20.FIXED);
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.setFixedPosition(this.fixed);
    }
    anchorCornerChanged() {
      var _a2;
      if (this.anchorCorner !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setAnchorCorner(Corner[this.anchorCorner]);
      }
    }
    anchorMarginChanged() {
      var _a2;
      if (this.anchorMargin !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setAnchorMargin(this.anchorMargin);
      }
    }
    quickOpenChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setQuickOpen(this.quickOpen);
    }
    fullWidthChanged() {
      if (this.fullWidth) {
        this.root.classList.add("mdc-menu-surface--fullwidth");
      } else {
        this.root.classList.remove("mdc-menu-surface--fullwidth");
      }
    }
    async maxHeightChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setMaxHeight(this.maxHeight);
    }
    async horizontallyCenteredOnViewportChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setIsHorizontallyCenteredOnViewport(this.horizontallyCenteredOnViewport);
    }
    async openBottomBiasChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setOpenBottomBias(this.openBottomBias);
    }
    get open() {
      var _a2;
      return ((_a2 = this.foundation) == null ? void 0 : _a2.isOpen()) ?? false;
    }
    set open(value) {
      var _a2, _b;
      if (value) {
        (_a2 = this.foundation) == null ? void 0 : _a2.open();
      } else {
        (_b = this.foundation) == null ? void 0 : _b.close();
      }
    }
    handleKeydown(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleKeydown(evt);
    }
    handleBodyClick(evt) {
      var _a2;
      if (!this.stayOpen) {
        (_a2 = this.foundation) == null ? void 0 : _a2.handleBodyClick(evt);
      }
    }
    attaching() {
      this.root.classList.add(cssClasses20.ROOT);
    }
    handleEvent(evt) {
      switch (evt.currentTarget) {
        case this.root:
          switch (evt.type) {
            case "keydown":
              this.handleKeydown(evt);
              break;
          }
          break;
        case document.body:
          switch (evt.type) {
            case "click":
              this.handleBodyClick(evt);
              break;
          }
          break;
      }
    }
    registerBodyClickListener() {
      document.body.addEventListener("click", this);
    }
    deregisterBodyClickListener() {
      document.body.removeEventListener("click", this);
    }
    initialSyncWithDOM() {
      var _a2, _b, _c, _d, _e, _f;
      this.fixedChanged();
      this.fullWidthChanged();
      this.quickOpenChanged();
      this.anchorCornerChanged();
      this.anchorMarginChanged();
      const parentEl = this.root.parentElement;
      if (!this.anchor) {
        this.anchor = (parentEl == null ? void 0 : parentEl.classList.contains(cssClasses20.ANCHOR)) ? parentEl : null;
      }
      if (this.hoistToBody) {
        this.originalParent = this.root.parentElement;
        if (this.originalParent) {
          document.body.appendChild(this.originalParent.removeChild(this.root));
          (_a2 = this.foundation) == null ? void 0 : _a2.setIsHoisted(true);
        }
      }
      (_b = this.foundation) == null ? void 0 : _b.setFixedPosition(this.fixed);
      if (this.anchorCorner) {
        (_c = this.foundation) == null ? void 0 : _c.setAnchorCorner(Corner[this.anchorCorner]);
      }
      if (this.anchorMargin) {
        (_d = this.foundation) == null ? void 0 : _d.setAnchorMargin(this.anchorMargin);
      }
      if (this.maxHeight) {
        (_e = this.foundation) == null ? void 0 : _e.setMaxHeight(this.maxHeight);
      }
      if (this.horizontallyCenteredOnViewport !== void 0) {
        (_f = this.foundation) == null ? void 0 : _f.setIsHorizontallyCenteredOnViewport(this.horizontallyCenteredOnViewport);
      }
      this.listen("keydown", this);
    }
    destroy() {
      this.unlisten("keydown", this);
      if (this.originalParent) {
        this.originalParent.appendChild(document.body.removeChild(this.root));
      }
      super.destroy();
    }
    close(skipRestoreFocus = false) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.close(skipRestoreFocus);
    }
    /** Sets the absolute x/y position to position based on. Requires the menu to be hoisted. */
    setAbsolutePosition(x, y) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setAbsolutePosition(x, y);
      this.hoistToBody = true;
    }
    /**
     * @param corner Default anchor corner alignment of top-left surface corner.
     */
    setAnchorCorner(corner) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setAnchorCorner(corner);
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => this.root.classList.add(className),
        removeClass: (className) => this.root.classList.remove(className),
        hasClass: (className) => this.root.classList.contains(className),
        hasAnchor: () => !!this.anchor,
        notifyClose: () => {
          this.emit(MDCMenuSurfaceFoundation.strings.CLOSED_EVENT, {});
          this.deregisterBodyClickListener();
        },
        notifyClosing: () => {
          this.emit(MDCMenuSurfaceFoundation.strings.CLOSING_EVENT, {});
        },
        notifyOpen: () => {
          this.emit(MDCMenuSurfaceFoundation.strings.OPENED_EVENT, {});
          this.registerBodyClickListener();
        },
        notifyOpening: () => {
          this.emit(MDCMenuSurfaceFoundation.strings.OPENING_EVENT, {});
        },
        isElementInContainer: (el) => this.root.contains(el),
        isRtl: () => getComputedStyle(this.root).getPropertyValue("direction") === "rtl",
        setTransformOrigin: (origin) => {
          const propertyName = `${getCorrectPropertyName(window, "transform")}-origin`;
          this.root.style.setProperty(propertyName, origin);
        },
        isFocused: () => document.activeElement === this.root,
        saveFocus: () => {
          this.previousFocus = document.activeElement;
        },
        restoreFocus: () => {
          var _a2;
          if (this.root.contains(document.activeElement)) {
            if ((_a2 = this.previousFocus) == null ? void 0 : _a2.focus) {
              this.previousFocus.focus();
            }
          }
        },
        getInnerDimensions: () => {
          const firstChild = this.root.firstElementChild;
          this.root.style.overflowY = this.root.offsetHeight < firstChild.offsetHeight ? "scroll" : "";
          return {
            width: this.root.offsetWidth,
            height: this.root.offsetHeight
          };
        },
        getAnchorDimensions: () => this.anchor ? this.anchor.getBoundingClientRect() : null,
        getWindowDimensions: () => {
          return { width: window.innerWidth, height: window.innerHeight };
        },
        getBodyDimensions: () => {
          return { width: document.body.clientWidth, height: document.body.clientHeight };
        },
        getWindowScroll: () => {
          return { x: window.pageXOffset, y: window.pageYOffset };
        },
        setPosition: (position) => {
          const rootHTML = this.root;
          rootHTML.style.left = "left" in position ? `${position.left}px` : "";
          rootHTML.style.right = "right" in position ? `${position.right}px` : "";
          rootHTML.style.top = "top" in position ? `${position.top}px` : "";
          rootHTML.style.bottom = "bottom" in position ? `${position.bottom}px` : "";
        },
        setMaxHeight: (height) => {
          this.root.style.maxHeight = height;
        }
      };
      return new MDCMenuSurfaceFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.anchor = __runInitializers(this, _anchor_initializers, void 0);
      this.hoistToBody = (__runInitializers(this, _anchor_extraInitializers), __runInitializers(this, _hoistToBody_initializers, void 0));
      this.fixed = (__runInitializers(this, _hoistToBody_extraInitializers), __runInitializers(this, _fixed_initializers, void 0));
      this.anchorCorner = (__runInitializers(this, _fixed_extraInitializers), __runInitializers(this, _anchorCorner_initializers, void 0));
      this.anchorMargin = (__runInitializers(this, _anchorCorner_extraInitializers), __runInitializers(this, _anchorMargin_initializers, void 0));
      this.quickOpen = (__runInitializers(this, _anchorMargin_extraInitializers), __runInitializers(this, _quickOpen_initializers, void 0));
      this.fullWidth = (__runInitializers(this, _quickOpen_extraInitializers), __runInitializers(this, _fullWidth_initializers, void 0));
      this.stayOpen = (__runInitializers(this, _fullWidth_extraInitializers), __runInitializers(this, _stayOpen_initializers, void 0));
      this.maxHeight = (__runInitializers(this, _stayOpen_extraInitializers), __runInitializers(this, _maxHeight_initializers, void 0));
      this.horizontallyCenteredOnViewport = (__runInitializers(this, _maxHeight_extraInitializers), __runInitializers(this, _horizontallyCenteredOnViewport_initializers, void 0));
      this.openBottomBias = (__runInitializers(this, _horizontallyCenteredOnViewport_extraInitializers), __runInitializers(this, _openBottomBias_initializers, void 0));
      __runInitializers(this, _openBottomBias_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcMenuSurface");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _anchor_decorators = [bindable()];
    _hoistToBody_decorators = [bindable({ set: booleanAttr26, mode: BindingMode.oneTime })];
    _fixed_decorators = [bindable({ set: booleanAttr26 })];
    _anchorCorner_decorators = [bindable()];
    _anchorMargin_decorators = [bindable()];
    _quickOpen_decorators = [bindable({ set: booleanAttr26 })];
    _fullWidth_decorators = [bindable({ set: booleanAttr26 })];
    _stayOpen_decorators = [bindable({ set: booleanAttr26 })];
    _maxHeight_decorators = [bindable({ set: number26 })];
    _horizontallyCenteredOnViewport_decorators = [bindable({ set: booleanAttr26 })];
    _openBottomBias_decorators = [bindable({ set: number26 })];
    __esDecorate(null, null, _anchor_decorators, { kind: "field", name: "anchor", static: false, private: false, access: { has: (obj) => "anchor" in obj, get: (obj) => obj.anchor, set: (obj, value) => {
      obj.anchor = value;
    } }, metadata: _metadata }, _anchor_initializers, _anchor_extraInitializers);
    __esDecorate(null, null, _hoistToBody_decorators, { kind: "field", name: "hoistToBody", static: false, private: false, access: { has: (obj) => "hoistToBody" in obj, get: (obj) => obj.hoistToBody, set: (obj, value) => {
      obj.hoistToBody = value;
    } }, metadata: _metadata }, _hoistToBody_initializers, _hoistToBody_extraInitializers);
    __esDecorate(null, null, _fixed_decorators, { kind: "field", name: "fixed", static: false, private: false, access: { has: (obj) => "fixed" in obj, get: (obj) => obj.fixed, set: (obj, value) => {
      obj.fixed = value;
    } }, metadata: _metadata }, _fixed_initializers, _fixed_extraInitializers);
    __esDecorate(null, null, _anchorCorner_decorators, { kind: "field", name: "anchorCorner", static: false, private: false, access: { has: (obj) => "anchorCorner" in obj, get: (obj) => obj.anchorCorner, set: (obj, value) => {
      obj.anchorCorner = value;
    } }, metadata: _metadata }, _anchorCorner_initializers, _anchorCorner_extraInitializers);
    __esDecorate(null, null, _anchorMargin_decorators, { kind: "field", name: "anchorMargin", static: false, private: false, access: { has: (obj) => "anchorMargin" in obj, get: (obj) => obj.anchorMargin, set: (obj, value) => {
      obj.anchorMargin = value;
    } }, metadata: _metadata }, _anchorMargin_initializers, _anchorMargin_extraInitializers);
    __esDecorate(null, null, _quickOpen_decorators, { kind: "field", name: "quickOpen", static: false, private: false, access: { has: (obj) => "quickOpen" in obj, get: (obj) => obj.quickOpen, set: (obj, value) => {
      obj.quickOpen = value;
    } }, metadata: _metadata }, _quickOpen_initializers, _quickOpen_extraInitializers);
    __esDecorate(null, null, _fullWidth_decorators, { kind: "field", name: "fullWidth", static: false, private: false, access: { has: (obj) => "fullWidth" in obj, get: (obj) => obj.fullWidth, set: (obj, value) => {
      obj.fullWidth = value;
    } }, metadata: _metadata }, _fullWidth_initializers, _fullWidth_extraInitializers);
    __esDecorate(null, null, _stayOpen_decorators, { kind: "field", name: "stayOpen", static: false, private: false, access: { has: (obj) => "stayOpen" in obj, get: (obj) => obj.stayOpen, set: (obj, value) => {
      obj.stayOpen = value;
    } }, metadata: _metadata }, _stayOpen_initializers, _stayOpen_extraInitializers);
    __esDecorate(null, null, _maxHeight_decorators, { kind: "field", name: "maxHeight", static: false, private: false, access: { has: (obj) => "maxHeight" in obj, get: (obj) => obj.maxHeight, set: (obj, value) => {
      obj.maxHeight = value;
    } }, metadata: _metadata }, _maxHeight_initializers, _maxHeight_extraInitializers);
    __esDecorate(null, null, _horizontallyCenteredOnViewport_decorators, { kind: "field", name: "horizontallyCenteredOnViewport", static: false, private: false, access: { has: (obj) => "horizontallyCenteredOnViewport" in obj, get: (obj) => obj.horizontallyCenteredOnViewport, set: (obj, value) => {
      obj.horizontallyCenteredOnViewport = value;
    } }, metadata: _metadata }, _horizontallyCenteredOnViewport_initializers, _horizontallyCenteredOnViewport_extraInitializers);
    __esDecorate(null, null, _openBottomBias_decorators, { kind: "field", name: "openBottomBias", static: false, private: false, access: { has: (obj) => "openBottomBias" in obj, get: (obj) => obj.openBottomBias, set: (obj, value) => {
      obj.openBottomBias = value;
    } }, metadata: _metadata }, _openBottomBias_initializers, _openBottomBias_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcMenuSurface2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcMenuSurface2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu-surface/dist/mdc-menu-surface-anchor.js
var import_dist1534 = __toESM(require_dist());
var import_dist1535 = __toESM(require_dist2());
var import_dist1536 = __toESM(require_dist3());
var MdcMenuSurfaceAnchor = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-menu-surface-anchor")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcMenuSurfaceAnchor2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add(cssClasses20.ANCHOR);
    }
  };
  __setFunctionName(_classThis, "MdcMenuSurfaceAnchor");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcMenuSurfaceAnchor2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcMenuSurfaceAnchor2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/menu-surface/dist/index.js
var registered21 = false;
var MenuSurfaceConfiguration = {
  register(container) {
    if (registered21) {
      return container;
    } else {
      registered21 = true;
      return container.register(MdcMenuSurface, MdcMenuSurfaceAnchor);
    }
  }
};

// node_modules/@aurelia-mdc-web/menu/dist/index.js
var registered22 = false;
var MenuConfiguration = {
  register(container) {
    if (registered22) {
      return container;
    } else {
      registered22 = true;
      return container.register(MdcMenu, MdcMenuSelectionGroup, MdcMenuSelectionGroupIcon, ListConfiguration, MenuSurfaceConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/expandable/dist/index.js
var import_dist1567 = __toESM(require_dist());
var import_dist1568 = __toESM(require_dist2());
var import_dist1569 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/dist/mdc-expandable.js
var import_dist1564 = __toESM(require_dist());
var import_dist1565 = __toESM(require_dist2());
var import_dist1566 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1561 = __toESM(require_dist());
var import_dist1562 = __toESM(require_dist2());
var import_dist1563 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1546 = __toESM(require_dist());
var import_dist1547 = __toESM(require_dist2());
var import_dist1548 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1543 = __toESM(require_dist());
var import_dist1544 = __toESM(require_dist2());
var import_dist1545 = __toESM(require_dist3());
function booleanAttr27(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap27 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr27 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr27 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr27 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1549 = __toESM(require_dist());
var import_dist1550 = __toESM(require_dist2());
var import_dist1551 = __toESM(require_dist3());
var MdcPromisifyReference27 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1552 = __toESM(require_dist());
var import_dist1553 = __toESM(require_dist2());
var import_dist1554 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1555 = __toESM(require_dist());
var import_dist1556 = __toESM(require_dist2());
var import_dist1557 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1558 = __toESM(require_dist());
var import_dist1559 = __toESM(require_dist2());
var import_dist1560 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/expandable/dist/mdc-expandable.html?raw
var mdc_expandable_default = `<template
  class="mdc-expandable mdc-expandable--\${open ? 'open' : 'closed'} \${accordion === undefined ? '' : 'mdc-expandable--accordion__' + accordion}">
  <div class="
      mdc-expandable__header
      mdc-expandable__header--\${open ? 'open' : 'closed'}
      \${focused ? 'mdc-expandable__header--focused' : ''}
    " ref="header" click.trigger="toggle()" focus.trigger="handleFocus()" blur.trigger="handleBlur()"
    mdc-ripple="no-class.bind: true;" tabindex="0" keydown.trigger="handleKeydown($event)">
    <div class="mdc-expandable__caption">
      <au-slot name="caption"></au-slot>
    </div>
    <span class="mdc-expandable__dropdown-icon">
      <svg class="mdc-expandable__dropdown-icon-graphic" viewBox="7 10 10 5">
        <polygon class="mdc-expandable__dropdown-icon-inactive" stroke="none" fill-rule="evenodd"
          points="7 10 12 15 17 10">
        </polygon>
        <polygon class="mdc-expandable__dropdown-icon-active" stroke="none" fill-rule="evenodd"
          points="7 15 12 10 17 15">
        </polygon>
      </svg>
    </span>
  </div>
  <div class="mdc-expandable__content-container" ref="contentContainer">
    <div class="mdc-expandable__content" ref="content">
      <au-slot></au-slot>
    </div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/expandable/dist/mdc-expandable.js
var OPEN_CHANGED_EVENT = "mdcexpandable:open-changed";
var ENTER3 = 13;
var SPACE3 = 32;
var MdcExpandable = (() => {
  let _classDecorators = [inject(Element, IPlatform), customElement({ name: "mdc-expandable", template: mdc_expandable_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _open_decorators;
  let _open_initializers = [];
  let _open_extraInitializers = [];
  let _accordion_decorators;
  let _accordion_initializers = [];
  let _accordion_extraInitializers = [];
  var MdcExpandable2 = _classThis = class {
    constructor(element, platform) {
      this.element = element;
      this.platform = platform;
      this.header = void 0;
      this.content = void 0;
      this.contentContainer = void 0;
      this.open = __runInitializers(this, _open_initializers, void 0);
      this.accordion = (__runInitializers(this, _open_extraInitializers), __runInitializers(this, _accordion_initializers, void 0));
      __runInitializers(this, _accordion_extraInitializers);
      this.element = element;
      this.platform = platform;
    }
    openChanged() {
      this.updateContainerHeight();
      this.element.dispatchEvent(new CustomEvent(OPEN_CHANGED_EVENT, { detail: { component: this, open: this.open } }));
    }
    handleEvent(e) {
      switch (e.type) {
        case "transitionend":
          this.setContentContainerHeightToAuto();
          break;
      }
    }
    setContentContainerHeightToAuto() {
      this.contentContainer.style.overflow = "visible";
      this.contentContainer.style.height = "auto";
      this.contentContainer.removeEventListener("transitionend", this);
    }
    attached() {
      this.openChanged();
    }
    updateContainerHeight() {
      if (this.open) {
        this.contentContainer.addEventListener("transitionend", this);
        this.contentContainer.style.height = `${this.content.clientHeight}px`;
      } else {
        this.contentContainer.style.height = `${this.content.clientHeight}px`;
        this.platform.taskQueue.queueTask(() => {
          this.contentContainer.style.overflow = "hidden";
          this.contentContainer.style.height = "0";
        });
      }
    }
    /** Toggles the expandable open and closed */
    toggle() {
      if (!this.open && this.accordion !== void 0) {
        const otherAccordions = Array.from(this.element.parentElement.querySelectorAll(`.mdc-expandable--accordion__${this.accordion}.mdc-expandable--open`));
        otherAccordions.filter((x) => x !== this.element).map((x) => CustomElement.for(x).viewModel).forEach((x) => x.toggle());
      }
      this.open = !this.open;
    }
    handleFocus() {
      this.focused = true;
    }
    handleBlur() {
      this.focused = false;
    }
    handleKeydown(evt) {
      if (evt.keyCode === ENTER3 || evt.keyCode === SPACE3) {
        this.toggle();
      }
      return true;
    }
  };
  __setFunctionName(_classThis, "MdcExpandable");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _open_decorators = [bindable({ set: booleanAttr27 })];
    _accordion_decorators = [bindable()];
    __esDecorate(null, null, _open_decorators, { kind: "field", name: "open", static: false, private: false, access: { has: (obj) => "open" in obj, get: (obj) => obj.open, set: (obj, value) => {
      obj.open = value;
    } }, metadata: _metadata }, _open_initializers, _open_extraInitializers);
    __esDecorate(null, null, _accordion_decorators, { kind: "field", name: "accordion", static: false, private: false, access: { has: (obj) => "accordion" in obj, get: (obj) => obj.accordion, set: (obj, value) => {
      obj.accordion = value;
    } }, metadata: _metadata }, _accordion_initializers, _accordion_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcExpandable2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcExpandable2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/expandable/dist/index.js
var registered23 = false;
var ExpandableConfiguration = {
  register(container) {
    if (registered23) {
      return container;
    } else {
      registered23 = true;
      return container.register(MdcExpandable, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/elevation/dist/index.js
var import_dist1573 = __toESM(require_dist());
var import_dist1574 = __toESM(require_dist2());
var import_dist1575 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/elevation/dist/mdc-elevation.js
var import_dist1570 = __toESM(require_dist());
var import_dist1571 = __toESM(require_dist2());
var import_dist1572 = __toESM(require_dist3());
var MdcElevation = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-elevation")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcElevation2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    valueChanged(newValue, oldValue) {
      if (oldValue) {
        this.root.classList.add(`mdc-elevation--z${oldValue}`);
      } else {
        this.root.classList.add(`mdc-elevation--z${newValue}`);
      }
    }
    attached() {
      this.valueChanged(this.value, void 0);
    }
  };
  __setFunctionName(_classThis, "MdcElevation");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcElevation2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcElevation2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/elevation/dist/index.js
var registered24 = false;
var ElevationConfiguration = {
  register(container) {
    if (registered24) {
      return container;
    } else {
      registered24 = true;
      return container.register(MdcElevation);
    }
  }
};

// node_modules/@aurelia-mdc-web/fab/dist/index.js
var import_dist1606 = __toESM(require_dist());
var import_dist1607 = __toESM(require_dist2());
var import_dist1608 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/dist/mdc-fab.js
var import_dist1597 = __toESM(require_dist());
var import_dist1598 = __toESM(require_dist2());
var import_dist1599 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1594 = __toESM(require_dist());
var import_dist1595 = __toESM(require_dist2());
var import_dist1596 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1579 = __toESM(require_dist());
var import_dist1580 = __toESM(require_dist2());
var import_dist1581 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1576 = __toESM(require_dist());
var import_dist1577 = __toESM(require_dist2());
var import_dist1578 = __toESM(require_dist3());
function booleanAttr28(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap28 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr28 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr28 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr28 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1582 = __toESM(require_dist());
var import_dist1583 = __toESM(require_dist2());
var import_dist1584 = __toESM(require_dist3());
var MdcPromisifyReference28 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1585 = __toESM(require_dist());
var import_dist1586 = __toESM(require_dist2());
var import_dist1587 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1588 = __toESM(require_dist());
var import_dist1589 = __toESM(require_dist2());
var import_dist1590 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1591 = __toESM(require_dist());
var import_dist1592 = __toESM(require_dist2());
var import_dist1593 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/fab/dist/mdc-fab.html?raw
var mdc_fab_default = `<template class="
    mdc-fab
    \${mini ? 'mdc-fab--mini' : ''}
    \${extended ? 'mdc-fab--extended' : ''}
    \${exited ? 'mdc-fab--exited' : ''}
    \${touch ? 'mdc-fab--touch' : ''}
  " tabindex.bind="disabled ? -1 : 0" mdc-ripple="no-class.bind: true;">
  <div class="mdc-fab__ripple"></div>
  <au-slot></au-slot>
  <span class="material-icons mdc-fab__icon" if.bind="icon">\${icon}</span>
  <span class="mdc-fab__label" if.bind="label">\${label}</span>
  <div class="mdc-fab__touch" if.bind="touch"></div>
</template>
`;

// node_modules/@aurelia-mdc-web/fab/dist/mdc-fab.js
var MdcFab = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-fab", template: mdc_fab_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _mini_decorators;
  let _mini_initializers = [];
  let _mini_extraInitializers = [];
  let _extended_decorators;
  let _extended_initializers = [];
  let _extended_extraInitializers = [];
  let _touch_decorators;
  let _touch_initializers = [];
  let _touch_extraInitializers = [];
  let _exited_decorators;
  let _exited_initializers = [];
  let _exited_extraInitializers = [];
  let _icon_decorators;
  let _icon_initializers = [];
  let _icon_extraInitializers = [];
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  var MdcFab2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.mini = __runInitializers(this, _mini_initializers, void 0);
      this.extended = (__runInitializers(this, _mini_extraInitializers), __runInitializers(this, _extended_initializers, void 0));
      this.touch = (__runInitializers(this, _extended_extraInitializers), __runInitializers(this, _touch_initializers, void 0));
      this.exited = (__runInitializers(this, _touch_extraInitializers), __runInitializers(this, _exited_initializers, void 0));
      this.icon = (__runInitializers(this, _exited_extraInitializers), __runInitializers(this, _icon_initializers, void 0));
      this.label = (__runInitializers(this, _icon_extraInitializers), __runInitializers(this, _label_initializers, void 0));
      this.disabled = (__runInitializers(this, _label_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      __runInitializers(this, _disabled_extraInitializers);
      this.root = root;
    }
    disabledChanged() {
      if (this.disabled) {
        this.root.setAttribute("disabled", "");
      } else {
        this.root.removeAttribute("disabled");
      }
    }
  };
  __setFunctionName(_classThis, "MdcFab");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _mini_decorators = [bindable({ set: booleanAttr28 })];
    _extended_decorators = [bindable({ set: booleanAttr28 })];
    _touch_decorators = [bindable({ set: booleanAttr28 })];
    _exited_decorators = [bindable({ set: booleanAttr28 })];
    _icon_decorators = [bindable()];
    _label_decorators = [bindable()];
    _disabled_decorators = [bindable({ set: booleanAttr28 })];
    __esDecorate(null, null, _mini_decorators, { kind: "field", name: "mini", static: false, private: false, access: { has: (obj) => "mini" in obj, get: (obj) => obj.mini, set: (obj, value) => {
      obj.mini = value;
    } }, metadata: _metadata }, _mini_initializers, _mini_extraInitializers);
    __esDecorate(null, null, _extended_decorators, { kind: "field", name: "extended", static: false, private: false, access: { has: (obj) => "extended" in obj, get: (obj) => obj.extended, set: (obj, value) => {
      obj.extended = value;
    } }, metadata: _metadata }, _extended_initializers, _extended_extraInitializers);
    __esDecorate(null, null, _touch_decorators, { kind: "field", name: "touch", static: false, private: false, access: { has: (obj) => "touch" in obj, get: (obj) => obj.touch, set: (obj, value) => {
      obj.touch = value;
    } }, metadata: _metadata }, _touch_initializers, _touch_extraInitializers);
    __esDecorate(null, null, _exited_decorators, { kind: "field", name: "exited", static: false, private: false, access: { has: (obj) => "exited" in obj, get: (obj) => obj.exited, set: (obj, value) => {
      obj.exited = value;
    } }, metadata: _metadata }, _exited_initializers, _exited_extraInitializers);
    __esDecorate(null, null, _icon_decorators, { kind: "field", name: "icon", static: false, private: false, access: { has: (obj) => "icon" in obj, get: (obj) => obj.icon, set: (obj, value) => {
      obj.icon = value;
    } }, metadata: _metadata }, _icon_initializers, _icon_extraInitializers);
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFab2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFab2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/fab/dist/mdc-fab-icon.js
var import_dist1600 = __toESM(require_dist());
var import_dist1601 = __toESM(require_dist2());
var import_dist1602 = __toESM(require_dist3());
var MdcFabIcon = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-fab-icon")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcFabIcon2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-fab__icon");
    }
  };
  __setFunctionName(_classThis, "MdcFabIcon");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFabIcon2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFabIcon2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/fab/dist/enhance-mdc-fab.js
var import_dist1603 = __toESM(require_dist());
var import_dist1604 = __toESM(require_dist2());
var import_dist1605 = __toESM(require_dist3());
var EnhanceMdcFab = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcFab2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-fab=""', 'as-element="mdc-fab"');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcFab");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcFab2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcFab2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/fab/dist/index.js
var registered25 = false;
var FabConfiguration = {
  register(container) {
    if (registered25) {
      return container;
    } else {
      registered25 = true;
      return container.register(MdcFab, MdcFabIcon, RippleConfiguration, EnhanceMdcFab);
    }
  }
};

// node_modules/@aurelia-mdc-web/image-list/dist/index.js
var import_dist1636 = __toESM(require_dist());
var import_dist1637 = __toESM(require_dist2());
var import_dist1638 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list.js
var import_dist1630 = __toESM(require_dist());
var import_dist1631 = __toESM(require_dist2());
var import_dist1632 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1627 = __toESM(require_dist());
var import_dist1628 = __toESM(require_dist2());
var import_dist1629 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1612 = __toESM(require_dist());
var import_dist1613 = __toESM(require_dist2());
var import_dist1614 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1609 = __toESM(require_dist());
var import_dist1610 = __toESM(require_dist2());
var import_dist1611 = __toESM(require_dist3());
function number29(a) {
  return Number(a);
}
function booleanAttr29(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap29 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr29 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr29 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr29 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1615 = __toESM(require_dist());
var import_dist1616 = __toESM(require_dist2());
var import_dist1617 = __toESM(require_dist3());
var MdcPromisifyReference29 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1618 = __toESM(require_dist());
var import_dist1619 = __toESM(require_dist2());
var import_dist1620 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1621 = __toESM(require_dist());
var import_dist1622 = __toESM(require_dist2());
var import_dist1623 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1624 = __toESM(require_dist());
var import_dist1625 = __toESM(require_dist2());
var import_dist1626 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list.html?raw
var mdc_image_list_default = `<template class="mdc-image-list
  \${masonry ? 'mdc-image-list--masonry' : ''}
  \${textProtection ? 'mdc-image-list--with-text-protection' : ''}
  \${columns ? 'mdc-image-list--columns-set' : ''}">
  <style ref="style"></style>
  <au-slot></au-slot>
</template>
`;

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list.js
var id3 = 0;
var MdcImageList = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-image-list", template: mdc_image_list_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _masonry_decorators;
  let _masonry_initializers = [];
  let _masonry_extraInitializers = [];
  let _textProtection_decorators;
  let _textProtection_initializers = [];
  let _textProtection_extraInitializers = [];
  let _columns_decorators;
  let _columns_initializers = [];
  let _columns_extraInitializers = [];
  var MdcImageList2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.id = `mdc-image-list-${++id3}`;
      this.masonry = __runInitializers(this, _masonry_initializers, void 0);
      this.textProtection = (__runInitializers(this, _masonry_extraInitializers), __runInitializers(this, _textProtection_initializers, void 0));
      this.columns = (__runInitializers(this, _textProtection_extraInitializers), __runInitializers(this, _columns_initializers, void 0));
      __runInitializers(this, _columns_extraInitializers);
      this.root = root;
      this.root.setAttribute("id", this.id);
    }
    columnsChanged() {
      if (!this.columns) {
        return;
      }
      const columns = typeof this.columns === "string" ? [{ count: parseInt(this.columns) }] : this.columns;
      if (this.masonry) {
        this.style.innerHTML = columns.filter((x) => x.count).reduce((p, c) => {
          p += `${c.media ? `@media (${c.media}) {` : ""}
  #${this.id} {
    column-count: ${c.count};
    column-gap: ${c.gutterSize ?? 4}px;
  }

  #${this.id} .mdc-image-list__item {
    margin-bottom: ${c.gutterSize ?? 4}px;
  }
${c.media ? "}" : ""}`;
          return p;
        }, "");
      } else {
        this.style.innerHTML = columns.filter((x) => x.count).reduce((p, c) => {
          p += `${c.media ? `@media (${c.media}) {` : ""}
  #${this.id} .mdc-image-list__item {
    width: calc(100% / ${c.count} - ${(c.gutterSize ?? 4) + 1 / c.count}px);
    margin: ${c.gutterSize ?? 4 / 2}px;
  }
${c.media ? "}" : ""}`;
          return p;
        }, "");
      }
    }
    bound() {
      this.columnsChanged();
    }
  };
  __setFunctionName(_classThis, "MdcImageList");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _masonry_decorators = [bindable({ set: booleanAttr29 })];
    _textProtection_decorators = [bindable({ set: booleanAttr29 })];
    _columns_decorators = [bindable()];
    __esDecorate(null, null, _masonry_decorators, { kind: "field", name: "masonry", static: false, private: false, access: { has: (obj) => "masonry" in obj, get: (obj) => obj.masonry, set: (obj, value) => {
      obj.masonry = value;
    } }, metadata: _metadata }, _masonry_initializers, _masonry_extraInitializers);
    __esDecorate(null, null, _textProtection_decorators, { kind: "field", name: "textProtection", static: false, private: false, access: { has: (obj) => "textProtection" in obj, get: (obj) => obj.textProtection, set: (obj, value) => {
      obj.textProtection = value;
    } }, metadata: _metadata }, _textProtection_initializers, _textProtection_extraInitializers);
    __esDecorate(null, null, _columns_decorators, { kind: "field", name: "columns", static: false, private: false, access: { has: (obj) => "columns" in obj, get: (obj) => obj.columns, set: (obj, value) => {
      obj.columns = value;
    } }, metadata: _metadata }, _columns_initializers, _columns_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcImageList2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcImageList2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list-item/mdc-image-list-item.js
var import_dist1633 = __toESM(require_dist());
var import_dist1634 = __toESM(require_dist2());
var import_dist1635 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list-item/mdc-image-list-item.html?raw
var mdc_image_list_item_default = '<template class="mdc-image-list__item">\n  <div class="mdc-image-list__image-aspect-container" if.bind="hasAspect">\n    <img class="mdc-image-list__image" src.bind="src">\n  </div>\n  <img class="mdc-image-list__image" src.bind="src" if.bind="!hasAspect">\n  <div class="mdc-image-list__supporting" if.bind="label">\n    <span class="mdc-image-list__label">${label}</span>\n  </div>\n</template>\n';

// node_modules/@aurelia-mdc-web/image-list/dist/mdc-image-list-item/mdc-image-list-item.js
var MdcImageListItem = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-image-list-item", template: mdc_image_list_item_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _src_decorators;
  let _src_initializers = [];
  let _src_extraInitializers = [];
  let _label_decorators;
  let _label_initializers = [];
  let _label_extraInitializers = [];
  let _aspect_decorators;
  let _aspect_initializers = [];
  let _aspect_extraInitializers = [];
  var MdcImageListItem2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.src = __runInitializers(this, _src_initializers, void 0);
      this.label = (__runInitializers(this, _src_extraInitializers), __runInitializers(this, _label_initializers, void 0));
      this.hasAspect = __runInitializers(this, _label_extraInitializers);
      this.aspect = __runInitializers(this, _aspect_initializers, void 0);
      __runInitializers(this, _aspect_extraInitializers);
      this.root = root;
    }
    aspectChanged() {
      this.hasAspect = !isNaN(this.aspect);
      this.root.style.setProperty("--mdc-image-list-item-aspect", isNaN(this.aspect) ? "1" : `${this.aspect}`);
    }
  };
  __setFunctionName(_classThis, "MdcImageListItem");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _src_decorators = [bindable()];
    _label_decorators = [bindable()];
    _aspect_decorators = [bindable({ set: number29 })];
    __esDecorate(null, null, _src_decorators, { kind: "field", name: "src", static: false, private: false, access: { has: (obj) => "src" in obj, get: (obj) => obj.src, set: (obj, value) => {
      obj.src = value;
    } }, metadata: _metadata }, _src_initializers, _src_extraInitializers);
    __esDecorate(null, null, _label_decorators, { kind: "field", name: "label", static: false, private: false, access: { has: (obj) => "label" in obj, get: (obj) => obj.label, set: (obj, value) => {
      obj.label = value;
    } }, metadata: _metadata }, _label_initializers, _label_extraInitializers);
    __esDecorate(null, null, _aspect_decorators, { kind: "field", name: "aspect", static: false, private: false, access: { has: (obj) => "aspect" in obj, get: (obj) => obj.aspect, set: (obj, value) => {
      obj.aspect = value;
    } }, metadata: _metadata }, _aspect_initializers, _aspect_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcImageListItem2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcImageListItem2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/image-list/dist/index.js
var registered26 = false;
var ImageListConfiguration = {
  register(container) {
    if (registered26) {
      return container;
    } else {
      registered26 = true;
      return container.register(MdcImageList, MdcImageListItem);
    }
  }
};

// node_modules/@aurelia-mdc-web/layout-grid/dist/index.js
var import_dist1669 = __toESM(require_dist());
var import_dist1670 = __toESM(require_dist2());
var import_dist1671 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid-inner.js
var import_dist1639 = __toESM(require_dist());
var import_dist1640 = __toESM(require_dist2());
var import_dist1641 = __toESM(require_dist3());
var MdcLayoutGridInner = (() => {
  let _classDecorators = [customElement({ name: "mdc-layout-grid-inner", template: '<template class="mdc-layout-grid__inner"><au-slot></au-slot></template>' })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcLayoutGridInner2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcLayoutGridInner");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLayoutGridInner2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLayoutGridInner2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid-cell/mdc-layout-grid-cell.js
var import_dist1663 = __toESM(require_dist());
var import_dist1664 = __toESM(require_dist2());
var import_dist1665 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1660 = __toESM(require_dist());
var import_dist1661 = __toESM(require_dist2());
var import_dist1662 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1645 = __toESM(require_dist());
var import_dist1646 = __toESM(require_dist2());
var import_dist1647 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1642 = __toESM(require_dist());
var import_dist1643 = __toESM(require_dist2());
var import_dist1644 = __toESM(require_dist3());
function number30(a) {
  return Number(a);
}
function booleanAttr30(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap30 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr30 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr30 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr30 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1648 = __toESM(require_dist());
var import_dist1649 = __toESM(require_dist2());
var import_dist1650 = __toESM(require_dist3());
var MdcPromisifyReference30 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1651 = __toESM(require_dist());
var import_dist1652 = __toESM(require_dist2());
var import_dist1653 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1654 = __toESM(require_dist());
var import_dist1655 = __toESM(require_dist2());
var import_dist1656 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1657 = __toESM(require_dist());
var import_dist1658 = __toESM(require_dist2());
var import_dist1659 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid-cell/mdc-layout-grid-cell.html?raw
var mdc_layout_grid_cell_default = "<template class=\"\n  mdc-layout-grid__cell\n  ${order ? 'mdc-layout-grid__cell--order-' + order : ''}\n  ${position ? 'mdc-layout-grid__cell--align-' + position : ''}\n  ${span ? 'mdc-layout-grid__cell--span-' + span : ''}\n  ${desktopSpan ? 'mdc-layout-grid__cell--span-' + desktopSpan + '-desktop' : ''}\n  ${tabletSpan ? 'mdc-layout-grid__cell--span-' + tabletSpan + '-tablet' : ''}\n  ${phoneSpan ? 'mdc-layout-grid__cell--span-' + phoneSpan + '-phone' : ''}\n  ${newRow ? 'mdc-layout-grid__cell--new-row' : ''}\n  \">\n  <au-slot></au-slot>\n</template>\n";

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid-cell/mdc-layout-grid-cell.js
var MdcLayoutGridCell = (() => {
  let _classDecorators = [customElement({ name: "mdc-layout-grid-cell", template: mdc_layout_grid_cell_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _order_decorators;
  let _order_initializers = [];
  let _order_extraInitializers = [];
  let _position_decorators;
  let _position_initializers = [];
  let _position_extraInitializers = [];
  let _span_decorators;
  let _span_initializers = [];
  let _span_extraInitializers = [];
  let _desktopSpan_decorators;
  let _desktopSpan_initializers = [];
  let _desktopSpan_extraInitializers = [];
  let _tabletSpan_decorators;
  let _tabletSpan_initializers = [];
  let _tabletSpan_extraInitializers = [];
  let _phoneSpan_decorators;
  let _phoneSpan_initializers = [];
  let _phoneSpan_extraInitializers = [];
  let _newRow_decorators;
  let _newRow_initializers = [];
  let _newRow_extraInitializers = [];
  let _spans_decorators;
  let _spans_initializers = [];
  let _spans_extraInitializers = [];
  var MdcLayoutGridCell2 = _classThis = class {
    spansChanged() {
      [this.phoneSpan, this.tabletSpan, this.desktopSpan] = this.spans.split(" ");
    }
    bound() {
      if (this.spans !== void 0) {
        this.spansChanged();
      }
    }
    constructor() {
      this.order = __runInitializers(this, _order_initializers, void 0);
      this.position = (__runInitializers(this, _order_extraInitializers), __runInitializers(this, _position_initializers, void 0));
      this.span = (__runInitializers(this, _position_extraInitializers), __runInitializers(this, _span_initializers, void 0));
      this.desktopSpan = (__runInitializers(this, _span_extraInitializers), __runInitializers(this, _desktopSpan_initializers, void 0));
      this.tabletSpan = (__runInitializers(this, _desktopSpan_extraInitializers), __runInitializers(this, _tabletSpan_initializers, void 0));
      this.phoneSpan = (__runInitializers(this, _tabletSpan_extraInitializers), __runInitializers(this, _phoneSpan_initializers, void 0));
      this.newRow = (__runInitializers(this, _phoneSpan_extraInitializers), __runInitializers(this, _newRow_initializers, void 0));
      this.spans = (__runInitializers(this, _newRow_extraInitializers), __runInitializers(this, _spans_initializers, void 0));
      __runInitializers(this, _spans_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcLayoutGridCell");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _order_decorators = [bindable()];
    _position_decorators = [bindable()];
    _span_decorators = [bindable()];
    _desktopSpan_decorators = [bindable()];
    _tabletSpan_decorators = [bindable()];
    _phoneSpan_decorators = [bindable()];
    _newRow_decorators = [bindable({ set: booleanAttr30 })];
    _spans_decorators = [bindable()];
    __esDecorate(null, null, _order_decorators, { kind: "field", name: "order", static: false, private: false, access: { has: (obj) => "order" in obj, get: (obj) => obj.order, set: (obj, value) => {
      obj.order = value;
    } }, metadata: _metadata }, _order_initializers, _order_extraInitializers);
    __esDecorate(null, null, _position_decorators, { kind: "field", name: "position", static: false, private: false, access: { has: (obj) => "position" in obj, get: (obj) => obj.position, set: (obj, value) => {
      obj.position = value;
    } }, metadata: _metadata }, _position_initializers, _position_extraInitializers);
    __esDecorate(null, null, _span_decorators, { kind: "field", name: "span", static: false, private: false, access: { has: (obj) => "span" in obj, get: (obj) => obj.span, set: (obj, value) => {
      obj.span = value;
    } }, metadata: _metadata }, _span_initializers, _span_extraInitializers);
    __esDecorate(null, null, _desktopSpan_decorators, { kind: "field", name: "desktopSpan", static: false, private: false, access: { has: (obj) => "desktopSpan" in obj, get: (obj) => obj.desktopSpan, set: (obj, value) => {
      obj.desktopSpan = value;
    } }, metadata: _metadata }, _desktopSpan_initializers, _desktopSpan_extraInitializers);
    __esDecorate(null, null, _tabletSpan_decorators, { kind: "field", name: "tabletSpan", static: false, private: false, access: { has: (obj) => "tabletSpan" in obj, get: (obj) => obj.tabletSpan, set: (obj, value) => {
      obj.tabletSpan = value;
    } }, metadata: _metadata }, _tabletSpan_initializers, _tabletSpan_extraInitializers);
    __esDecorate(null, null, _phoneSpan_decorators, { kind: "field", name: "phoneSpan", static: false, private: false, access: { has: (obj) => "phoneSpan" in obj, get: (obj) => obj.phoneSpan, set: (obj, value) => {
      obj.phoneSpan = value;
    } }, metadata: _metadata }, _phoneSpan_initializers, _phoneSpan_extraInitializers);
    __esDecorate(null, null, _newRow_decorators, { kind: "field", name: "newRow", static: false, private: false, access: { has: (obj) => "newRow" in obj, get: (obj) => obj.newRow, set: (obj, value) => {
      obj.newRow = value;
    } }, metadata: _metadata }, _newRow_initializers, _newRow_extraInitializers);
    __esDecorate(null, null, _spans_decorators, { kind: "field", name: "spans", static: false, private: false, access: { has: (obj) => "spans" in obj, get: (obj) => obj.spans, set: (obj, value) => {
      obj.spans = value;
    } }, metadata: _metadata }, _spans_initializers, _spans_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLayoutGridCell2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLayoutGridCell2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid.js
var import_dist1666 = __toESM(require_dist());
var import_dist1667 = __toESM(require_dist2());
var import_dist1668 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid.html?raw
var mdc_layout_grid_default = "<template class=\"\n  mdc-layout-grid\n  ${position ? 'mdc-layout-grid--align-' + position : ''}\n  ${fixedColumnWidth ? 'mdc-layout-grid--fixed-column-width' : ''}\n  ${noPadding ? 'mdc-layout-grid--no-padding' : ''}\n  \">\n  <au-slot></au-slot>\n</template>\n";

// node_modules/@aurelia-mdc-web/layout-grid/dist/mdc-layout-grid.js
var MdcLayoutGrid = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-layout-grid", template: mdc_layout_grid_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _position_decorators;
  let _position_initializers = [];
  let _position_extraInitializers = [];
  let _fixedColumnWidth_decorators;
  let _fixedColumnWidth_initializers = [];
  let _fixedColumnWidth_extraInitializers = [];
  let _noPadding_decorators;
  let _noPadding_initializers = [];
  let _noPadding_extraInitializers = [];
  let _desktopColumnWidth_decorators;
  let _desktopColumnWidth_initializers = [];
  let _desktopColumnWidth_extraInitializers = [];
  let _tabletColumnWidth_decorators;
  let _tabletColumnWidth_initializers = [];
  let _tabletColumnWidth_extraInitializers = [];
  let _phoneColumnWidth_decorators;
  let _phoneColumnWidth_initializers = [];
  let _phoneColumnWidth_extraInitializers = [];
  let _columnWidths_decorators;
  let _columnWidths_initializers = [];
  let _columnWidths_extraInitializers = [];
  var MdcLayoutGrid2 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.position = __runInitializers(this, _position_initializers, void 0);
      this.fixedColumnWidth = (__runInitializers(this, _position_extraInitializers), __runInitializers(this, _fixedColumnWidth_initializers, void 0));
      this.noPadding = (__runInitializers(this, _fixedColumnWidth_extraInitializers), __runInitializers(this, _noPadding_initializers, void 0));
      this.desktopColumnWidth = (__runInitializers(this, _noPadding_extraInitializers), __runInitializers(this, _desktopColumnWidth_initializers, void 0));
      this.tabletColumnWidth = (__runInitializers(this, _desktopColumnWidth_extraInitializers), __runInitializers(this, _tabletColumnWidth_initializers, void 0));
      this.phoneColumnWidth = (__runInitializers(this, _tabletColumnWidth_extraInitializers), __runInitializers(this, _phoneColumnWidth_initializers, void 0));
      this.columnWidths = (__runInitializers(this, _phoneColumnWidth_extraInitializers), __runInitializers(this, _columnWidths_initializers, void 0));
      __runInitializers(this, _columnWidths_extraInitializers);
      this.root = root;
    }
    desktopColumnWidthChanged() {
      this.root.style.setProperty("--mdc-layout-grid-column-width-desktop", `${this.desktopColumnWidth}px`);
    }
    tabletColumnWidthChanged() {
      this.root.style.setProperty("--mdc-layout-grid-column-width-tablet", `${this.tabletColumnWidth}px`);
    }
    phoneColumnWidthChanged() {
      this.root.style.setProperty("--mdc-layout-grid-column-width-phone", `${this.phoneColumnWidth}px`);
    }
    columnWidthsChanged() {
      [this.phoneColumnWidth, this.tabletColumnWidth, this.desktopColumnWidth] = this.columnWidths.split(" ");
    }
    bound() {
      if (this.columnWidths !== void 0) {
        this.columnWidthsChanged();
      }
      if (this.phoneColumnWidth !== void 0) {
        this.phoneColumnWidthChanged();
      }
      if (this.tabletColumnWidth !== void 0) {
        this.tabletColumnWidthChanged();
      }
      if (this.desktopColumnWidth !== void 0) {
        this.desktopColumnWidthChanged();
      }
    }
  };
  __setFunctionName(_classThis, "MdcLayoutGrid");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _position_decorators = [bindable()];
    _fixedColumnWidth_decorators = [bindable({ set: booleanAttr30 })];
    _noPadding_decorators = [bindable({ set: booleanAttr30 })];
    _desktopColumnWidth_decorators = [bindable({ set: number30 })];
    _tabletColumnWidth_decorators = [bindable({ set: number30 })];
    _phoneColumnWidth_decorators = [bindable({ set: number30 })];
    _columnWidths_decorators = [bindable({ set: number30 })];
    __esDecorate(null, null, _position_decorators, { kind: "field", name: "position", static: false, private: false, access: { has: (obj) => "position" in obj, get: (obj) => obj.position, set: (obj, value) => {
      obj.position = value;
    } }, metadata: _metadata }, _position_initializers, _position_extraInitializers);
    __esDecorate(null, null, _fixedColumnWidth_decorators, { kind: "field", name: "fixedColumnWidth", static: false, private: false, access: { has: (obj) => "fixedColumnWidth" in obj, get: (obj) => obj.fixedColumnWidth, set: (obj, value) => {
      obj.fixedColumnWidth = value;
    } }, metadata: _metadata }, _fixedColumnWidth_initializers, _fixedColumnWidth_extraInitializers);
    __esDecorate(null, null, _noPadding_decorators, { kind: "field", name: "noPadding", static: false, private: false, access: { has: (obj) => "noPadding" in obj, get: (obj) => obj.noPadding, set: (obj, value) => {
      obj.noPadding = value;
    } }, metadata: _metadata }, _noPadding_initializers, _noPadding_extraInitializers);
    __esDecorate(null, null, _desktopColumnWidth_decorators, { kind: "field", name: "desktopColumnWidth", static: false, private: false, access: { has: (obj) => "desktopColumnWidth" in obj, get: (obj) => obj.desktopColumnWidth, set: (obj, value) => {
      obj.desktopColumnWidth = value;
    } }, metadata: _metadata }, _desktopColumnWidth_initializers, _desktopColumnWidth_extraInitializers);
    __esDecorate(null, null, _tabletColumnWidth_decorators, { kind: "field", name: "tabletColumnWidth", static: false, private: false, access: { has: (obj) => "tabletColumnWidth" in obj, get: (obj) => obj.tabletColumnWidth, set: (obj, value) => {
      obj.tabletColumnWidth = value;
    } }, metadata: _metadata }, _tabletColumnWidth_initializers, _tabletColumnWidth_extraInitializers);
    __esDecorate(null, null, _phoneColumnWidth_decorators, { kind: "field", name: "phoneColumnWidth", static: false, private: false, access: { has: (obj) => "phoneColumnWidth" in obj, get: (obj) => obj.phoneColumnWidth, set: (obj, value) => {
      obj.phoneColumnWidth = value;
    } }, metadata: _metadata }, _phoneColumnWidth_initializers, _phoneColumnWidth_extraInitializers);
    __esDecorate(null, null, _columnWidths_decorators, { kind: "field", name: "columnWidths", static: false, private: false, access: { has: (obj) => "columnWidths" in obj, get: (obj) => obj.columnWidths, set: (obj, value) => {
      obj.columnWidths = value;
    } }, metadata: _metadata }, _columnWidths_initializers, _columnWidths_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLayoutGrid2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLayoutGrid2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/layout-grid/dist/index.js
var registered27 = false;
var LayoutGridConfiguration = {
  register(container) {
    if (registered27) {
      return container;
    } else {
      registered27 = true;
      return container.register(MdcLayoutGrid, MdcLayoutGridInner, MdcLayoutGridCell);
    }
  }
};

// node_modules/@aurelia-mdc-web/linear-progress/dist/index.js
var import_dist1705 = __toESM(require_dist());
var import_dist1706 = __toESM(require_dist2());
var import_dist1707 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/dist/mdc-linear-progress.js
var import_dist1702 = __toESM(require_dist());
var import_dist1703 = __toESM(require_dist2());
var import_dist1704 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1690 = __toESM(require_dist());
var import_dist1691 = __toESM(require_dist2());
var import_dist1692 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1675 = __toESM(require_dist());
var import_dist1676 = __toESM(require_dist2());
var import_dist1677 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1672 = __toESM(require_dist());
var import_dist1673 = __toESM(require_dist2());
var import_dist1674 = __toESM(require_dist3());
function number31(a) {
  return Number(a);
}
function booleanAttr31(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap31 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr31 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr31 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr31 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1678 = __toESM(require_dist());
var import_dist1679 = __toESM(require_dist2());
var import_dist1680 = __toESM(require_dist3());
var MdcPromisifyReference31 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1681 = __toESM(require_dist());
var import_dist1682 = __toESM(require_dist2());
var import_dist1683 = __toESM(require_dist3());
var MdcComponent31 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1684 = __toESM(require_dist());
var import_dist1685 = __toESM(require_dist2());
var import_dist1686 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1687 = __toESM(require_dist());
var import_dist1688 = __toESM(require_dist2());
var import_dist1689 = __toESM(require_dist3());

// node_modules/@material/linear-progress/index.js
var import_dist1699 = __toESM(require_dist());
var import_dist1700 = __toESM(require_dist2());
var import_dist1701 = __toESM(require_dist3());

// node_modules/@material/linear-progress/adapter.js
var import_dist1693 = __toESM(require_dist());
var import_dist1694 = __toESM(require_dist2());
var import_dist1695 = __toESM(require_dist3());

// node_modules/@material/linear-progress/types.js
var import_dist1696 = __toESM(require_dist());
var import_dist1697 = __toESM(require_dist2());
var import_dist1698 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/linear-progress/dist/mdc-linear-progress.html?raw
var mdc_linear_progress_default = '<template role="progressbar" class="mdc-linear-progress" style="display: block">\n  <div class="mdc-linear-progress__buffer">\n    <div class="mdc-linear-progress__buffer-bar"></div>\n    <div class="mdc-linear-progress__buffer-dots"></div>\n  </div>\n  <div class="mdc-linear-progress__bar mdc-linear-progress__primary-bar">\n    <span class="mdc-linear-progress__bar-inner"></span>\n  </div>\n  <div class="mdc-linear-progress__bar mdc-linear-progress__secondary-bar">\n    <span class="mdc-linear-progress__bar-inner"></span>\n  </div>\n</template>\n';

// node_modules/@aurelia-mdc-web/linear-progress/dist/mdc-linear-progress.js
var MdcLinearProgress = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-linear-progress", template: mdc_linear_progress_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent31;
  let _progress_decorators;
  let _progress_initializers = [];
  let _progress_extraInitializers = [];
  let _buffer_decorators;
  let _buffer_initializers = [];
  let _buffer_extraInitializers = [];
  let _open_decorators;
  let _open_initializers = [];
  let _open_extraInitializers = [];
  var MdcLinearProgress2 = _classThis = class extends _classSuper {
    progressChanged() {
      var _a2, _b;
      const determinate = this.progress !== void 0 && !isNaN(this.progress);
      (_a2 = this.foundation) == null ? void 0 : _a2.setDeterminate(determinate);
      if (determinate) {
        (_b = this.foundation) == null ? void 0 : _b.setProgress(this.progress);
      }
    }
    bufferChanged() {
      var _a2;
      if (this.buffer !== void 0 && !isNaN(this.buffer)) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setBuffer(this.buffer);
      }
    }
    openChanged() {
      var _a2, _b;
      if (this.open) {
        (_a2 = this.foundation) == null ? void 0 : _a2.open();
      } else {
        (_b = this.foundation) == null ? void 0 : _b.close();
      }
    }
    initialSyncWithDOM() {
      this.progressChanged();
      if (this.open !== void 0) {
        this.openChanged();
      }
      this.bufferChanged();
    }
    getDefaultFoundation() {
      const adapter = {
        addClass: (className) => {
          this.root.classList.add(className);
        },
        forceLayout: () => {
          this.root.getBoundingClientRect();
        },
        setBufferBarStyle: (styleProperty, value) => {
          const bufferBar = this.root.querySelector(MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);
          if (bufferBar) {
            bufferBar.style.setProperty(styleProperty, value);
          }
        },
        setPrimaryBarStyle: (styleProperty, value) => {
          const primaryBar = this.root.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);
          if (primaryBar) {
            primaryBar.style.setProperty(styleProperty, value);
          }
        },
        hasClass: (className) => this.root.classList.contains(className),
        removeAttribute: (attributeName) => {
          this.root.removeAttribute(attributeName);
        },
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        setAttribute: (attributeName, value) => {
          this.root.setAttribute(attributeName, value);
        },
        setStyle: (name, value) => {
          this.root.style.setProperty(name, value);
        },
        attachResizeObserver: (callback) => {
          const RO = window.ResizeObserver;
          if (RO) {
            const ro = new RO(callback);
            ro.observe(this.root);
            return ro;
          }
          return null;
        },
        getWidth: () => this.root.offsetWidth
      };
      return new MDCLinearProgressFoundation(adapter);
    }
    constructor() {
      super(...arguments);
      this.progress = __runInitializers(this, _progress_initializers, void 0);
      this.buffer = (__runInitializers(this, _progress_extraInitializers), __runInitializers(this, _buffer_initializers, void 0));
      this.open = (__runInitializers(this, _buffer_extraInitializers), __runInitializers(this, _open_initializers, void 0));
      __runInitializers(this, _open_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcLinearProgress");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _progress_decorators = [bindable({ set: number31 })];
    _buffer_decorators = [bindable({ set: number31 })];
    _open_decorators = [bindable({ set: booleanAttr31 })];
    __esDecorate(null, null, _progress_decorators, { kind: "field", name: "progress", static: false, private: false, access: { has: (obj) => "progress" in obj, get: (obj) => obj.progress, set: (obj, value) => {
      obj.progress = value;
    } }, metadata: _metadata }, _progress_initializers, _progress_extraInitializers);
    __esDecorate(null, null, _buffer_decorators, { kind: "field", name: "buffer", static: false, private: false, access: { has: (obj) => "buffer" in obj, get: (obj) => obj.buffer, set: (obj, value) => {
      obj.buffer = value;
    } }, metadata: _metadata }, _buffer_initializers, _buffer_extraInitializers);
    __esDecorate(null, null, _open_decorators, { kind: "field", name: "open", static: false, private: false, access: { has: (obj) => "open" in obj, get: (obj) => obj.open, set: (obj, value) => {
      obj.open = value;
    } }, metadata: _metadata }, _open_initializers, _open_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcLinearProgress2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcLinearProgress2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/linear-progress/dist/index.js
var registered28 = false;
var LinearProgressConfiguration = {
  register(container) {
    if (registered28) {
      return container;
    } else {
      registered28 = true;
      return container.register(MdcLinearProgress);
    }
  }
};

// node_modules/@aurelia-mdc-web/slider/dist/index.js
var import_dist1753 = __toESM(require_dist());
var import_dist1754 = __toESM(require_dist2());
var import_dist1755 = __toESM(require_dist3());

// node_modules/@material/slider/index.js
var import_dist1723 = __toESM(require_dist());
var import_dist1724 = __toESM(require_dist2());
var import_dist1725 = __toESM(require_dist3());

// node_modules/@material/slider/adapter.js
var import_dist1708 = __toESM(require_dist());
var import_dist1709 = __toESM(require_dist2());
var import_dist1710 = __toESM(require_dist3());

// node_modules/@material/slider/component.js
var import_dist1720 = __toESM(require_dist());
var import_dist1721 = __toESM(require_dist2());
var import_dist1722 = __toESM(require_dist3());

// node_modules/@material/slider/constants.js
var import_dist1711 = __toESM(require_dist());
var import_dist1712 = __toESM(require_dist2());
var import_dist1713 = __toESM(require_dist3());
var cssClasses32 = {
  DISABLED: "mdc-slider--disabled",
  DISCRETE: "mdc-slider--discrete",
  INPUT: "mdc-slider__input",
  RANGE: "mdc-slider--range",
  THUMB: "mdc-slider__thumb",
  // Applied when thumb is in the focused state.
  THUMB_FOCUSED: "mdc-slider__thumb--focused",
  THUMB_KNOB: "mdc-slider__thumb-knob",
  // Class added to the top thumb (for overlapping thumbs in range slider).
  THUMB_TOP: "mdc-slider__thumb--top",
  THUMB_WITH_INDICATOR: "mdc-slider__thumb--with-indicator",
  TICK_MARKS: "mdc-slider--tick-marks",
  TICK_MARKS_CONTAINER: "mdc-slider__tick-marks",
  TICK_MARK_ACTIVE: "mdc-slider__tick-mark--active",
  TICK_MARK_INACTIVE: "mdc-slider__tick-mark--inactive",
  TRACK: "mdc-slider__track",
  // The active track fill element that will be scaled as the value changes.
  TRACK_ACTIVE: "mdc-slider__track--active_fill",
  VALUE_INDICATOR_CONTAINER: "mdc-slider__value-indicator-container",
  VALUE_INDICATOR_TEXT: "mdc-slider__value-indicator-text"
};
var numbers12 = {
  // Default step size.
  STEP_SIZE: 1,
  // Default minimum difference between the start and end values.
  MIN_RANGE: 0,
  // Minimum absolute difference between clientX of move event / down event
  // for which to update thumb, in the case of overlapping thumbs.
  // This is needed to reduce chances of choosing the thumb based on
  // pointer jitter.
  THUMB_UPDATE_MIN_PX: 5
};
var attributes3 = {
  ARIA_VALUETEXT: "aria-valuetext",
  INPUT_DISABLED: "disabled",
  INPUT_MIN: "min",
  INPUT_MAX: "max",
  INPUT_VALUE: "value",
  INPUT_STEP: "step",
  DATA_MIN_RANGE: "data-min-range"
};
var events5 = {
  CHANGE: "MDCSlider:change",
  INPUT: "MDCSlider:input"
};
var strings33 = {
  VAR_VALUE_INDICATOR_CARET_LEFT: "--slider-value-indicator-caret-left",
  VAR_VALUE_INDICATOR_CARET_RIGHT: "--slider-value-indicator-caret-right",
  VAR_VALUE_INDICATOR_CARET_TRANSFORM: "--slider-value-indicator-caret-transform",
  VAR_VALUE_INDICATOR_CONTAINER_LEFT: "--slider-value-indicator-container-left",
  VAR_VALUE_INDICATOR_CONTAINER_RIGHT: "--slider-value-indicator-container-right",
  VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM: "--slider-value-indicator-container-transform"
};

// node_modules/@material/slider/foundation.js
var import_dist1717 = __toESM(require_dist());
var import_dist1718 = __toESM(require_dist2());
var import_dist1719 = __toESM(require_dist3());

// node_modules/@material/slider/types.js
var import_dist1714 = __toESM(require_dist());
var import_dist1715 = __toESM(require_dist2());
var import_dist1716 = __toESM(require_dist3());
var TickMark;
(function(TickMark2) {
  TickMark2[TickMark2["ACTIVE"] = 0] = "ACTIVE";
  TickMark2[TickMark2["INACTIVE"] = 1] = "INACTIVE";
})(TickMark || (TickMark = {}));
var Thumb;
(function(Thumb2) {
  Thumb2[Thumb2["START"] = 1] = "START";
  Thumb2[Thumb2["END"] = 2] = "END";
})(Thumb || (Thumb = {}));

// node_modules/@material/slider/foundation.js
var AnimationKeys3;
(function(AnimationKeys5) {
  AnimationKeys5["SLIDER_UPDATE"] = "slider_update";
})(AnimationKeys3 || (AnimationKeys3 = {}));
var HAS_WINDOW = typeof window !== "undefined";
var MDCSliderFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSliderFoundation2, _super);
    function MDCSliderFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCSliderFoundation2.defaultAdapter), adapter)) || this;
      _this.initialStylesRemoved = false;
      _this.isDisabled = false;
      _this.isDiscrete = false;
      _this.step = numbers12.STEP_SIZE;
      _this.minRange = numbers12.MIN_RANGE;
      _this.hasTickMarks = false;
      _this.isRange = false;
      _this.thumb = null;
      _this.downEventClientX = null;
      _this.startThumbKnobWidth = 0;
      _this.endThumbKnobWidth = 0;
      _this.animFrame = new AnimationFrame();
      return _this;
    }
    Object.defineProperty(MDCSliderFoundation2, "defaultAdapter", {
      get: function() {
        return {
          hasClass: function() {
            return false;
          },
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          addThumbClass: function() {
            return void 0;
          },
          removeThumbClass: function() {
            return void 0;
          },
          getAttribute: function() {
            return null;
          },
          getInputValue: function() {
            return "";
          },
          setInputValue: function() {
            return void 0;
          },
          getInputAttribute: function() {
            return null;
          },
          setInputAttribute: function() {
            return null;
          },
          removeInputAttribute: function() {
            return null;
          },
          focusInput: function() {
            return void 0;
          },
          isInputFocused: function() {
            return false;
          },
          shouldHideFocusStylesForPointerEvents: function() {
            return false;
          },
          getThumbKnobWidth: function() {
            return 0;
          },
          getValueIndicatorContainerWidth: function() {
            return 0;
          },
          getThumbBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getBoundingClientRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          isRTL: function() {
            return false;
          },
          setThumbStyleProperty: function() {
            return void 0;
          },
          removeThumbStyleProperty: function() {
            return void 0;
          },
          setTrackActiveStyleProperty: function() {
            return void 0;
          },
          removeTrackActiveStyleProperty: function() {
            return void 0;
          },
          setValueIndicatorText: function() {
            return void 0;
          },
          getValueToAriaValueTextFn: function() {
            return null;
          },
          updateTickMarks: function() {
            return void 0;
          },
          setPointerCapture: function() {
            return void 0;
          },
          emitChangeEvent: function() {
            return void 0;
          },
          emitInputEvent: function() {
            return void 0;
          },
          emitDragStartEvent: function() {
            return void 0;
          },
          emitDragEndEvent: function() {
            return void 0;
          },
          registerEventHandler: function() {
            return void 0;
          },
          deregisterEventHandler: function() {
            return void 0;
          },
          registerThumbEventHandler: function() {
            return void 0;
          },
          deregisterThumbEventHandler: function() {
            return void 0;
          },
          registerInputEventHandler: function() {
            return void 0;
          },
          deregisterInputEventHandler: function() {
            return void 0;
          },
          registerBodyEventHandler: function() {
            return void 0;
          },
          deregisterBodyEventHandler: function() {
            return void 0;
          },
          registerWindowEventHandler: function() {
            return void 0;
          },
          deregisterWindowEventHandler: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSliderFoundation2.prototype.init = function() {
      var _this = this;
      this.isDisabled = this.adapter.hasClass(cssClasses32.DISABLED);
      this.isDiscrete = this.adapter.hasClass(cssClasses32.DISCRETE);
      this.hasTickMarks = this.adapter.hasClass(cssClasses32.TICK_MARKS);
      this.isRange = this.adapter.hasClass(cssClasses32.RANGE);
      var min = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes3.INPUT_MIN, this.isRange ? Thumb.START : Thumb.END), attributes3.INPUT_MIN);
      var max = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes3.INPUT_MAX, Thumb.END), attributes3.INPUT_MAX);
      var value = this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes3.INPUT_VALUE, Thumb.END), attributes3.INPUT_VALUE);
      var valueStart = this.isRange ? this.convertAttributeValueToNumber(this.adapter.getInputAttribute(attributes3.INPUT_VALUE, Thumb.START), attributes3.INPUT_VALUE) : min;
      var stepAttr = this.adapter.getInputAttribute(attributes3.INPUT_STEP, Thumb.END);
      var step = stepAttr ? this.convertAttributeValueToNumber(stepAttr, attributes3.INPUT_STEP) : this.step;
      var minRangeAttr = this.adapter.getAttribute(attributes3.DATA_MIN_RANGE);
      var minRange = minRangeAttr ? this.convertAttributeValueToNumber(minRangeAttr, attributes3.DATA_MIN_RANGE) : this.minRange;
      this.validateProperties({ min, max, value, valueStart, step, minRange });
      this.min = min;
      this.max = max;
      this.value = value;
      this.valueStart = valueStart;
      this.step = step;
      this.minRange = minRange;
      this.numDecimalPlaces = getNumDecimalPlaces(this.step);
      this.valueBeforeDownEvent = value;
      this.valueStartBeforeDownEvent = valueStart;
      this.mousedownOrTouchstartListener = this.handleMousedownOrTouchstart.bind(this);
      this.moveListener = this.handleMove.bind(this);
      this.pointerdownListener = this.handlePointerdown.bind(this);
      this.pointerupListener = this.handlePointerup.bind(this);
      this.thumbMouseenterListener = this.handleThumbMouseenter.bind(this);
      this.thumbMouseleaveListener = this.handleThumbMouseleave.bind(this);
      this.inputStartChangeListener = function() {
        _this.handleInputChange(Thumb.START);
      };
      this.inputEndChangeListener = function() {
        _this.handleInputChange(Thumb.END);
      };
      this.inputStartFocusListener = function() {
        _this.handleInputFocus(Thumb.START);
      };
      this.inputEndFocusListener = function() {
        _this.handleInputFocus(Thumb.END);
      };
      this.inputStartBlurListener = function() {
        _this.handleInputBlur(Thumb.START);
      };
      this.inputEndBlurListener = function() {
        _this.handleInputBlur(Thumb.END);
      };
      this.resizeListener = this.handleResize.bind(this);
      this.registerEventHandlers();
    };
    MDCSliderFoundation2.prototype.destroy = function() {
      this.deregisterEventHandlers();
    };
    MDCSliderFoundation2.prototype.setMin = function(value) {
      this.min = value;
      if (!this.isRange) {
        this.valueStart = value;
      }
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMax = function(value) {
      this.max = value;
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.getMin = function() {
      return this.min;
    };
    MDCSliderFoundation2.prototype.getMax = function() {
      return this.max;
    };
    MDCSliderFoundation2.prototype.getValue = function() {
      return this.value;
    };
    MDCSliderFoundation2.prototype.setValue = function(value) {
      if (this.isRange && value < this.valueStart + this.minRange) {
        throw new Error("end thumb value (" + value + ") must be >= start thumb " + ("value (" + this.valueStart + ") + min range (" + this.minRange + ")"));
      }
      this.updateValue(value, Thumb.END);
    };
    MDCSliderFoundation2.prototype.getValueStart = function() {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      return this.valueStart;
    };
    MDCSliderFoundation2.prototype.setValueStart = function(valueStart) {
      if (!this.isRange) {
        throw new Error("`valueStart` is only applicable for range sliders.");
      }
      if (this.isRange && valueStart > this.value - this.minRange) {
        throw new Error("start thumb value (" + valueStart + ") must be <= end thumb " + ("value (" + this.value + ") - min range (" + this.minRange + ")"));
      }
      this.updateValue(valueStart, Thumb.START);
    };
    MDCSliderFoundation2.prototype.setStep = function(value) {
      this.step = value;
      this.numDecimalPlaces = getNumDecimalPlaces(value);
      this.updateUI();
    };
    MDCSliderFoundation2.prototype.setMinRange = function(value) {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      if (value < 0) {
        throw new Error("`minRange` must be non-negative. " + ("Current value: " + value));
      }
      if (this.value - this.valueStart < value) {
        throw new Error("start thumb value (" + this.valueStart + ") and end thumb value " + ("(" + this.value + ") must differ by at least " + value + "."));
      }
      this.minRange = value;
    };
    MDCSliderFoundation2.prototype.setIsDiscrete = function(value) {
      this.isDiscrete = value;
      this.updateValueIndicatorUI();
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getStep = function() {
      return this.step;
    };
    MDCSliderFoundation2.prototype.getMinRange = function() {
      if (!this.isRange) {
        throw new Error("`minRange` is only applicable for range sliders.");
      }
      return this.minRange;
    };
    MDCSliderFoundation2.prototype.setHasTickMarks = function(value) {
      this.hasTickMarks = value;
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.getDisabled = function() {
      return this.isDisabled;
    };
    MDCSliderFoundation2.prototype.setDisabled = function(disabled) {
      this.isDisabled = disabled;
      if (disabled) {
        this.adapter.addClass(cssClasses32.DISABLED);
        if (this.isRange) {
          this.adapter.setInputAttribute(attributes3.INPUT_DISABLED, "", Thumb.START);
        }
        this.adapter.setInputAttribute(attributes3.INPUT_DISABLED, "", Thumb.END);
      } else {
        this.adapter.removeClass(cssClasses32.DISABLED);
        if (this.isRange) {
          this.adapter.removeInputAttribute(attributes3.INPUT_DISABLED, Thumb.START);
        }
        this.adapter.removeInputAttribute(attributes3.INPUT_DISABLED, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.getIsRange = function() {
      return this.isRange;
    };
    MDCSliderFoundation2.prototype.layout = function(_a2) {
      var _b = _a2 === void 0 ? {} : _a2, skipUpdateUI = _b.skipUpdateUI;
      this.rect = this.adapter.getBoundingClientRect();
      if (this.isRange) {
        this.startThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.START);
        this.endThumbKnobWidth = this.adapter.getThumbKnobWidth(Thumb.END);
      }
      if (!skipUpdateUI) {
        this.updateUI();
      }
    };
    MDCSliderFoundation2.prototype.handleResize = function() {
      this.layout();
    };
    MDCSliderFoundation2.prototype.handleDown = function(event) {
      if (this.isDisabled)
        return;
      this.valueStartBeforeDownEvent = this.valueStart;
      this.valueBeforeDownEvent = this.value;
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      this.downEventClientX = clientX;
      var value = this.mapClientXOnSliderScale(clientX);
      this.thumb = this.getThumbFromDownEvent(clientX, value);
      if (this.thumb === null)
        return;
      this.handleDragStart(event, value, this.thumb);
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleMove = function(event) {
      if (this.isDisabled)
        return;
      event.preventDefault();
      var clientX = event.clientX != null ? event.clientX : event.targetTouches[0].clientX;
      var dragAlreadyStarted = this.thumb != null;
      this.thumb = this.getThumbFromMoveEvent(clientX);
      if (this.thumb === null)
        return;
      var value = this.mapClientXOnSliderScale(clientX);
      if (!dragAlreadyStarted) {
        this.handleDragStart(event, value, this.thumb);
        this.adapter.emitDragStartEvent(value, this.thumb);
      }
      this.updateValue(value, this.thumb, { emitInputEvent: true });
    };
    MDCSliderFoundation2.prototype.handleUp = function() {
      var _a2, _b;
      if (this.isDisabled || this.thumb === null)
        return;
      if ((_b = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a2)) {
        this.handleInputBlur(this.thumb);
      }
      var oldValue = this.thumb === Thumb.START ? this.valueStartBeforeDownEvent : this.valueBeforeDownEvent;
      var newValue = this.thumb === Thumb.START ? this.valueStart : this.value;
      if (oldValue !== newValue) {
        this.adapter.emitChangeEvent(newValue, this.thumb);
      }
      this.adapter.emitDragEndEvent(newValue, this.thumb);
      this.thumb = null;
    };
    MDCSliderFoundation2.prototype.handleThumbMouseenter = function() {
      if (!this.isDiscrete || !this.isRange)
        return;
      this.adapter.addThumbClass(cssClasses32.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.addThumbClass(cssClasses32.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleThumbMouseleave = function() {
      var _a2, _b;
      if (!this.isDiscrete || !this.isRange)
        return;
      if (!((_b = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a2)) && (this.adapter.isInputFocused(Thumb.START) || this.adapter.isInputFocused(Thumb.END)) || this.thumb) {
        return;
      }
      this.adapter.removeThumbClass(cssClasses32.THUMB_WITH_INDICATOR, Thumb.START);
      this.adapter.removeThumbClass(cssClasses32.THUMB_WITH_INDICATOR, Thumb.END);
    };
    MDCSliderFoundation2.prototype.handleMousedownOrTouchstart = function(event) {
      var _this = this;
      var moveEventType = event.type === "mousedown" ? "mousemove" : "touchmove";
      this.adapter.registerBodyEventHandler(moveEventType, this.moveListener);
      var upHandler = function() {
        _this.handleUp();
        _this.adapter.deregisterBodyEventHandler(moveEventType, _this.moveListener);
        _this.adapter.deregisterEventHandler("mouseup", upHandler);
        _this.adapter.deregisterEventHandler("touchend", upHandler);
      };
      this.adapter.registerBodyEventHandler("mouseup", upHandler);
      this.adapter.registerBodyEventHandler("touchend", upHandler);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handlePointerdown = function(event) {
      var isPrimaryButton = event.button === 0;
      if (!isPrimaryButton)
        return;
      if (event.pointerId != null) {
        this.adapter.setPointerCapture(event.pointerId);
      }
      this.adapter.registerEventHandler("pointermove", this.moveListener);
      this.handleDown(event);
    };
    MDCSliderFoundation2.prototype.handleInputChange = function(thumb) {
      var value = Number(this.adapter.getInputValue(thumb));
      if (thumb === Thumb.START) {
        this.setValueStart(value);
      } else {
        this.setValue(value);
      }
      this.adapter.emitChangeEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
    };
    MDCSliderFoundation2.prototype.handleInputFocus = function(thumb) {
      this.adapter.addThumbClass(cssClasses32.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.addThumbClass(cssClasses32.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.addThumbClass(cssClasses32.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleInputBlur = function(thumb) {
      this.adapter.removeThumbClass(cssClasses32.THUMB_FOCUSED, thumb);
      if (!this.isDiscrete)
        return;
      this.adapter.removeThumbClass(cssClasses32.THUMB_WITH_INDICATOR, thumb);
      if (this.isRange) {
        var otherThumb = thumb === Thumb.START ? Thumb.END : Thumb.START;
        this.adapter.removeThumbClass(cssClasses32.THUMB_WITH_INDICATOR, otherThumb);
      }
    };
    MDCSliderFoundation2.prototype.handleDragStart = function(event, value, thumb) {
      var _a2, _b;
      this.adapter.emitDragStartEvent(value, thumb);
      this.adapter.focusInput(thumb);
      if ((_b = (_a2 = this.adapter).shouldHideFocusStylesForPointerEvents) === null || _b === void 0 ? void 0 : _b.call(_a2)) {
        this.handleInputFocus(thumb);
      }
      event.preventDefault();
    };
    MDCSliderFoundation2.prototype.getThumbFromDownEvent = function(clientX, value) {
      if (!this.isRange)
        return Thumb.END;
      var thumbStartRect = this.adapter.getThumbBoundingClientRect(Thumb.START);
      var thumbEndRect = this.adapter.getThumbBoundingClientRect(Thumb.END);
      var inThumbStartBounds = clientX >= thumbStartRect.left && clientX <= thumbStartRect.right;
      var inThumbEndBounds = clientX >= thumbEndRect.left && clientX <= thumbEndRect.right;
      if (inThumbStartBounds && inThumbEndBounds) {
        return null;
      }
      if (inThumbStartBounds) {
        return Thumb.START;
      }
      if (inThumbEndBounds) {
        return Thumb.END;
      }
      if (value < this.valueStart) {
        return Thumb.START;
      }
      if (value > this.value) {
        return Thumb.END;
      }
      return value - this.valueStart <= this.value - value ? Thumb.START : Thumb.END;
    };
    MDCSliderFoundation2.prototype.getThumbFromMoveEvent = function(clientX) {
      if (this.thumb !== null)
        return this.thumb;
      if (this.downEventClientX === null) {
        throw new Error("`downEventClientX` is null after move event.");
      }
      var moveDistanceUnderThreshold = Math.abs(this.downEventClientX - clientX) < numbers12.THUMB_UPDATE_MIN_PX;
      if (moveDistanceUnderThreshold)
        return this.thumb;
      var draggedThumbToLeft = clientX < this.downEventClientX;
      if (draggedThumbToLeft) {
        return this.adapter.isRTL() ? Thumb.END : Thumb.START;
      } else {
        return this.adapter.isRTL() ? Thumb.START : Thumb.END;
      }
    };
    MDCSliderFoundation2.prototype.updateUI = function(thumb) {
      if (thumb) {
        this.updateThumbAndInputAttributes(thumb);
      } else {
        this.updateThumbAndInputAttributes(Thumb.START);
        this.updateThumbAndInputAttributes(Thumb.END);
      }
      this.updateThumbAndTrackUI(thumb);
      this.updateValueIndicatorUI(thumb);
      this.updateTickMarksUI();
    };
    MDCSliderFoundation2.prototype.updateThumbAndInputAttributes = function(thumb) {
      if (!thumb)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      var valueStr = String(value);
      this.adapter.setInputAttribute(attributes3.INPUT_VALUE, valueStr, thumb);
      if (this.isRange && thumb === Thumb.START) {
        this.adapter.setInputAttribute(attributes3.INPUT_MIN, String(value + this.minRange), Thumb.END);
      } else if (this.isRange && thumb === Thumb.END) {
        this.adapter.setInputAttribute(attributes3.INPUT_MAX, String(value - this.minRange), Thumb.START);
      }
      if (this.adapter.getInputValue(thumb) !== valueStr) {
        this.adapter.setInputValue(valueStr, thumb);
      }
      var valueToAriaValueTextFn = this.adapter.getValueToAriaValueTextFn();
      if (valueToAriaValueTextFn) {
        this.adapter.setInputAttribute(attributes3.ARIA_VALUETEXT, valueToAriaValueTextFn(value, thumb), thumb);
      }
    };
    MDCSliderFoundation2.prototype.updateValueIndicatorUI = function(thumb) {
      if (!this.isDiscrete)
        return;
      var value = this.isRange && thumb === Thumb.START ? this.valueStart : this.value;
      this.adapter.setValueIndicatorText(value, thumb === Thumb.START ? Thumb.START : Thumb.END);
      if (!thumb && this.isRange) {
        this.adapter.setValueIndicatorText(this.valueStart, Thumb.START);
      }
    };
    MDCSliderFoundation2.prototype.updateTickMarksUI = function() {
      if (!this.isDiscrete || !this.hasTickMarks)
        return;
      var numTickMarksInactiveStart = (this.valueStart - this.min) / this.step;
      var numTickMarksActive = (this.value - this.valueStart) / this.step + 1;
      var numTickMarksInactiveEnd = (this.max - this.value) / this.step;
      var tickMarksInactiveStart = Array.from({ length: numTickMarksInactiveStart }).fill(TickMark.INACTIVE);
      var tickMarksActive = Array.from({ length: numTickMarksActive }).fill(TickMark.ACTIVE);
      var tickMarksInactiveEnd = Array.from({ length: numTickMarksInactiveEnd }).fill(TickMark.INACTIVE);
      this.adapter.updateTickMarks(tickMarksInactiveStart.concat(tickMarksActive).concat(tickMarksInactiveEnd));
    };
    MDCSliderFoundation2.prototype.mapClientXOnSliderScale = function(clientX) {
      var xPos = clientX - this.rect.left;
      var pctComplete = xPos / this.rect.width;
      if (this.adapter.isRTL()) {
        pctComplete = 1 - pctComplete;
      }
      var value = this.min + pctComplete * (this.max - this.min);
      if (value === this.max || value === this.min) {
        return value;
      }
      return Number(this.quantize(value).toFixed(this.numDecimalPlaces));
    };
    MDCSliderFoundation2.prototype.quantize = function(value) {
      var numSteps = Math.round((value - this.min) / this.step);
      return this.min + numSteps * this.step;
    };
    MDCSliderFoundation2.prototype.updateValue = function(value, thumb, _a2) {
      var _b = _a2 === void 0 ? {} : _a2, emitInputEvent = _b.emitInputEvent;
      value = this.clampValue(value, thumb);
      if (this.isRange && thumb === Thumb.START) {
        if (this.valueStart === value)
          return;
        this.valueStart = value;
      } else {
        if (this.value === value)
          return;
        this.value = value;
      }
      this.updateUI(thumb);
      if (emitInputEvent) {
        this.adapter.emitInputEvent(thumb === Thumb.START ? this.valueStart : this.value, thumb);
      }
    };
    MDCSliderFoundation2.prototype.clampValue = function(value, thumb) {
      value = Math.min(Math.max(value, this.min), this.max);
      var thumbStartMovedPastThumbEnd = this.isRange && thumb === Thumb.START && value > this.value - this.minRange;
      if (thumbStartMovedPastThumbEnd) {
        return this.value - this.minRange;
      }
      var thumbEndMovedPastThumbStart = this.isRange && thumb === Thumb.END && value < this.valueStart + this.minRange;
      if (thumbEndMovedPastThumbStart) {
        return this.valueStart + this.minRange;
      }
      return value;
    };
    MDCSliderFoundation2.prototype.updateThumbAndTrackUI = function(thumb) {
      var _this = this;
      var _a2 = this, max = _a2.max, min = _a2.min;
      var pctComplete = (this.value - this.valueStart) / (max - min);
      var rangePx = pctComplete * this.rect.width;
      var isRtl = this.adapter.isRTL();
      var transformProp = HAS_WINDOW ? getCorrectPropertyName(window, "transform") : "transform";
      if (this.isRange) {
        var thumbLeftPos_1 = this.adapter.isRTL() ? (max - this.value) / (max - min) * this.rect.width : (this.valueStart - min) / (max - min) * this.rect.width;
        var thumbRightPos_1 = thumbLeftPos_1 + rangePx;
        this.animFrame.request(AnimationKeys3.SLIDER_UPDATE, function() {
          var trackAnimatesFromRight = !isRtl && thumb === Thumb.START || isRtl && thumb !== Thumb.START;
          if (trackAnimatesFromRight) {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "right");
            _this.adapter.setTrackActiveStyleProperty("left", "auto");
            _this.adapter.setTrackActiveStyleProperty("right", _this.rect.width - thumbRightPos_1 + "px");
          } else {
            _this.adapter.setTrackActiveStyleProperty("transform-origin", "left");
            _this.adapter.setTrackActiveStyleProperty("right", "auto");
            _this.adapter.setTrackActiveStyleProperty("left", thumbLeftPos_1 + "px");
          }
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          var thumbStartPos = isRtl ? thumbRightPos_1 : thumbLeftPos_1;
          var thumbEndPos = _this.adapter.isRTL() ? thumbLeftPos_1 : thumbRightPos_1;
          if (thumb === Thumb.START || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.START);
            _this.alignValueIndicator(Thumb.START, thumbStartPos);
          }
          if (thumb === Thumb.END || !thumb || !_this.initialStylesRemoved) {
            _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbEndPos + "px)", Thumb.END);
            _this.alignValueIndicator(Thumb.END, thumbEndPos);
          }
          _this.removeInitialStyles(isRtl);
          _this.updateOverlappingThumbsUI(thumbStartPos, thumbEndPos, thumb);
        });
      } else {
        this.animFrame.request(AnimationKeys3.SLIDER_UPDATE, function() {
          var thumbStartPos = isRtl ? _this.rect.width - rangePx : rangePx;
          _this.adapter.setThumbStyleProperty(transformProp, "translateX(" + thumbStartPos + "px)", Thumb.END);
          _this.alignValueIndicator(Thumb.END, thumbStartPos);
          _this.adapter.setTrackActiveStyleProperty(transformProp, "scaleX(" + pctComplete + ")");
          _this.removeInitialStyles(isRtl);
        });
      }
    };
    MDCSliderFoundation2.prototype.alignValueIndicator = function(thumb, thumbPos) {
      if (!this.isDiscrete)
        return;
      var thumbHalfWidth = this.adapter.getThumbBoundingClientRect(thumb).width / 2;
      var containerWidth = this.adapter.getValueIndicatorContainerWidth(thumb);
      var sliderWidth = this.adapter.getBoundingClientRect().width;
      if (containerWidth / 2 > thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_LEFT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else if (containerWidth / 2 > sliderWidth - thumbPos + thumbHalfWidth) {
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_RIGHT, thumbHalfWidth + "px", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(50%)", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "0", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "none", thumb);
      } else {
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CARET_TRANSFORM, "translateX(-50%)", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_LEFT, "50%", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_RIGHT, "auto", thumb);
        this.adapter.setThumbStyleProperty(strings33.VAR_VALUE_INDICATOR_CONTAINER_TRANSFORM, "translateX(-50%)", thumb);
      }
    };
    MDCSliderFoundation2.prototype.removeInitialStyles = function(isRtl) {
      if (this.initialStylesRemoved)
        return;
      var position = isRtl ? "right" : "left";
      this.adapter.removeThumbStyleProperty(position, Thumb.END);
      if (this.isRange) {
        this.adapter.removeThumbStyleProperty(position, Thumb.START);
      }
      this.initialStylesRemoved = true;
      this.resetTrackAndThumbAnimation();
    };
    MDCSliderFoundation2.prototype.resetTrackAndThumbAnimation = function() {
      var _this = this;
      if (!this.isDiscrete)
        return;
      var transitionProp = HAS_WINDOW ? getCorrectPropertyName(window, "transition") : "transition";
      var transitionDefault = "none 0s ease 0s";
      this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.END);
      if (this.isRange) {
        this.adapter.setThumbStyleProperty(transitionProp, transitionDefault, Thumb.START);
      }
      this.adapter.setTrackActiveStyleProperty(transitionProp, transitionDefault);
      requestAnimationFrame(function() {
        _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.END);
        _this.adapter.removeTrackActiveStyleProperty(transitionProp);
        if (_this.isRange) {
          _this.adapter.removeThumbStyleProperty(transitionProp, Thumb.START);
        }
      });
    };
    MDCSliderFoundation2.prototype.updateOverlappingThumbsUI = function(thumbStartPos, thumbEndPos, thumb) {
      var thumbsOverlap = false;
      if (this.adapter.isRTL()) {
        var startThumbLeftEdge = thumbStartPos - this.startThumbKnobWidth / 2;
        var endThumbRightEdge = thumbEndPos + this.endThumbKnobWidth / 2;
        thumbsOverlap = endThumbRightEdge >= startThumbLeftEdge;
      } else {
        var startThumbRightEdge = thumbStartPos + this.startThumbKnobWidth / 2;
        var endThumbLeftEdge = thumbEndPos - this.endThumbKnobWidth / 2;
        thumbsOverlap = startThumbRightEdge >= endThumbLeftEdge;
      }
      if (thumbsOverlap) {
        this.adapter.addThumbClass(
          cssClasses32.THUMB_TOP,
          // If no thumb was dragged (in the case of initial layout), end
          // thumb is on top by default.
          thumb || Thumb.END
        );
        this.adapter.removeThumbClass(cssClasses32.THUMB_TOP, thumb === Thumb.START ? Thumb.END : Thumb.START);
      } else {
        this.adapter.removeThumbClass(cssClasses32.THUMB_TOP, Thumb.START);
        this.adapter.removeThumbClass(cssClasses32.THUMB_TOP, Thumb.END);
      }
    };
    MDCSliderFoundation2.prototype.convertAttributeValueToNumber = function(attributeValue, attributeName) {
      if (attributeValue === null) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` must be non-null.");
      }
      var value = Number(attributeValue);
      if (isNaN(value)) {
        throw new Error("MDCSliderFoundation: `" + attributeName + "` value is `" + attributeValue + "`, but must be a number.");
      }
      return value;
    };
    MDCSliderFoundation2.prototype.validateProperties = function(_a2) {
      var min = _a2.min, max = _a2.max, value = _a2.value, valueStart = _a2.valueStart, step = _a2.step, minRange = _a2.minRange;
      if (min >= max) {
        throw new Error("MDCSliderFoundation: min must be strictly less than max. " + ("Current: [min: " + min + ", max: " + max + "]"));
      }
      if (step <= 0) {
        throw new Error("MDCSliderFoundation: step must be a positive number. " + ("Current step: " + step));
      }
      if (this.isRange) {
        if (value < min || value > max || valueStart < min || valueStart > max) {
          throw new Error("MDCSliderFoundation: values must be in [min, max] range. " + ("Current values: [start value: " + valueStart + ", end value: ") + (value + ", min: " + min + ", max: " + max + "]"));
        }
        if (valueStart > value) {
          throw new Error("MDCSliderFoundation: start value must be <= end value. " + ("Current values: [start value: " + valueStart + ", end value: " + value + "]"));
        }
        if (minRange < 0) {
          throw new Error("MDCSliderFoundation: minimum range must be non-negative. " + ("Current min range: " + minRange));
        }
        if (value - valueStart < minRange) {
          throw new Error("MDCSliderFoundation: start value and end value must differ by at least " + (minRange + ". Current values: [start value: " + valueStart + ", ") + ("end value: " + value + "]"));
        }
        var numStepsValueStartFromMin = (valueStart - min) / step;
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueStartFromMin.toFixed(6))) || !Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider values must be valid based on the " + ("step value (" + step + "). Current values: [start value: ") + (valueStart + ", end value: " + value + ", min: " + min + "]"));
        }
      } else {
        if (value < min || value > max) {
          throw new Error("MDCSliderFoundation: value must be in [min, max] range. " + ("Current values: [value: " + value + ", min: " + min + ", max: " + max + "]"));
        }
        var numStepsValueFromMin = (value - min) / step;
        if (!Number.isInteger(parseFloat(numStepsValueFromMin.toFixed(6)))) {
          throw new Error("MDCSliderFoundation: Slider value must be valid based on the " + ("step value (" + step + "). Current value: " + value));
        }
      }
    };
    MDCSliderFoundation2.prototype.registerEventHandlers = function() {
      this.adapter.registerWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.registerEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.registerEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.registerEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.registerEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.registerThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.registerInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.registerInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.registerInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.registerThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.registerInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.registerInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.registerInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.deregisterEventHandlers = function() {
      this.adapter.deregisterWindowEventHandler("resize", this.resizeListener);
      if (MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS) {
        this.adapter.deregisterEventHandler("pointerdown", this.pointerdownListener);
        this.adapter.deregisterEventHandler("pointerup", this.pointerupListener);
      } else {
        this.adapter.deregisterEventHandler("mousedown", this.mousedownOrTouchstartListener);
        this.adapter.deregisterEventHandler("touchstart", this.mousedownOrTouchstartListener);
      }
      if (this.isRange) {
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseenter", this.thumbMouseenterListener);
        this.adapter.deregisterThumbEventHandler(Thumb.START, "mouseleave", this.thumbMouseleaveListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "change", this.inputStartChangeListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "focus", this.inputStartFocusListener);
        this.adapter.deregisterInputEventHandler(Thumb.START, "blur", this.inputStartBlurListener);
      }
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseenter", this.thumbMouseenterListener);
      this.adapter.deregisterThumbEventHandler(Thumb.END, "mouseleave", this.thumbMouseleaveListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "change", this.inputEndChangeListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "focus", this.inputEndFocusListener);
      this.adapter.deregisterInputEventHandler(Thumb.END, "blur", this.inputEndBlurListener);
    };
    MDCSliderFoundation2.prototype.handlePointerup = function() {
      this.handleUp();
      this.adapter.deregisterEventHandler("pointermove", this.moveListener);
    };
    MDCSliderFoundation2.SUPPORTS_POINTER_EVENTS = HAS_WINDOW && Boolean(window.PointerEvent) && // #setPointerCapture is buggy on iOS, so we can't use pointer events
    // until the following bug is fixed:
    // https://bugs.webkit.org/show_bug.cgi?id=220196
    !isIOS();
    return MDCSliderFoundation2;
  }(MDCFoundation)
);
function isIOS() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
function getNumDecimalPlaces(n) {
  var match = /(?:\.(\d+))?(?:[eE]([+\-]?\d+))?$/.exec(String(n));
  if (!match)
    return 0;
  var fraction = match[1] || "";
  var exponent = match[2] || 0;
  return Math.max(
    0,
    // lower limit
    (fraction === "0" ? 0 : fraction.length) - Number(exponent)
  );
}

// node_modules/@material/slider/component.js
var MDCSlider = (
  /** @class */
  function(_super) {
    __extends(MDCSlider2, _super);
    function MDCSlider2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.skipInitialUIUpdate = false;
      _this.valueToAriaValueTextFn = null;
      return _this;
    }
    MDCSlider2.attachTo = function(root, options) {
      if (options === void 0) {
        options = {};
      }
      return new MDCSlider2(root, void 0, options);
    };
    MDCSlider2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        addThumbClass: function(className, thumb) {
          _this.getThumbEl(thumb).classList.add(className);
        },
        removeThumbClass: function(className, thumb) {
          _this.getThumbEl(thumb).classList.remove(className);
        },
        getAttribute: function(attribute) {
          return _this.root.getAttribute(attribute);
        },
        getInputValue: function(thumb) {
          return _this.getInput(thumb).value;
        },
        setInputValue: function(value, thumb) {
          _this.getInput(thumb).value = value;
        },
        getInputAttribute: function(attribute, thumb) {
          return _this.getInput(thumb).getAttribute(attribute);
        },
        setInputAttribute: function(attribute, value, thumb) {
          _this.getInput(thumb).setAttribute(attribute, value);
        },
        removeInputAttribute: function(attribute, thumb) {
          _this.getInput(thumb).removeAttribute(attribute);
        },
        focusInput: function(thumb) {
          _this.getInput(thumb).focus();
        },
        isInputFocused: function(thumb) {
          return _this.getInput(thumb) === document.activeElement;
        },
        shouldHideFocusStylesForPointerEvents: function() {
          return false;
        },
        getThumbKnobWidth: function(thumb) {
          return _this.getThumbEl(thumb).querySelector("." + cssClasses32.THUMB_KNOB).getBoundingClientRect().width;
        },
        getThumbBoundingClientRect: function(thumb) {
          return _this.getThumbEl(thumb).getBoundingClientRect();
        },
        getBoundingClientRect: function() {
          return _this.root.getBoundingClientRect();
        },
        getValueIndicatorContainerWidth: function(thumb) {
          return _this.getThumbEl(thumb).querySelector("." + cssClasses32.VALUE_INDICATOR_CONTAINER).getBoundingClientRect().width;
        },
        isRTL: function() {
          return getComputedStyle(_this.root).direction === "rtl";
        },
        setThumbStyleProperty: function(propertyName, value, thumb) {
          _this.getThumbEl(thumb).style.setProperty(propertyName, value);
        },
        removeThumbStyleProperty: function(propertyName, thumb) {
          _this.getThumbEl(thumb).style.removeProperty(propertyName);
        },
        setTrackActiveStyleProperty: function(propertyName, value) {
          _this.trackActive.style.setProperty(propertyName, value);
        },
        removeTrackActiveStyleProperty: function(propertyName) {
          _this.trackActive.style.removeProperty(propertyName);
        },
        setValueIndicatorText: function(value, thumb) {
          var valueIndicatorEl = _this.getThumbEl(thumb).querySelector("." + cssClasses32.VALUE_INDICATOR_TEXT);
          valueIndicatorEl.textContent = String(value);
        },
        getValueToAriaValueTextFn: function() {
          return _this.valueToAriaValueTextFn;
        },
        updateTickMarks: function(tickMarks) {
          var tickMarksContainer = _this.root.querySelector("." + cssClasses32.TICK_MARKS_CONTAINER);
          if (!tickMarksContainer) {
            tickMarksContainer = document.createElement("div");
            tickMarksContainer.classList.add(cssClasses32.TICK_MARKS_CONTAINER);
            var track = _this.root.querySelector("." + cssClasses32.TRACK);
            track.appendChild(tickMarksContainer);
          }
          if (tickMarks.length !== tickMarksContainer.children.length) {
            while (tickMarksContainer.firstChild) {
              tickMarksContainer.removeChild(tickMarksContainer.firstChild);
            }
            _this.addTickMarks(tickMarksContainer, tickMarks);
          } else {
            _this.updateTickMarks(tickMarksContainer, tickMarks);
          }
        },
        setPointerCapture: function(pointerId) {
          _this.root.setPointerCapture(pointerId);
        },
        emitChangeEvent: function(value, thumb) {
          _this.emit(events5.CHANGE, { value, thumb });
        },
        emitInputEvent: function(value, thumb) {
          _this.emit(events5.INPUT, { value, thumb });
        },
        emitDragStartEvent: function(_, thumb) {
          _this.getRipple(thumb).activate();
        },
        emitDragEndEvent: function(_, thumb) {
          _this.getRipple(thumb).deactivate();
        },
        registerEventHandler: function(evtType, handler) {
          _this.listen(evtType, handler);
        },
        deregisterEventHandler: function(evtType, handler) {
          _this.unlisten(evtType, handler);
        },
        registerThumbEventHandler: function(thumb, evtType, handler) {
          _this.getThumbEl(thumb).addEventListener(evtType, handler);
        },
        deregisterThumbEventHandler: function(thumb, evtType, handler) {
          _this.getThumbEl(thumb).removeEventListener(evtType, handler);
        },
        registerInputEventHandler: function(thumb, evtType, handler) {
          _this.getInput(thumb).addEventListener(evtType, handler);
        },
        deregisterInputEventHandler: function(thumb, evtType, handler) {
          _this.getInput(thumb).removeEventListener(evtType, handler);
        },
        registerBodyEventHandler: function(evtType, handler) {
          document.body.addEventListener(evtType, handler);
        },
        deregisterBodyEventHandler: function(evtType, handler) {
          document.body.removeEventListener(evtType, handler);
        },
        registerWindowEventHandler: function(evtType, handler) {
          window.addEventListener(evtType, handler);
        },
        deregisterWindowEventHandler: function(evtType, handler) {
          window.removeEventListener(evtType, handler);
        }
        // tslint:enable:object-literal-sort-keys
      };
      return new MDCSliderFoundation(adapter);
    };
    MDCSlider2.prototype.initialize = function(_a2) {
      var _b = _a2 === void 0 ? {} : _a2, skipInitialUIUpdate = _b.skipInitialUIUpdate;
      this.inputs = [].slice.call(this.root.querySelectorAll("." + cssClasses32.INPUT));
      this.thumbs = [].slice.call(this.root.querySelectorAll("." + cssClasses32.THUMB));
      this.trackActive = this.root.querySelector("." + cssClasses32.TRACK_ACTIVE);
      this.ripples = this.createRipples();
      if (skipInitialUIUpdate) {
        this.skipInitialUIUpdate = true;
      }
    };
    MDCSlider2.prototype.initialSyncWithDOM = function() {
      this.foundation.layout({ skipUpdateUI: this.skipInitialUIUpdate });
    };
    MDCSlider2.prototype.layout = function() {
      this.foundation.layout();
    };
    MDCSlider2.prototype.getValueStart = function() {
      return this.foundation.getValueStart();
    };
    MDCSlider2.prototype.setValueStart = function(valueStart) {
      this.foundation.setValueStart(valueStart);
    };
    MDCSlider2.prototype.getValue = function() {
      return this.foundation.getValue();
    };
    MDCSlider2.prototype.setValue = function(value) {
      this.foundation.setValue(value);
    };
    MDCSlider2.prototype.getDisabled = function() {
      return this.foundation.getDisabled();
    };
    MDCSlider2.prototype.setDisabled = function(disabled) {
      this.foundation.setDisabled(disabled);
    };
    MDCSlider2.prototype.setValueToAriaValueTextFn = function(mapFn) {
      this.valueToAriaValueTextFn = mapFn;
    };
    MDCSlider2.prototype.getThumbEl = function(thumb) {
      return thumb === Thumb.END ? this.thumbs[this.thumbs.length - 1] : this.thumbs[0];
    };
    MDCSlider2.prototype.getInput = function(thumb) {
      return thumb === Thumb.END ? this.inputs[this.inputs.length - 1] : this.inputs[0];
    };
    MDCSlider2.prototype.getRipple = function(thumb) {
      return thumb === Thumb.END ? this.ripples[this.ripples.length - 1] : this.ripples[0];
    };
    MDCSlider2.prototype.addTickMarks = function(tickMarkContainer, tickMarks) {
      var fragment = document.createDocumentFragment();
      for (var i = 0; i < tickMarks.length; i++) {
        var div = document.createElement("div");
        var tickMarkClass = tickMarks[i] === TickMark.ACTIVE ? cssClasses32.TICK_MARK_ACTIVE : cssClasses32.TICK_MARK_INACTIVE;
        div.classList.add(tickMarkClass);
        fragment.appendChild(div);
      }
      tickMarkContainer.appendChild(fragment);
    };
    MDCSlider2.prototype.updateTickMarks = function(tickMarkContainer, tickMarks) {
      var tickMarkEls = Array.from(tickMarkContainer.children);
      for (var i = 0; i < tickMarkEls.length; i++) {
        if (tickMarks[i] === TickMark.ACTIVE) {
          tickMarkEls[i].classList.add(cssClasses32.TICK_MARK_ACTIVE);
          tickMarkEls[i].classList.remove(cssClasses32.TICK_MARK_INACTIVE);
        } else {
          tickMarkEls[i].classList.add(cssClasses32.TICK_MARK_INACTIVE);
          tickMarkEls[i].classList.remove(cssClasses32.TICK_MARK_ACTIVE);
        }
      }
    };
    MDCSlider2.prototype.createRipples = function() {
      var ripples = [];
      var rippleSurfaces = [].slice.call(this.root.querySelectorAll("." + cssClasses32.THUMB));
      var _loop_1 = function(i2) {
        var rippleSurface = rippleSurfaces[i2];
        var input = this_1.inputs[i2];
        var adapter = __assign(__assign({}, MDCRipple.createAdapter(this_1)), { addClass: function(className) {
          rippleSurface.classList.add(className);
        }, computeBoundingRect: function() {
          return rippleSurface.getBoundingClientRect();
        }, deregisterInteractionHandler: function(evtType, handler) {
          input.removeEventListener(evtType, handler);
        }, isSurfaceActive: function() {
          return matches(input, ":active");
        }, isUnbounded: function() {
          return true;
        }, registerInteractionHandler: function(evtType, handler) {
          input.addEventListener(evtType, handler, applyPassive());
        }, removeClass: function(className) {
          rippleSurface.classList.remove(className);
        }, updateCssVariable: function(varName, value) {
          rippleSurface.style.setProperty(varName, value);
        } });
        var ripple = new MDCRipple(rippleSurface, new MDCRippleFoundation(adapter));
        ripple.unbounded = true;
        ripples.push(ripple);
      };
      var this_1 = this;
      for (var i = 0; i < rippleSurfaces.length; i++) {
        _loop_1(i);
      }
      return ripples;
    };
    return MDCSlider2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/slider/dist/mdc-slider.js
var import_dist1750 = __toESM(require_dist());
var import_dist1751 = __toESM(require_dist2());
var import_dist1752 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1744 = __toESM(require_dist());
var import_dist1745 = __toESM(require_dist2());
var import_dist1746 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1729 = __toESM(require_dist());
var import_dist1730 = __toESM(require_dist2());
var import_dist1731 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1726 = __toESM(require_dist());
var import_dist1727 = __toESM(require_dist2());
var import_dist1728 = __toESM(require_dist3());
function number32(a) {
  return Number(a);
}
function booleanAttr32(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap32 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr32 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr32 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr32 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1732 = __toESM(require_dist());
var import_dist1733 = __toESM(require_dist2());
var import_dist1734 = __toESM(require_dist3());
var MdcPromisifyReference32 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1735 = __toESM(require_dist());
var import_dist1736 = __toESM(require_dist2());
var import_dist1737 = __toESM(require_dist3());
var MdcComponent32 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1738 = __toESM(require_dist());
var import_dist1739 = __toESM(require_dist2());
var import_dist1740 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/slider/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1741 = __toESM(require_dist());
var import_dist1742 = __toESM(require_dist2());
var import_dist1743 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/slider/dist/mdc-slider-foundation-aurelia.js
var import_dist1747 = __toESM(require_dist());
var import_dist1748 = __toESM(require_dist2());
var import_dist1749 = __toESM(require_dist3());
var MdcSliderFoundationAurelia = class extends MDCSliderFoundation {
  get rect() {
    return this.adapter.getBoundingClientRect();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  set rect(_) {
  }
};

// node_modules/@aurelia-mdc-web/slider/dist/mdc-slider.html?raw
var mdc_slider_default = `<template class="mdc-slider
  \${range ? 'mdc-slider--range' : ''}
  \${discrete ? 'mdc-slider--discrete' : ''}
  \${discrete && tickMarks ? 'mdc-slider--tick-marks' : ''}
  ">
  <input class="mdc-slider__input" type="range" min="0" max="100" value="0" if.bind="range" ref="startInput">
  <input class="mdc-slider__input" type="range" min="0" max="100" value="0" ref="endInput">
  <div class="mdc-slider__track">
    <div class="mdc-slider__track--inactive"></div>
    <div class="mdc-slider__track--active">
      <div class="mdc-slider__track--active_fill" ref="trackActive"></div>
    </div>
    <div class="mdc-slider__tick-marks" if.bind="discrete && tickMarks">
      <div repeat.for="s of tickMarkStatuses"
        class="mdc-slider__tick-mark--\${s === TickMark.ACTIVE ? 'active' : 'inactive' }"></div>
    </div>
  </div>
  <div class="mdc-slider__thumb" mdc-ripple="unbounded.bind: true" mdc-ripple.ref="startRipple" if.bind="range"
    ref="startThumb">
    <div class="mdc-slider__value-indicator-container" if.bind="discrete">
      <div class="mdc-slider__value-indicator">
        <span class="mdc-slider__value-indicator-text"></span>
      </div>
    </div>
    <div class="mdc-slider__thumb-knob"></div>
  </div>
  <div class="mdc-slider__thumb" mdc-ripple="unbounded.bind: true" mdc-ripple.ref="endRipple" ref="endThumb"
    style="overflow: visible;">
    <div class="mdc-slider__value-indicator-container" if.bind="discrete">
      <div class="mdc-slider__value-indicator">
        <span class="mdc-slider__value-indicator-text"></span>
      </div>
    </div>
    <div class="mdc-slider__thumb-knob"></div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/slider/dist/mdc-slider.js
events5.INPUT = events5.INPUT.toLowerCase();
events5.CHANGE = events5.CHANGE.toLowerCase();
var MdcSlider = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-slider", template: mdc_slider_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent32;
  let _discrete_decorators;
  let _discrete_initializers = [];
  let _discrete_extraInitializers = [];
  let _tickMarks_decorators;
  let _tickMarks_initializers = [];
  let _tickMarks_extraInitializers = [];
  let _range_decorators;
  let _range_initializers = [];
  let _range_extraInitializers = [];
  let _disabled_decorators;
  let _disabled_initializers = [];
  let _disabled_extraInitializers = [];
  let _hideFocus_decorators;
  let _hideFocus_initializers = [];
  let _hideFocus_extraInitializers = [];
  let _min_decorators;
  let _min_initializers = [];
  let _min_extraInitializers = [];
  let _max_decorators;
  let _max_initializers = [];
  let _max_extraInitializers = [];
  let _minRange_decorators;
  let _minRange_initializers = [];
  let _minRange_extraInitializers = [];
  let _step_decorators;
  let _step_initializers = [];
  let _step_extraInitializers = [];
  let _valueToAriaValueTextFn_decorators;
  let _valueToAriaValueTextFn_initializers = [];
  let _valueToAriaValueTextFn_extraInitializers = [];
  var MdcSlider2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.TickMark = TickMark;
      this.eventHandlers = [];
      this.discrete = __runInitializers(this, _discrete_initializers, void 0);
      this.tickMarks = (__runInitializers(this, _discrete_extraInitializers), __runInitializers(this, _tickMarks_initializers, void 0));
      this.range = (__runInitializers(this, _tickMarks_extraInitializers), __runInitializers(this, _range_initializers, void 0));
      this.disabled = (__runInitializers(this, _range_extraInitializers), __runInitializers(this, _disabled_initializers, void 0));
      this.hideFocus = (__runInitializers(this, _disabled_extraInitializers), __runInitializers(this, _hideFocus_initializers, void 0));
      this.min = (__runInitializers(this, _hideFocus_extraInitializers), __runInitializers(this, _min_initializers, 0));
      this.max = (__runInitializers(this, _min_extraInitializers), __runInitializers(this, _max_initializers, 100));
      this.minRange = (__runInitializers(this, _max_extraInitializers), __runInitializers(this, _minRange_initializers, void 0));
      this.step = (__runInitializers(this, _minRange_extraInitializers), __runInitializers(this, _step_initializers, 1));
      this.valueToAriaValueTextFn = (__runInitializers(this, _step_extraInitializers), __runInitializers(this, _valueToAriaValueTextFn_initializers, null));
      this._value = (__runInitializers(this, _valueToAriaValueTextFn_extraInitializers), 0);
      this._valueStart = 0;
      defineMdcSliderElementApis(this.root);
    }
    disabledChanged() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.setDisabled(this.disabled);
    }
    async minChanged() {
      var _a2, _b, _c, _d;
      await this.initialised;
      (_a2 = this.startInput ?? this.endInput) == null ? void 0 : _a2.setAttribute(attributes3.INPUT_MIN, this.min.toString());
      (_b = this.foundation) == null ? void 0 : _b.destroy();
      this.cleanupEventHandlers();
      if (this.range && this.valueStart < this.min) {
        this.valueStart = this.min;
        this.emit(events5.CHANGE, { value: this.value, thumb: Thumb.START }, true);
      }
      if (this.value < this.min) {
        this.value = this.min;
        this.emit(events5.CHANGE, { value: this.value, thumb: Thumb.END }, true);
      }
      (_c = this.foundation) == null ? void 0 : _c.init();
      (_d = this.foundation) == null ? void 0 : _d.layout();
    }
    async maxChanged() {
      var _a2, _b, _c, _d;
      await this.initialised;
      (_a2 = this.endInput) == null ? void 0 : _a2.setAttribute(attributes3.INPUT_MAX, this.max.toString());
      (_b = this.foundation) == null ? void 0 : _b.destroy();
      this.cleanupEventHandlers();
      if (this.range && this.valueStart > this.max) {
        this.valueStart = this.max;
        this.emit(events5.CHANGE, { value: this.value, thumb: Thumb.START }, true);
      }
      if (this.value > this.max) {
        this.value = this.max;
        this.emit(events5.CHANGE, { value: this.value, thumb: Thumb.END }, true);
      }
      (_c = this.foundation) == null ? void 0 : _c.init();
      (_d = this.foundation) == null ? void 0 : _d.layout();
    }
    async minRangeChanged() {
      var _a2, _b, _c, _d;
      await this.initialised;
      (_a2 = this.endInput) == null ? void 0 : _a2.setAttribute(attributes3.DATA_MIN_RANGE, this.minRange.toString());
      (_b = this.foundation) == null ? void 0 : _b.destroy();
      this.cleanupEventHandlers();
      if (this.range && this.value - this.valueStart < this.minRange) {
        if (this.valueStart + this.minRange < this.max) {
          this.value = this.valueStart + this.minRange;
        } else if (this.value - this.minRange > this.min) {
          this.valueStart = this.value - this.minRange;
        }
        this.emit(events5.CHANGE, { value: this.value, thumb: Thumb.START }, true);
      }
      (_c = this.foundation) == null ? void 0 : _c.init();
      (_d = this.foundation) == null ? void 0 : _d.layout();
    }
    stepChanged() {
      var _a2, _b, _c, _d;
      (_a2 = this.startInput) == null ? void 0 : _a2.setAttribute(attributes3.INPUT_STEP, this.step.toString());
      (_b = this.endInput) == null ? void 0 : _b.setAttribute(attributes3.INPUT_STEP, this.step.toString());
      (_c = this.foundation) == null ? void 0 : _c.destroy();
      this.cleanupEventHandlers();
      (_d = this.foundation) == null ? void 0 : _d.init();
    }
    get value() {
      if (this.foundation) {
        return this.foundation.getValue();
      } else {
        return this._value;
      }
    }
    set value(value) {
      var _a2;
      this._value = value;
      (_a2 = this.foundation) == null ? void 0 : _a2.setValue(value);
    }
    get valueStart() {
      if (this.foundation) {
        return this.foundation.getValueStart();
      } else {
        return this._valueStart;
      }
    }
    set valueStart(value) {
      var _a2;
      this._valueStart = value;
      (_a2 = this.foundation) == null ? void 0 : _a2.setValueStart(value);
    }
    beforeFoundationCreated() {
      var _a2, _b;
      this.endInput.setAttribute(attributes3.INPUT_MIN, this.min.toString());
      this.endInput.setAttribute(attributes3.INPUT_MAX, this.max.toString());
      this.endInput.setAttribute(attributes3.INPUT_VALUE, this.value.toString());
      this.endInput.setAttribute(attributes3.INPUT_STEP, this.step.toString());
      (_a2 = this.startInput) == null ? void 0 : _a2.setAttribute(attributes3.INPUT_VALUE, this.valueStart.toString());
      (_b = this.startInput) == null ? void 0 : _b.setAttribute(attributes3.INPUT_STEP, this.step.toString());
    }
    initialSyncWithDOM() {
      var _a2;
      this.disabledChanged();
      this.value = this._value;
      if (this.range) {
        this.valueStart = this._valueStart;
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.layout();
    }
    getDefaultFoundation() {
      const adapter = {
        hasClass: (className) => this.root.classList.contains(className),
        addClass: (className) => {
          this.root.classList.add(className);
        },
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        addThumbClass: (className, thumb) => {
          var _a2;
          (_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.classList.add(className);
        },
        removeThumbClass: (className, thumb) => {
          var _a2;
          (_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.classList.remove(className);
        },
        getAttribute: (attribute) => this.root.getAttribute(attribute),
        getInputValue: (thumb) => {
          var _a2;
          return ((_a2 = this.getInput(thumb)) == null ? void 0 : _a2.value) ?? "";
        },
        setInputValue: (value, thumb) => {
          const thumbInput = this.getInput(thumb);
          if (thumbInput) {
            thumbInput.value = value;
          }
        },
        getInputAttribute: (attribute, thumb) => {
          var _a2;
          return ((_a2 = this.getInput(thumb)) == null ? void 0 : _a2.getAttribute(attribute)) ?? null;
        },
        setInputAttribute: (attribute, value, thumb) => {
          var _a2;
          (_a2 = this.getInput(thumb)) == null ? void 0 : _a2.setAttribute(attribute, value);
        },
        removeInputAttribute: (attribute, thumb) => {
          var _a2;
          (_a2 = this.getInput(thumb)) == null ? void 0 : _a2.removeAttribute(attribute);
        },
        focusInput: (thumb) => {
          var _a2;
          (_a2 = this.getInput(thumb)) == null ? void 0 : _a2.focus();
        },
        isInputFocused: (thumb) => this.getInput(thumb) === document.activeElement,
        shouldHideFocusStylesForPointerEvents: () => this.hideFocus,
        getThumbKnobWidth: (thumb) => {
          var _a2;
          return ((_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.querySelector(`.${cssClasses32.THUMB_KNOB}`).getBoundingClientRect().width) ?? 0;
        },
        getThumbBoundingClientRect: (thumb) => this.getThumbEl(thumb).getBoundingClientRect(),
        getBoundingClientRect: () => this.root.getBoundingClientRect(),
        getValueIndicatorContainerWidth: (thumb) => {
          return this.getThumbEl(thumb).querySelector(`.${cssClasses32.VALUE_INDICATOR_CONTAINER}`).getBoundingClientRect().width;
        },
        isRTL: () => getComputedStyle(this.root).direction === "rtl",
        setThumbStyleProperty: (propertyName, value, thumb) => {
          var _a2;
          (_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.style.setProperty(propertyName, value);
        },
        removeThumbStyleProperty: (propertyName, thumb) => {
          var _a2;
          (_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.style.removeProperty(propertyName);
        },
        setTrackActiveStyleProperty: (propertyName, value) => {
          this.trackActive.style.setProperty(propertyName, value);
        },
        removeTrackActiveStyleProperty: (propertyName) => {
          this.trackActive.style.removeProperty(propertyName);
        },
        setValueIndicatorText: (value, thumb) => {
          var _a2;
          const valueIndicatorEl = (_a2 = this.getThumbEl(thumb)) == null ? void 0 : _a2.querySelector(`.${cssClasses32.VALUE_INDICATOR_TEXT}`);
          valueIndicatorEl.textContent = String(value);
        },
        getValueToAriaValueTextFn: () => this.valueToAriaValueTextFn,
        updateTickMarks: (tickMarks) => {
          this.tickMarkStatuses = tickMarks;
        },
        setPointerCapture: (pointerId) => {
          this.root.setPointerCapture(pointerId);
        },
        emitChangeEvent: (value, thumb) => {
          this.emit(events5.CHANGE, { value, thumb });
        },
        emitInputEvent: (value, thumb) => {
          this.emit(events5.INPUT, { value, thumb });
        },
        emitDragStartEvent: (_, thumb) => {
          var _a2;
          (_a2 = this.getRipple(thumb)) == null ? void 0 : _a2.activate();
        },
        emitDragEndEvent: (_, thumb) => {
          var _a2;
          (_a2 = this.getRipple(thumb)) == null ? void 0 : _a2.deactivate();
        },
        registerEventHandler: (evtType, handler) => {
          this.listen(evtType, handler);
          this.addEventHandler(this.root, evtType, handler);
        },
        deregisterEventHandler: (evtType, handler) => {
          this.unlisten(evtType, handler);
          this.removeEventHandler(this.root, evtType, handler);
        },
        registerThumbEventHandler: (thumb, evtType, handler) => {
          const thumbEl = this.getThumbEl(thumb);
          if (thumbEl) {
            thumbEl.addEventListener(evtType, handler);
            this.addEventHandler(thumbEl, evtType, handler);
          }
        },
        deregisterThumbEventHandler: (thumb, evtType, handler) => {
          const thumbEl = this.getThumbEl(thumb);
          if (thumbEl) {
            thumbEl.removeEventListener(evtType, handler);
            this.removeEventHandler(thumbEl, evtType, handler);
          }
        },
        registerInputEventHandler: (thumb, evtType, handler) => {
          const thumbInput = this.getInput(thumb);
          if (thumbInput) {
            thumbInput.addEventListener(evtType, handler);
            this.addEventHandler(thumbInput, evtType, handler);
          }
        },
        deregisterInputEventHandler: (thumb, evtType, handler) => {
          const thumbInput = this.getInput(thumb);
          if (thumbInput) {
            thumbInput.removeEventListener(evtType, handler);
            this.removeEventHandler(thumbInput, evtType, handler);
          }
        },
        registerBodyEventHandler: (evtType, handler) => {
          document.body.addEventListener(evtType, handler);
          this.addEventHandler(document.body, evtType, handler);
        },
        deregisterBodyEventHandler: (evtType, handler) => {
          document.body.removeEventListener(evtType, handler);
          this.removeEventHandler(document.body, evtType, handler);
        },
        registerWindowEventHandler: (evtType, handler) => {
          window.addEventListener(evtType, handler);
          this.addEventHandler(window, evtType, handler);
        },
        deregisterWindowEventHandler: (evtType, handler) => {
          window.removeEventListener(evtType, handler);
          this.removeEventHandler(window, evtType, handler);
        }
        // tslint:enable:object-literal-sort-keys
      };
      return new MdcSliderFoundationAurelia(adapter);
    }
    addEventHandler(element, evtType, handler) {
      this.eventHandlers.push({ element, evtType, handler });
    }
    removeEventHandler(element, evtType, handler) {
      const i = this.eventHandlers.findIndex((x) => x.element === element && x.evtType === evtType && x.handler === handler);
      if (i !== -1) {
        this.eventHandlers.splice(i, 1);
      }
    }
    cleanupEventHandlers() {
      this.eventHandlers.forEach((x) => {
        x.element.removeEventListener(x.evtType, x.handler);
      });
      this.eventHandlers = [];
    }
    getThumbEl(thumb) {
      return thumb === Thumb.END ? this.endThumb : this.startThumb;
    }
    getInput(thumb) {
      return thumb === Thumb.END ? this.endInput : this.startInput;
    }
    getRipple(thumb) {
      return thumb === Thumb.END ? this.endRipple : this.startRipple;
    }
    focus() {
      this.root.focus();
    }
    blur() {
      this.root.blur();
    }
  };
  __setFunctionName(_classThis, "MdcSlider");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _discrete_decorators = [bindable({ set: booleanAttr32 })];
    _tickMarks_decorators = [bindable({ set: booleanAttr32 })];
    _range_decorators = [bindable({ set: booleanAttr32 })];
    _disabled_decorators = [bindable({ set: booleanAttr32 })];
    _hideFocus_decorators = [bindable({ set: booleanAttr32 })];
    _min_decorators = [bindable({ set: number32 })];
    _max_decorators = [bindable({ set: number32 })];
    _minRange_decorators = [bindable({ set: number32 })];
    _step_decorators = [bindable({ set: number32 })];
    _valueToAriaValueTextFn_decorators = [bindable()];
    __esDecorate(null, null, _discrete_decorators, { kind: "field", name: "discrete", static: false, private: false, access: { has: (obj) => "discrete" in obj, get: (obj) => obj.discrete, set: (obj, value) => {
      obj.discrete = value;
    } }, metadata: _metadata }, _discrete_initializers, _discrete_extraInitializers);
    __esDecorate(null, null, _tickMarks_decorators, { kind: "field", name: "tickMarks", static: false, private: false, access: { has: (obj) => "tickMarks" in obj, get: (obj) => obj.tickMarks, set: (obj, value) => {
      obj.tickMarks = value;
    } }, metadata: _metadata }, _tickMarks_initializers, _tickMarks_extraInitializers);
    __esDecorate(null, null, _range_decorators, { kind: "field", name: "range", static: false, private: false, access: { has: (obj) => "range" in obj, get: (obj) => obj.range, set: (obj, value) => {
      obj.range = value;
    } }, metadata: _metadata }, _range_initializers, _range_extraInitializers);
    __esDecorate(null, null, _disabled_decorators, { kind: "field", name: "disabled", static: false, private: false, access: { has: (obj) => "disabled" in obj, get: (obj) => obj.disabled, set: (obj, value) => {
      obj.disabled = value;
    } }, metadata: _metadata }, _disabled_initializers, _disabled_extraInitializers);
    __esDecorate(null, null, _hideFocus_decorators, { kind: "field", name: "hideFocus", static: false, private: false, access: { has: (obj) => "hideFocus" in obj, get: (obj) => obj.hideFocus, set: (obj, value) => {
      obj.hideFocus = value;
    } }, metadata: _metadata }, _hideFocus_initializers, _hideFocus_extraInitializers);
    __esDecorate(null, null, _min_decorators, { kind: "field", name: "min", static: false, private: false, access: { has: (obj) => "min" in obj, get: (obj) => obj.min, set: (obj, value) => {
      obj.min = value;
    } }, metadata: _metadata }, _min_initializers, _min_extraInitializers);
    __esDecorate(null, null, _max_decorators, { kind: "field", name: "max", static: false, private: false, access: { has: (obj) => "max" in obj, get: (obj) => obj.max, set: (obj, value) => {
      obj.max = value;
    } }, metadata: _metadata }, _max_initializers, _max_extraInitializers);
    __esDecorate(null, null, _minRange_decorators, { kind: "field", name: "minRange", static: false, private: false, access: { has: (obj) => "minRange" in obj, get: (obj) => obj.minRange, set: (obj, value) => {
      obj.minRange = value;
    } }, metadata: _metadata }, _minRange_initializers, _minRange_extraInitializers);
    __esDecorate(null, null, _step_decorators, { kind: "field", name: "step", static: false, private: false, access: { has: (obj) => "step" in obj, get: (obj) => obj.step, set: (obj, value) => {
      obj.step = value;
    } }, metadata: _metadata }, _step_initializers, _step_extraInitializers);
    __esDecorate(null, null, _valueToAriaValueTextFn_decorators, { kind: "field", name: "valueToAriaValueTextFn", static: false, private: false, access: { has: (obj) => "valueToAriaValueTextFn" in obj, get: (obj) => obj.valueToAriaValueTextFn, set: (obj, value) => {
      obj.valueToAriaValueTextFn = value;
    } }, metadata: _metadata }, _valueToAriaValueTextFn_initializers, _valueToAriaValueTextFn_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSlider2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSlider2 = _classThis;
})();
function defineMdcSliderElementApis(element) {
  Object.defineProperties(element, {
    value: {
      get() {
        return CustomElement.for(this).viewModel.value;
      },
      set(value) {
        CustomElement.for(this).viewModel.value = value;
      },
      configurable: true
    },
    valuestart: {
      get() {
        return CustomElement.for(this).viewModel.valueStart;
      },
      set(value) {
        CustomElement.for(this).viewModel.valueStart = value;
      },
      configurable: true
    },
    focus: {
      value() {
        CustomElement.for(this).viewModel.focus();
      },
      configurable: true
    },
    blur: {
      value() {
        CustomElement.for(this).viewModel.blur();
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/slider/dist/index.js
var configured7 = false;
var SliderConfiguration = {
  register(container) {
    if (configured7) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.tagName === "MDC-SLIDER" ? property === "value" || property === "valuestart" : false);
        nodeObserverLocator.useConfig({
          "MDC-SLIDER": {
            value: { events: [events5.CHANGE, events5.INPUT] },
            valuestart: { events: [events5.CHANGE, events5.INPUT] }
          }
        });
      }).register(container);
      configured7 = true;
      return container.register(MdcSlider, RippleConfiguration);
    }
  }
};

// node_modules/@aurelia-mdc-web/switch/dist/index.js
var import_dist1819 = __toESM(require_dist());
var import_dist1820 = __toESM(require_dist2());
var import_dist1821 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/switch/dist/mdc-switch.js
var import_dist1813 = __toESM(require_dist());
var import_dist1814 = __toESM(require_dist2());
var import_dist1815 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1774 = __toESM(require_dist());
var import_dist1775 = __toESM(require_dist2());
var import_dist1776 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1759 = __toESM(require_dist());
var import_dist1760 = __toESM(require_dist2());
var import_dist1761 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1756 = __toESM(require_dist());
var import_dist1757 = __toESM(require_dist2());
var import_dist1758 = __toESM(require_dist3());
function booleanAttr33(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap33 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr33 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr33 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr33 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1762 = __toESM(require_dist());
var import_dist1763 = __toESM(require_dist2());
var import_dist1764 = __toESM(require_dist3());
var MdcPromisifyReference33 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1765 = __toESM(require_dist());
var import_dist1766 = __toESM(require_dist2());
var import_dist1767 = __toESM(require_dist3());
var MdcComponent33 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1768 = __toESM(require_dist());
var import_dist1769 = __toESM(require_dist2());
var import_dist1770 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/switch/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1771 = __toESM(require_dist());
var import_dist1772 = __toESM(require_dist2());
var import_dist1773 = __toESM(require_dist3());

// node_modules/@material/switch/index.js
var import_dist1810 = __toESM(require_dist());
var import_dist1811 = __toESM(require_dist2());
var import_dist1812 = __toESM(require_dist3());

// node_modules/@material/switch/deprecated/index.js
var import_dist1789 = __toESM(require_dist());
var import_dist1790 = __toESM(require_dist2());
var import_dist1791 = __toESM(require_dist3());

// node_modules/@material/switch/deprecated/adapter.js
var import_dist1777 = __toESM(require_dist());
var import_dist1778 = __toESM(require_dist2());
var import_dist1779 = __toESM(require_dist3());

// node_modules/@material/switch/deprecated/component.js
var import_dist1786 = __toESM(require_dist());
var import_dist1787 = __toESM(require_dist2());
var import_dist1788 = __toESM(require_dist3());

// node_modules/@material/switch/deprecated/foundation.js
var import_dist1783 = __toESM(require_dist());
var import_dist1784 = __toESM(require_dist2());
var import_dist1785 = __toESM(require_dist3());

// node_modules/@material/switch/deprecated/constants.js
var import_dist1780 = __toESM(require_dist());
var import_dist1781 = __toESM(require_dist2());
var import_dist1782 = __toESM(require_dist3());
var cssClasses33 = {
  /** Class used for a switch that is in the "checked" (on) position. */
  CHECKED: "mdc-switch--checked",
  /** Class used for a switch that is disabled. */
  DISABLED: "mdc-switch--disabled"
};
var strings34 = {
  /** Aria attribute for checked or unchecked state of switch */
  ARIA_CHECKED_ATTR: "aria-checked",
  /** A CSS selector used to locate the native HTML control for the switch.  */
  NATIVE_CONTROL_SELECTOR: ".mdc-switch__native-control",
  /** A CSS selector used to locate the ripple surface element for the switch. */
  RIPPLE_SURFACE_SELECTOR: ".mdc-switch__thumb-underlay"
};

// node_modules/@material/switch/deprecated/foundation.js
var MDCSwitchFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSwitchFoundation3, _super);
    function MDCSwitchFoundation3(adapter) {
      return _super.call(this, __assign(__assign({}, MDCSwitchFoundation3.defaultAdapter), adapter)) || this;
    }
    Object.defineProperty(MDCSwitchFoundation3, "strings", {
      /** The string constants used by the switch. */
      get: function() {
        return strings34;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation3, "cssClasses", {
      /** The CSS classes used by the switch. */
      get: function() {
        return cssClasses33;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation3, "defaultAdapter", {
      /** The default Adapter for the switch. */
      get: function() {
        return {
          addClass: function() {
            return void 0;
          },
          removeClass: function() {
            return void 0;
          },
          setNativeControlChecked: function() {
            return void 0;
          },
          setNativeControlDisabled: function() {
            return void 0;
          },
          setNativeControlAttr: function() {
            return void 0;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCSwitchFoundation3.prototype.setChecked = function(checked) {
      this.adapter.setNativeControlChecked(checked);
      this.updateAriaChecked(checked);
      this.updateCheckedStyling(checked);
    };
    MDCSwitchFoundation3.prototype.setDisabled = function(disabled) {
      this.adapter.setNativeControlDisabled(disabled);
      if (disabled) {
        this.adapter.addClass(cssClasses33.DISABLED);
      } else {
        this.adapter.removeClass(cssClasses33.DISABLED);
      }
    };
    MDCSwitchFoundation3.prototype.handleChange = function(evt) {
      var nativeControl = evt.target;
      this.updateAriaChecked(nativeControl.checked);
      this.updateCheckedStyling(nativeControl.checked);
    };
    MDCSwitchFoundation3.prototype.updateCheckedStyling = function(checked) {
      if (checked) {
        this.adapter.addClass(cssClasses33.CHECKED);
      } else {
        this.adapter.removeClass(cssClasses33.CHECKED);
      }
    };
    MDCSwitchFoundation3.prototype.updateAriaChecked = function(checked) {
      this.adapter.setNativeControlAttr(strings34.ARIA_CHECKED_ATTR, "" + !!checked);
    };
    return MDCSwitchFoundation3;
  }(MDCFoundation)
);

// node_modules/@material/switch/deprecated/component.js
var MDCSwitch = (
  /** @class */
  function(_super) {
    __extends(MDCSwitch3, _super);
    function MDCSwitch3() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.rippleSurface = _this.createRipple();
      return _this;
    }
    MDCSwitch3.attachTo = function(root) {
      return new MDCSwitch3(root);
    };
    MDCSwitch3.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.rippleSurface.destroy();
      this.nativeControl.removeEventListener("change", this.changeHandler);
    };
    MDCSwitch3.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.changeHandler = function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        (_a2 = _this.foundation).handleChange.apply(_a2, __spreadArray([], __read(args)));
      };
      this.nativeControl.addEventListener("change", this.changeHandler);
      this.checked = this.checked;
    };
    MDCSwitch3.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        addClass: function(className) {
          return _this.root.classList.add(className);
        },
        removeClass: function(className) {
          return _this.root.classList.remove(className);
        },
        setNativeControlChecked: function(checked) {
          return _this.nativeControl.checked = checked;
        },
        setNativeControlDisabled: function(disabled) {
          return _this.nativeControl.disabled = disabled;
        },
        setNativeControlAttr: function(attr, value) {
          _this.nativeControl.setAttribute(attr, value);
        }
      };
      return new MDCSwitchFoundation(adapter);
    };
    Object.defineProperty(MDCSwitch3.prototype, "ripple", {
      get: function() {
        return this.rippleSurface;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSwitch3.prototype, "checked", {
      get: function() {
        return this.nativeControl.checked;
      },
      set: function(checked) {
        this.foundation.setChecked(checked);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(MDCSwitch3.prototype, "disabled", {
      get: function() {
        return this.nativeControl.disabled;
      },
      set: function(disabled) {
        this.foundation.setDisabled(disabled);
      },
      enumerable: false,
      configurable: true
    });
    MDCSwitch3.prototype.createRipple = function() {
      var _this = this;
      var RIPPLE_SURFACE_SELECTOR = MDCSwitchFoundation.strings.RIPPLE_SURFACE_SELECTOR;
      var rippleSurface = this.root.querySelector(RIPPLE_SURFACE_SELECTOR);
      var adapter = __assign(__assign({}, MDCRipple.createAdapter(this)), { addClass: function(className) {
        return rippleSurface.classList.add(className);
      }, computeBoundingRect: function() {
        return rippleSurface.getBoundingClientRect();
      }, deregisterInteractionHandler: function(evtType, handler) {
        _this.nativeControl.removeEventListener(evtType, handler, applyPassive());
      }, isSurfaceActive: function() {
        return matches(_this.nativeControl, ":active");
      }, isUnbounded: function() {
        return true;
      }, registerInteractionHandler: function(evtType, handler) {
        _this.nativeControl.addEventListener(evtType, handler, applyPassive());
      }, removeClass: function(className) {
        rippleSurface.classList.remove(className);
      }, updateCssVariable: function(varName, value) {
        rippleSurface.style.setProperty(varName, value);
      } });
      return new MDCRipple(this.root, new MDCRippleFoundation(adapter));
    };
    Object.defineProperty(MDCSwitch3.prototype, "nativeControl", {
      get: function() {
        var NATIVE_CONTROL_SELECTOR = MDCSwitchFoundation.strings.NATIVE_CONTROL_SELECTOR;
        return this.root.querySelector(NATIVE_CONTROL_SELECTOR);
      },
      enumerable: false,
      configurable: true
    });
    return MDCSwitch3;
  }(MDCComponent)
);

// node_modules/@material/switch/adapter.js
var import_dist1792 = __toESM(require_dist());
var import_dist1793 = __toESM(require_dist2());
var import_dist1794 = __toESM(require_dist3());

// node_modules/@material/switch/component.js
var import_dist1807 = __toESM(require_dist());
var import_dist1808 = __toESM(require_dist2());
var import_dist1809 = __toESM(require_dist3());

// node_modules/@material/switch/constants.js
var import_dist1795 = __toESM(require_dist());
var import_dist1796 = __toESM(require_dist2());
var import_dist1797 = __toESM(require_dist3());
var CssClasses;
(function(CssClasses3) {
  CssClasses3["PROCESSING"] = "mdc-switch--processing";
  CssClasses3["SELECTED"] = "mdc-switch--selected";
  CssClasses3["UNSELECTED"] = "mdc-switch--unselected";
})(CssClasses || (CssClasses = {}));
var Selectors;
(function(Selectors2) {
  Selectors2["RIPPLE"] = ".mdc-switch__ripple";
})(Selectors || (Selectors = {}));

// node_modules/@material/switch/foundation.js
var import_dist1804 = __toESM(require_dist());
var import_dist1805 = __toESM(require_dist2());
var import_dist1806 = __toESM(require_dist3());

// node_modules/@material/base/observer-foundation.js
var import_dist1801 = __toESM(require_dist());
var import_dist1802 = __toESM(require_dist2());
var import_dist1803 = __toESM(require_dist3());

// node_modules/@material/base/observer.js
var import_dist1798 = __toESM(require_dist());
var import_dist1799 = __toESM(require_dist2());
var import_dist1800 = __toESM(require_dist3());
function observeProperty(target, property, observer) {
  var targetObservers = installObserver(target, property);
  var observers = targetObservers.getObservers(property);
  observers.push(observer);
  return function() {
    observers.splice(observers.indexOf(observer), 1);
  };
}
var allTargetObservers = /* @__PURE__ */ new WeakMap();
function installObserver(target, property) {
  var observersMap = /* @__PURE__ */ new Map();
  if (!allTargetObservers.has(target)) {
    allTargetObservers.set(target, {
      isEnabled: true,
      getObservers: function(key) {
        var observers = observersMap.get(key) || [];
        if (!observersMap.has(key)) {
          observersMap.set(key, observers);
        }
        return observers;
      },
      installedProperties: /* @__PURE__ */ new Set()
    });
  }
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers.installedProperties.has(property)) {
    return targetObservers;
  }
  var descriptor = getDescriptor(target, property) || {
    configurable: true,
    enumerable: true,
    value: target[property],
    writable: true
  };
  var observedDescriptor = __assign({}, descriptor);
  var descGet = descriptor.get, descSet = descriptor.set;
  if ("value" in descriptor) {
    delete observedDescriptor.value;
    delete observedDescriptor.writable;
    var value_1 = descriptor.value;
    descGet = function() {
      return value_1;
    };
    if (descriptor.writable) {
      descSet = function(newValue) {
        value_1 = newValue;
      };
    }
  }
  if (descGet) {
    observedDescriptor.get = function() {
      return descGet.call(this);
    };
  }
  if (descSet) {
    observedDescriptor.set = function(newValue) {
      var e_4, _a2;
      var previous = descGet ? descGet.call(this) : newValue;
      descSet.call(this, newValue);
      if (targetObservers.isEnabled && (!descGet || newValue !== previous)) {
        try {
          for (var _b = __values(targetObservers.getObservers(property)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer(newValue, previous);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      }
    };
  }
  targetObservers.installedProperties.add(property);
  Object.defineProperty(target, property, observedDescriptor);
  return targetObservers;
}
function getDescriptor(target, property) {
  var descriptorTarget = target;
  var descriptor;
  while (descriptorTarget) {
    descriptor = Object.getOwnPropertyDescriptor(descriptorTarget, property);
    if (descriptor) {
      break;
    }
    descriptorTarget = Object.getPrototypeOf(descriptorTarget);
  }
  return descriptor;
}
function setObserversEnabled(target, enabled) {
  var targetObservers = allTargetObservers.get(target);
  if (targetObservers) {
    targetObservers.isEnabled = enabled;
  }
}

// node_modules/@material/base/observer-foundation.js
var MDCObserverFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCObserverFoundation2, _super);
    function MDCObserverFoundation2(adapter) {
      var _this = _super.call(this, adapter) || this;
      _this.unobserves = /* @__PURE__ */ new Set();
      return _this;
    }
    MDCObserverFoundation2.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.unobserve();
    };
    MDCObserverFoundation2.prototype.observe = function(target, observers) {
      var e_1, _a2;
      var _this = this;
      var cleanup = [];
      try {
        for (var _b = __values(Object.keys(observers)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var property = _c.value;
          var observer = observers[property].bind(this);
          cleanup.push(this.observeProperty(target, property, observer));
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      var unobserve = function() {
        var e_2, _a3;
        try {
          for (var cleanup_1 = __values(cleanup), cleanup_1_1 = cleanup_1.next(); !cleanup_1_1.done; cleanup_1_1 = cleanup_1.next()) {
            var cleanupFn = cleanup_1_1.value;
            cleanupFn();
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (cleanup_1_1 && !cleanup_1_1.done && (_a3 = cleanup_1.return)) _a3.call(cleanup_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
        _this.unobserves.delete(unobserve);
      };
      this.unobserves.add(unobserve);
      return unobserve;
    };
    MDCObserverFoundation2.prototype.observeProperty = function(target, property, observer) {
      return observeProperty(target, property, observer);
    };
    MDCObserverFoundation2.prototype.setObserversEnabled = function(target, enabled) {
      setObserversEnabled(target, enabled);
    };
    MDCObserverFoundation2.prototype.unobserve = function() {
      var e_3, _a2;
      try {
        for (var _b = __values(__spreadArray([], __read(this.unobserves))), _c = _b.next(); !_c.done; _c = _b.next()) {
          var unobserve = _c.value;
          unobserve();
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
    };
    return MDCObserverFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/switch/foundation.js
var MDCSwitchFoundation2 = (
  /** @class */
  function(_super) {
    __extends(MDCSwitchFoundation3, _super);
    function MDCSwitchFoundation3(adapter) {
      var _this = _super.call(this, adapter) || this;
      _this.handleClick = _this.handleClick.bind(_this);
      return _this;
    }
    MDCSwitchFoundation3.prototype.init = function() {
      this.observe(this.adapter.state, {
        disabled: this.stopProcessingIfDisabled,
        processing: this.stopProcessingIfDisabled
      });
    };
    MDCSwitchFoundation3.prototype.handleClick = function() {
      if (this.adapter.state.disabled) {
        return;
      }
      this.adapter.state.selected = !this.adapter.state.selected;
    };
    MDCSwitchFoundation3.prototype.stopProcessingIfDisabled = function() {
      if (this.adapter.state.disabled) {
        this.adapter.state.processing = false;
      }
    };
    return MDCSwitchFoundation3;
  }(MDCObserverFoundation)
);
var MDCSwitchRenderFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCSwitchRenderFoundation2, _super);
    function MDCSwitchRenderFoundation2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCSwitchRenderFoundation2.prototype.init = function() {
      _super.prototype.init.call(this);
      this.observe(this.adapter.state, {
        disabled: this.onDisabledChange,
        processing: this.onProcessingChange,
        selected: this.onSelectedChange
      });
    };
    MDCSwitchRenderFoundation2.prototype.initFromDOM = function() {
      this.setObserversEnabled(this.adapter.state, false);
      this.adapter.state.selected = this.adapter.hasClass(CssClasses.SELECTED);
      this.onSelectedChange();
      this.adapter.state.disabled = this.adapter.isDisabled();
      this.adapter.state.processing = this.adapter.hasClass(CssClasses.PROCESSING);
      this.setObserversEnabled(this.adapter.state, true);
      this.stopProcessingIfDisabled();
    };
    MDCSwitchRenderFoundation2.prototype.onDisabledChange = function() {
      this.adapter.setDisabled(this.adapter.state.disabled);
    };
    MDCSwitchRenderFoundation2.prototype.onProcessingChange = function() {
      this.toggleClass(this.adapter.state.processing, CssClasses.PROCESSING);
    };
    MDCSwitchRenderFoundation2.prototype.onSelectedChange = function() {
      this.adapter.setAriaChecked(String(this.adapter.state.selected));
      this.toggleClass(this.adapter.state.selected, CssClasses.SELECTED);
      this.toggleClass(!this.adapter.state.selected, CssClasses.UNSELECTED);
    };
    MDCSwitchRenderFoundation2.prototype.toggleClass = function(addClass, className) {
      if (addClass) {
        this.adapter.addClass(className);
      } else {
        this.adapter.removeClass(className);
      }
    };
    return MDCSwitchRenderFoundation2;
  }(MDCSwitchFoundation2)
);

// node_modules/@material/switch/component.js
var MDCSwitch2 = (
  /** @class */
  function(_super) {
    __extends(MDCSwitch3, _super);
    function MDCSwitch3(root, foundation) {
      var _this = _super.call(this, root, foundation) || this;
      _this.root = root;
      return _this;
    }
    MDCSwitch3.attachTo = function(root) {
      return new MDCSwitch3(root);
    };
    MDCSwitch3.prototype.initialize = function() {
      this.ripple = new MDCRipple(this.root, this.createRippleFoundation());
    };
    MDCSwitch3.prototype.initialSyncWithDOM = function() {
      var rippleElement = this.root.querySelector(Selectors.RIPPLE);
      if (!rippleElement) {
        throw new Error("Switch " + Selectors.RIPPLE + " element is required.");
      }
      this.rippleElement = rippleElement;
      this.root.addEventListener("click", this.foundation.handleClick);
      this.foundation.initFromDOM();
    };
    MDCSwitch3.prototype.destroy = function() {
      _super.prototype.destroy.call(this);
      this.ripple.destroy();
      this.root.removeEventListener("click", this.foundation.handleClick);
    };
    MDCSwitch3.prototype.getDefaultFoundation = function() {
      return new MDCSwitchRenderFoundation(this.createAdapter());
    };
    MDCSwitch3.prototype.createAdapter = function() {
      var _this = this;
      return {
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        isDisabled: function() {
          return _this.root.disabled;
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        setAriaChecked: function(ariaChecked) {
          return _this.root.setAttribute("aria-checked", ariaChecked);
        },
        setDisabled: function(disabled) {
          _this.root.disabled = disabled;
        },
        state: this
      };
    };
    MDCSwitch3.prototype.createRippleFoundation = function() {
      return new MDCRippleFoundation(this.createRippleAdapter());
    };
    MDCSwitch3.prototype.createRippleAdapter = function() {
      var _this = this;
      return __assign(__assign({}, MDCRipple.createAdapter(this)), { computeBoundingRect: function() {
        return _this.rippleElement.getBoundingClientRect();
      }, isUnbounded: function() {
        return true;
      } });
    };
    return MDCSwitch3;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/switch/dist/mdc-switch.html?raw
var mdc_switch_default = `<template class="mdc-switch \${selected ? 'mdc-switch--selected' : ''} \${disabled ? 'mdc-switch--disabled' : ''}"
  type="button" role="switch" aria-checked="\${selected ? 'true' : 'false'}"
  mdc-ripple="no-class.bind: true; unbounded.bind: true; surface.bind: rippleElement" click.trigger="handleClick()">
  <div class="mdc-switch__track"></div>
  <div class="mdc-switch__handle-track">
    <div class="mdc-switch__handle">
      <div class="mdc-switch__shadow">
        <div class="mdc-elevation-overlay"></div>
      </div>
      <div class="mdc-switch__ripple" ref="rippleElement"></div>
      <div class="mdc-switch__icons">
        <svg class="mdc-switch__icon mdc-switch__icon--on" viewBox="0 0 24 24">
          <path d="M19.69,5.23L8.96,15.96l-4.23-4.23L2.96,13.5l6,6L21.46,7L19.69,5.23z" />
        </svg>
        <svg class="mdc-switch__icon mdc-switch__icon--off" viewBox="0 0 24 24">
          <path d="M20 13H4v-2h16v2z" />
        </svg>
      </div>
    </div>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/switch/dist/mdc-switch.js
var switchId = 0;
var MdcSwitch = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-switch", template: mdc_switch_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent33;
  var MdcSwitch2 = _classThis = class extends _classSuper {
    constructor(root) {
      super(root);
      this.root = root;
      defineMdcSwitchElementApis(this.root);
      this.root.id = `mdc-switch-${++switchId}`;
    }
    initialSyncWithDOM() {
      var _a2;
      if (this.selected) {
        this.root.classList.add("mdc-switch--selected");
        this.root.setAttribute("aria-checked", "true");
      }
      (_a2 = this.foundation) == null ? void 0 : _a2.initFromDOM();
    }
    getDefaultFoundation() {
      return new MDCSwitchRenderFoundation(this.createAdapter());
    }
    createAdapter() {
      return {
        addClass: (className) => {
          this.root.classList.add(className);
        },
        hasClass: (className) => this.root.classList.contains(className),
        isDisabled: () => this.root.disabled,
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        setAriaChecked: (ariaChecked) => this.root.setAttribute("aria-checked", ariaChecked),
        setDisabled: (disabled) => {
          this.root.disabled = disabled;
        },
        state: this
      };
    }
    handleClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleClick();
      this.emit("change", {}, true);
    }
  };
  __setFunctionName(_classThis, "MdcSwitch");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcSwitch2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcSwitch2 = _classThis;
})();
function defineMdcSwitchElementApis(element) {
  Object.defineProperties(element, {
    tagName: {
      get() {
        return "MDC-SWITCH";
      }
    },
    selected: {
      get() {
        return CustomElement.for(this).viewModel.selected;
      },
      set(value) {
        CustomElement.for(this).viewModel.selected = value;
      },
      configurable: true
    }
  });
}

// node_modules/@aurelia-mdc-web/switch/dist/enhance-mdc-switch.js
var import_dist1816 = __toESM(require_dist());
var import_dist1817 = __toESM(require_dist2());
var import_dist1818 = __toESM(require_dist3());
var EnhanceMdcSwitch = (() => {
  let _classDecorators = [templateCompilerHooks];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var EnhanceMdcSwitch2 = _classThis = class {
    compiling(template) {
      template.innerHTML = template.innerHTML.replaceAll('mdc-switch=""', 'as-element="mdc-switch" mdc-switch-element');
    }
  };
  __setFunctionName(_classThis, "EnhanceMdcSwitch");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    EnhanceMdcSwitch2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return EnhanceMdcSwitch2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/switch/dist/index.js
var configured8 = false;
var SwitchConfiguration = {
  register(container) {
    if (configured8) {
      return container;
    } else {
      AppTask.creating(IContainer, (c) => {
        const attrMapper = c.get(IAttrMapper);
        const nodeObserverLocator = c.get(NodeObserverLocator);
        attrMapper.useTwoWay((el, property) => el.hasAttribute("mdc-switch-element") ? property === "selected" : false);
        nodeObserverLocator.useConfig("MDC-SWITCH", "selected", { events: ["change"] });
      }).register(container);
      configured8 = true;
      return container.register(MdcSwitch, RippleConfiguration, EnhanceMdcSwitch);
    }
  }
};

// node_modules/@aurelia-mdc-web/tooltip/dist/index.js
var import_dist1867 = __toESM(require_dist());
var import_dist1868 = __toESM(require_dist2());
var import_dist1869 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tooltip/dist/mdc-default-tooltip-configuration.js
var import_dist1822 = __toESM(require_dist());
var import_dist1823 = __toESM(require_dist2());
var import_dist1824 = __toESM(require_dist3());
var MdcDefaultTooltipConfiguration = class {
};

// node_modules/@aurelia-mdc-web/tooltip/dist/mdc-tooltip.js
var import_dist1861 = __toESM(require_dist());
var import_dist1862 = __toESM(require_dist2());
var import_dist1863 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1843 = __toESM(require_dist());
var import_dist1844 = __toESM(require_dist2());
var import_dist1845 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1828 = __toESM(require_dist());
var import_dist1829 = __toESM(require_dist2());
var import_dist1830 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1825 = __toESM(require_dist());
var import_dist1826 = __toESM(require_dist2());
var import_dist1827 = __toESM(require_dist3());
function number34(a) {
  return Number(a);
}
function booleanAttr34(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap34 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr34 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr34 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr34 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1831 = __toESM(require_dist());
var import_dist1832 = __toESM(require_dist2());
var import_dist1833 = __toESM(require_dist3());
var MdcPromisifyReference34 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1834 = __toESM(require_dist());
var import_dist1835 = __toESM(require_dist2());
var import_dist1836 = __toESM(require_dist3());
var MdcComponent34 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1837 = __toESM(require_dist());
var import_dist1838 = __toESM(require_dist2());
var import_dist1839 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tooltip/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1840 = __toESM(require_dist());
var import_dist1841 = __toESM(require_dist2());
var import_dist1842 = __toESM(require_dist3());

// node_modules/@material/tooltip/index.js
var import_dist1858 = __toESM(require_dist());
var import_dist1859 = __toESM(require_dist2());
var import_dist1860 = __toESM(require_dist3());

// node_modules/@material/tooltip/adapter.js
var import_dist1846 = __toESM(require_dist());
var import_dist1847 = __toESM(require_dist2());
var import_dist1848 = __toESM(require_dist3());

// node_modules/@material/tooltip/component.js
var import_dist1855 = __toESM(require_dist());
var import_dist1856 = __toESM(require_dist2());
var import_dist1857 = __toESM(require_dist3());

// node_modules/@material/tooltip/constants.js
var import_dist1849 = __toESM(require_dist());
var import_dist1850 = __toESM(require_dist2());
var import_dist1851 = __toESM(require_dist3());
var CssClasses2;
(function(CssClasses3) {
  CssClasses3["RICH"] = "mdc-tooltip--rich";
  CssClasses3["SHOWN"] = "mdc-tooltip--shown";
  CssClasses3["SHOWING"] = "mdc-tooltip--showing";
  CssClasses3["SHOWING_TRANSITION"] = "mdc-tooltip--showing-transition";
  CssClasses3["HIDE"] = "mdc-tooltip--hide";
  CssClasses3["HIDE_TRANSITION"] = "mdc-tooltip--hide-transition";
  CssClasses3["MULTILINE_TOOLTIP"] = "mdc-tooltip--multiline";
  CssClasses3["SURFACE"] = "mdc-tooltip__surface";
  CssClasses3["SURFACE_ANIMATION"] = "mdc-tooltip__surface-animation";
  CssClasses3["TOOLTIP_CARET_TOP"] = "mdc-tooltip__caret-surface-top";
  CssClasses3["TOOLTIP_CARET_BOTTOM"] = "mdc-tooltip__caret-surface-bottom";
})(CssClasses2 || (CssClasses2 = {}));
var numbers13 = {
  BOUNDED_ANCHOR_GAP: 4,
  UNBOUNDED_ANCHOR_GAP: 8,
  MIN_VIEWPORT_TOOLTIP_THRESHOLD: 8,
  HIDE_DELAY_MS: 600,
  SHOW_DELAY_MS: 500,
  // LINT.IfChange(tooltip-dimensions)
  MIN_HEIGHT: 24,
  MAX_WIDTH: 200,
  // LINT.ThenChange(_tooltip.scss:tooltip-dimensions)
  CARET_INDENTATION: 24,
  // LINT.IfChange(tooltip-anim-scale)
  ANIMATION_SCALE: 0.8
  // LINT.ThenChange(_tooltip.scss:tooltip-anim-scale)
};
var attributes4 = {
  ARIA_EXPANDED: "aria-expanded",
  ARIA_HASPOPUP: "aria-haspopup",
  PERSISTENT: "data-mdc-tooltip-persistent",
  SCROLLABLE_ANCESTOR: "tooltip-scrollable-ancestor",
  HAS_CARET: "data-mdc-tooltip-has-caret"
};
var events6 = {
  HIDDEN: "MDCTooltip:hidden"
};
var XPosition;
(function(XPosition2) {
  XPosition2[XPosition2["DETECTED"] = 0] = "DETECTED";
  XPosition2[XPosition2["START"] = 1] = "START";
  XPosition2[XPosition2["CENTER"] = 2] = "CENTER";
  XPosition2[XPosition2["END"] = 3] = "END";
})(XPosition || (XPosition = {}));
var YPosition;
(function(YPosition2) {
  YPosition2[YPosition2["DETECTED"] = 0] = "DETECTED";
  YPosition2[YPosition2["ABOVE"] = 1] = "ABOVE";
  YPosition2[YPosition2["BELOW"] = 2] = "BELOW";
})(YPosition || (YPosition = {}));
var AnchorBoundaryType;
(function(AnchorBoundaryType2) {
  AnchorBoundaryType2[AnchorBoundaryType2["BOUNDED"] = 0] = "BOUNDED";
  AnchorBoundaryType2[AnchorBoundaryType2["UNBOUNDED"] = 1] = "UNBOUNDED";
})(AnchorBoundaryType || (AnchorBoundaryType = {}));
var strings35 = {
  LEFT: "left",
  RIGHT: "right",
  CENTER: "center",
  TOP: "top",
  BOTTOM: "bottom"
};
var PositionWithCaret;
(function(PositionWithCaret2) {
  PositionWithCaret2[PositionWithCaret2["DETECTED"] = 0] = "DETECTED";
  PositionWithCaret2[PositionWithCaret2["ABOVE_START"] = 1] = "ABOVE_START";
  PositionWithCaret2[PositionWithCaret2["ABOVE_CENTER"] = 2] = "ABOVE_CENTER";
  PositionWithCaret2[PositionWithCaret2["ABOVE_END"] = 3] = "ABOVE_END";
  PositionWithCaret2[PositionWithCaret2["TOP_SIDE_START"] = 4] = "TOP_SIDE_START";
  PositionWithCaret2[PositionWithCaret2["CENTER_SIDE_START"] = 5] = "CENTER_SIDE_START";
  PositionWithCaret2[PositionWithCaret2["BOTTOM_SIDE_START"] = 6] = "BOTTOM_SIDE_START";
  PositionWithCaret2[PositionWithCaret2["TOP_SIDE_END"] = 7] = "TOP_SIDE_END";
  PositionWithCaret2[PositionWithCaret2["CENTER_SIDE_END"] = 8] = "CENTER_SIDE_END";
  PositionWithCaret2[PositionWithCaret2["BOTTOM_SIDE_END"] = 9] = "BOTTOM_SIDE_END";
  PositionWithCaret2[PositionWithCaret2["BELOW_START"] = 10] = "BELOW_START";
  PositionWithCaret2[PositionWithCaret2["BELOW_CENTER"] = 11] = "BELOW_CENTER";
  PositionWithCaret2[PositionWithCaret2["BELOW_END"] = 12] = "BELOW_END";
})(PositionWithCaret || (PositionWithCaret = {}));
var YPositionWithCaret;
(function(YPositionWithCaret2) {
  YPositionWithCaret2[YPositionWithCaret2["ABOVE"] = 1] = "ABOVE";
  YPositionWithCaret2[YPositionWithCaret2["BELOW"] = 2] = "BELOW";
  YPositionWithCaret2[YPositionWithCaret2["SIDE_TOP"] = 3] = "SIDE_TOP";
  YPositionWithCaret2[YPositionWithCaret2["SIDE_CENTER"] = 4] = "SIDE_CENTER";
  YPositionWithCaret2[YPositionWithCaret2["SIDE_BOTTOM"] = 5] = "SIDE_BOTTOM";
})(YPositionWithCaret || (YPositionWithCaret = {}));
var XPositionWithCaret;
(function(XPositionWithCaret2) {
  XPositionWithCaret2[XPositionWithCaret2["START"] = 1] = "START";
  XPositionWithCaret2[XPositionWithCaret2["CENTER"] = 2] = "CENTER";
  XPositionWithCaret2[XPositionWithCaret2["END"] = 3] = "END";
  XPositionWithCaret2[XPositionWithCaret2["SIDE_START"] = 4] = "SIDE_START";
  XPositionWithCaret2[XPositionWithCaret2["SIDE_END"] = 5] = "SIDE_END";
})(XPositionWithCaret || (XPositionWithCaret = {}));

// node_modules/@material/tooltip/foundation.js
var import_dist1852 = __toESM(require_dist());
var import_dist1853 = __toESM(require_dist2());
var import_dist1854 = __toESM(require_dist3());
var RICH = CssClasses2.RICH;
var SHOWN = CssClasses2.SHOWN;
var SHOWING = CssClasses2.SHOWING;
var SHOWING_TRANSITION = CssClasses2.SHOWING_TRANSITION;
var HIDE = CssClasses2.HIDE;
var HIDE_TRANSITION = CssClasses2.HIDE_TRANSITION;
var MULTILINE_TOOLTIP = CssClasses2.MULTILINE_TOOLTIP;
var AnimationKeys4;
(function(AnimationKeys5) {
  AnimationKeys5["POLL_ANCHOR"] = "poll_anchor";
})(AnimationKeys4 || (AnimationKeys4 = {}));
var HAS_WINDOW2 = typeof window !== "undefined";
var MDCTooltipFoundation = (
  /** @class */
  function(_super) {
    __extends(MDCTooltipFoundation2, _super);
    function MDCTooltipFoundation2(adapter) {
      var _this = _super.call(this, __assign(__assign({}, MDCTooltipFoundation2.defaultAdapter), adapter)) || this;
      _this.tooltipShown = false;
      _this.anchorGap = numbers13.BOUNDED_ANCHOR_GAP;
      _this.xTooltipPos = XPosition.DETECTED;
      _this.yTooltipPos = YPosition.DETECTED;
      _this.tooltipPositionWithCaret = PositionWithCaret.DETECTED;
      _this.minViewportTooltipThreshold = numbers13.MIN_VIEWPORT_TOOLTIP_THRESHOLD;
      _this.hideDelayMs = numbers13.HIDE_DELAY_MS;
      _this.showDelayMs = numbers13.SHOW_DELAY_MS;
      _this.anchorRect = null;
      _this.parentRect = null;
      _this.frameId = null;
      _this.hideTimeout = null;
      _this.showTimeout = null;
      _this.addAncestorScrollEventListeners = new Array();
      _this.removeAncestorScrollEventListeners = new Array();
      _this.animFrame = new AnimationFrame();
      _this.anchorBlurHandler = function(evt) {
        _this.handleAnchorBlur(evt);
      };
      _this.documentClickHandler = function(evt) {
        _this.handleDocumentClick(evt);
      };
      _this.documentKeydownHandler = function(evt) {
        _this.handleKeydown(evt);
      };
      _this.tooltipMouseEnterHandler = function() {
        _this.handleTooltipMouseEnter();
      };
      _this.tooltipMouseLeaveHandler = function() {
        _this.handleTooltipMouseLeave();
      };
      _this.richTooltipFocusOutHandler = function(evt) {
        _this.handleRichTooltipFocusOut(evt);
      };
      _this.windowScrollHandler = function() {
        _this.handleWindowScrollEvent();
      };
      _this.windowResizeHandler = function() {
        _this.handleWindowChangeEvent();
      };
      return _this;
    }
    Object.defineProperty(MDCTooltipFoundation2, "defaultAdapter", {
      get: function() {
        return {
          getAttribute: function() {
            return null;
          },
          setAttribute: function() {
            return void 0;
          },
          removeAttribute: function() {
            return void 0;
          },
          addClass: function() {
            return void 0;
          },
          hasClass: function() {
            return false;
          },
          removeClass: function() {
            return void 0;
          },
          getComputedStyleProperty: function() {
            return "";
          },
          setStyleProperty: function() {
            return void 0;
          },
          setSurfaceAnimationStyleProperty: function() {
            return void 0;
          },
          getViewportWidth: function() {
            return 0;
          },
          getViewportHeight: function() {
            return 0;
          },
          getTooltipSize: function() {
            return { width: 0, height: 0 };
          },
          getAnchorBoundingRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getParentBoundingRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          getAnchorAttribute: function() {
            return null;
          },
          setAnchorAttribute: function() {
            return null;
          },
          isRTL: function() {
            return false;
          },
          anchorContainsElement: function() {
            return false;
          },
          tooltipContainsElement: function() {
            return false;
          },
          focusAnchorElement: function() {
            return void 0;
          },
          registerEventHandler: function() {
            return void 0;
          },
          deregisterEventHandler: function() {
            return void 0;
          },
          registerAnchorEventHandler: function() {
            return void 0;
          },
          deregisterAnchorEventHandler: function() {
            return void 0;
          },
          registerDocumentEventHandler: function() {
            return void 0;
          },
          deregisterDocumentEventHandler: function() {
            return void 0;
          },
          registerWindowEventHandler: function() {
            return void 0;
          },
          deregisterWindowEventHandler: function() {
            return void 0;
          },
          notifyHidden: function() {
            return void 0;
          },
          getTooltipCaretBoundingRect: function() {
            return { top: 0, right: 0, bottom: 0, left: 0, width: 0, height: 0 };
          },
          setTooltipCaretStyle: function() {
            return void 0;
          },
          clearTooltipCaretStyles: function() {
            return void 0;
          },
          getActiveElement: function() {
            return null;
          }
        };
      },
      enumerable: false,
      configurable: true
    });
    MDCTooltipFoundation2.prototype.init = function() {
      this.richTooltip = this.adapter.hasClass(RICH);
      this.persistentTooltip = this.adapter.getAttribute(attributes4.PERSISTENT) === "true";
      this.interactiveTooltip = !!this.adapter.getAnchorAttribute(attributes4.ARIA_EXPANDED) && this.adapter.getAnchorAttribute(attributes4.ARIA_HASPOPUP) === "dialog";
      this.hasCaret = this.richTooltip && this.adapter.getAttribute(attributes4.HAS_CARET) === "true";
    };
    MDCTooltipFoundation2.prototype.isShown = function() {
      return this.tooltipShown;
    };
    MDCTooltipFoundation2.prototype.isRich = function() {
      return this.richTooltip;
    };
    MDCTooltipFoundation2.prototype.isPersistent = function() {
      return this.persistentTooltip;
    };
    MDCTooltipFoundation2.prototype.handleAnchorMouseEnter = function() {
      var _this = this;
      if (this.tooltipShown) {
        this.show();
      } else {
        this.clearHideTimeout();
        this.showTimeout = setTimeout(function() {
          _this.show();
        }, this.showDelayMs);
      }
    };
    MDCTooltipFoundation2.prototype.handleAnchorTouchstart = function() {
      var _this = this;
      this.showTimeout = setTimeout(function() {
        _this.show();
      }, this.showDelayMs);
      this.adapter.registerWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
    };
    MDCTooltipFoundation2.prototype.preventContextMenuOnLongTouch = function(evt) {
      evt.preventDefault();
    };
    MDCTooltipFoundation2.prototype.handleAnchorTouchend = function() {
      this.clearShowTimeout();
      if (!this.isShown()) {
        this.adapter.deregisterWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
      }
    };
    MDCTooltipFoundation2.prototype.handleAnchorFocus = function(evt) {
      var _this = this;
      var relatedTarget = evt.relatedTarget;
      var tooltipContainsRelatedTarget = relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(relatedTarget);
      if (tooltipContainsRelatedTarget) {
        return;
      }
      this.showTimeout = setTimeout(function() {
        _this.show();
      }, this.showDelayMs);
    };
    MDCTooltipFoundation2.prototype.handleAnchorMouseLeave = function() {
      var _this = this;
      this.clearShowTimeout();
      this.hideTimeout = setTimeout(function() {
        _this.hide();
      }, this.hideDelayMs);
    };
    MDCTooltipFoundation2.prototype.handleAnchorClick = function() {
      if (this.tooltipShown) {
        this.hide();
      } else {
        this.show();
      }
    };
    MDCTooltipFoundation2.prototype.handleDocumentClick = function(evt) {
      var anchorOrTooltipContainsTargetElement = evt.target instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.target) || this.adapter.tooltipContainsElement(evt.target));
      if (this.richTooltip && this.persistentTooltip && anchorOrTooltipContainsTargetElement) {
        return;
      }
      this.hide();
    };
    MDCTooltipFoundation2.prototype.handleKeydown = function(evt) {
      var key = normalizeKey(evt);
      if (key === KEY.ESCAPE) {
        var activeElement = this.adapter.getActiveElement();
        var tooltipContainsActiveElement = activeElement instanceof HTMLElement && this.adapter.tooltipContainsElement(activeElement);
        if (tooltipContainsActiveElement) {
          this.adapter.focusAnchorElement();
        }
        this.hide();
      }
    };
    MDCTooltipFoundation2.prototype.handleAnchorBlur = function(evt) {
      if (this.richTooltip) {
        var tooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && this.adapter.tooltipContainsElement(evt.relatedTarget);
        if (tooltipContainsRelatedTargetElement) {
          return;
        }
        if (evt.relatedTarget === null && this.interactiveTooltip) {
          return;
        }
      }
      this.hide();
    };
    MDCTooltipFoundation2.prototype.handleTooltipMouseEnter = function() {
      this.show();
    };
    MDCTooltipFoundation2.prototype.handleTooltipMouseLeave = function() {
      var _this = this;
      this.clearShowTimeout();
      this.hideTimeout = setTimeout(function() {
        _this.hide();
      }, this.hideDelayMs);
    };
    MDCTooltipFoundation2.prototype.handleRichTooltipFocusOut = function(evt) {
      var anchorOrTooltipContainsRelatedTargetElement = evt.relatedTarget instanceof HTMLElement && (this.adapter.anchorContainsElement(evt.relatedTarget) || this.adapter.tooltipContainsElement(evt.relatedTarget));
      if (anchorOrTooltipContainsRelatedTargetElement) {
        return;
      }
      if (evt.relatedTarget === null && this.interactiveTooltip) {
        return;
      }
      this.hide();
    };
    MDCTooltipFoundation2.prototype.handleWindowScrollEvent = function() {
      if (this.persistentTooltip) {
        this.handleWindowChangeEvent();
        return;
      }
      this.hide();
    };
    MDCTooltipFoundation2.prototype.handleWindowChangeEvent = function() {
      var _this = this;
      this.animFrame.request(AnimationKeys4.POLL_ANCHOR, function() {
        _this.repositionTooltipOnAnchorMove();
      });
    };
    MDCTooltipFoundation2.prototype.show = function() {
      var e_1, _a2;
      var _this = this;
      this.clearHideTimeout();
      this.clearShowTimeout();
      if (this.tooltipShown) {
        return;
      }
      this.tooltipShown = true;
      this.adapter.removeAttribute("aria-hidden");
      if (this.richTooltip) {
        if (this.interactiveTooltip) {
          this.adapter.setAnchorAttribute("aria-expanded", "true");
        }
        this.adapter.registerEventHandler("focusout", this.richTooltipFocusOutHandler);
      }
      if (!this.persistentTooltip) {
        this.adapter.registerEventHandler("mouseenter", this.tooltipMouseEnterHandler);
        this.adapter.registerEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
      }
      this.adapter.removeClass(HIDE);
      this.adapter.addClass(SHOWING);
      if (this.isTooltipMultiline() && !this.richTooltip) {
        this.adapter.addClass(MULTILINE_TOOLTIP);
      }
      this.anchorRect = this.adapter.getAnchorBoundingRect();
      this.parentRect = this.adapter.getParentBoundingRect();
      this.richTooltip ? this.positionRichTooltip() : this.positionPlainTooltip();
      this.adapter.registerAnchorEventHandler("blur", this.anchorBlurHandler);
      this.adapter.registerDocumentEventHandler("click", this.documentClickHandler);
      this.adapter.registerDocumentEventHandler("keydown", this.documentKeydownHandler);
      this.adapter.registerWindowEventHandler("scroll", this.windowScrollHandler);
      this.adapter.registerWindowEventHandler("resize", this.windowResizeHandler);
      try {
        for (var _b = __values(this.addAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
          var fn = _c.value;
          fn();
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
      this.frameId = requestAnimationFrame(function() {
        _this.clearAllAnimationClasses();
        _this.adapter.addClass(SHOWN);
        _this.adapter.addClass(SHOWING_TRANSITION);
      });
    };
    MDCTooltipFoundation2.prototype.hide = function() {
      var e_2, _a2;
      this.clearHideTimeout();
      this.clearShowTimeout();
      if (!this.tooltipShown) {
        return;
      }
      if (this.frameId) {
        cancelAnimationFrame(this.frameId);
      }
      this.tooltipShown = false;
      this.adapter.setAttribute("aria-hidden", "true");
      this.adapter.deregisterEventHandler("focusout", this.richTooltipFocusOutHandler);
      if (this.richTooltip) {
        if (this.interactiveTooltip) {
          this.adapter.setAnchorAttribute("aria-expanded", "false");
        }
      }
      if (!this.persistentTooltip) {
        this.adapter.deregisterEventHandler("mouseenter", this.tooltipMouseEnterHandler);
        this.adapter.deregisterEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
      }
      this.clearAllAnimationClasses();
      this.adapter.addClass(HIDE);
      this.adapter.addClass(HIDE_TRANSITION);
      this.adapter.removeClass(SHOWN);
      this.adapter.deregisterAnchorEventHandler("blur", this.anchorBlurHandler);
      this.adapter.deregisterDocumentEventHandler("click", this.documentClickHandler);
      this.adapter.deregisterDocumentEventHandler("keydown", this.documentKeydownHandler);
      this.adapter.deregisterWindowEventHandler("scroll", this.windowScrollHandler);
      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
      this.adapter.deregisterWindowEventHandler("contextmenu", this.preventContextMenuOnLongTouch);
      try {
        for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
          var fn = _c.value;
          fn();
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }
    };
    MDCTooltipFoundation2.prototype.handleTransitionEnd = function() {
      var isHidingTooltip = this.adapter.hasClass(HIDE);
      this.adapter.removeClass(SHOWING);
      this.adapter.removeClass(SHOWING_TRANSITION);
      this.adapter.removeClass(HIDE);
      this.adapter.removeClass(HIDE_TRANSITION);
      if (isHidingTooltip && this.showTimeout === null) {
        this.adapter.notifyHidden();
      }
    };
    MDCTooltipFoundation2.prototype.clearAllAnimationClasses = function() {
      this.adapter.removeClass(SHOWING_TRANSITION);
      this.adapter.removeClass(HIDE_TRANSITION);
    };
    MDCTooltipFoundation2.prototype.setTooltipPosition = function(position) {
      var xPos = position.xPos, yPos = position.yPos, withCaretPos = position.withCaretPos;
      if (this.hasCaret && withCaretPos) {
        this.tooltipPositionWithCaret = withCaretPos;
        return;
      }
      if (xPos) {
        this.xTooltipPos = xPos;
      }
      if (yPos) {
        this.yTooltipPos = yPos;
      }
    };
    MDCTooltipFoundation2.prototype.setAnchorBoundaryType = function(type) {
      if (type === AnchorBoundaryType.UNBOUNDED) {
        this.anchorGap = numbers13.UNBOUNDED_ANCHOR_GAP;
      } else {
        this.anchorGap = numbers13.BOUNDED_ANCHOR_GAP;
      }
    };
    MDCTooltipFoundation2.prototype.setShowDelay = function(delayMs) {
      this.showDelayMs = delayMs;
    };
    MDCTooltipFoundation2.prototype.setHideDelay = function(delayMs) {
      this.hideDelayMs = delayMs;
    };
    MDCTooltipFoundation2.prototype.isTooltipMultiline = function() {
      var tooltipSize = this.adapter.getTooltipSize();
      return tooltipSize.height > numbers13.MIN_HEIGHT && tooltipSize.width >= numbers13.MAX_WIDTH;
    };
    MDCTooltipFoundation2.prototype.positionPlainTooltip = function() {
      var _a2 = this.calculateTooltipStyles(this.anchorRect), top = _a2.top, yTransformOrigin = _a2.yTransformOrigin, left = _a2.left, xTransformOrigin = _a2.xTransformOrigin;
      var transformProperty = HAS_WINDOW2 ? getCorrectPropertyName(window, "transform") : "transform";
      this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
      this.adapter.setStyleProperty("top", top + "px");
      this.adapter.setStyleProperty("left", left + "px");
    };
    MDCTooltipFoundation2.prototype.positionRichTooltip = function() {
      var _a2, _b, _c, _d;
      var width = this.adapter.getComputedStyleProperty("width");
      this.adapter.setStyleProperty("width", width);
      var _e = this.hasCaret ? this.calculateTooltipWithCaretStyles(this.anchorRect) : this.calculateTooltipStyles(this.anchorRect), top = _e.top, yTransformOrigin = _e.yTransformOrigin, left = _e.left, xTransformOrigin = _e.xTransformOrigin;
      var transformProperty = HAS_WINDOW2 ? getCorrectPropertyName(window, "transform") : "transform";
      this.adapter.setSurfaceAnimationStyleProperty(transformProperty + "-origin", xTransformOrigin + " " + yTransformOrigin);
      var leftAdjustment = left - ((_b = (_a2 = this.parentRect) === null || _a2 === void 0 ? void 0 : _a2.left) !== null && _b !== void 0 ? _b : 0);
      var topAdjustment = top - ((_d = (_c = this.parentRect) === null || _c === void 0 ? void 0 : _c.top) !== null && _d !== void 0 ? _d : 0);
      this.adapter.setStyleProperty("top", topAdjustment + "px");
      this.adapter.setStyleProperty("left", leftAdjustment + "px");
    };
    MDCTooltipFoundation2.prototype.calculateTooltipStyles = function(anchorRect) {
      if (!anchorRect) {
        return { top: 0, left: 0 };
      }
      var tooltipSize = this.adapter.getTooltipSize();
      var top = this.calculateYTooltipDistance(anchorRect, tooltipSize.height);
      var left = this.calculateXTooltipDistance(anchorRect, tooltipSize.width);
      return {
        top: top.distance,
        yTransformOrigin: top.yTransformOrigin,
        left: left.distance,
        xTransformOrigin: left.xTransformOrigin
      };
    };
    MDCTooltipFoundation2.prototype.calculateXTooltipDistance = function(anchorRect, tooltipWidth) {
      var isLTR = !this.adapter.isRTL();
      var startPos, endPos, centerPos;
      var startTransformOrigin, endTransformOrigin;
      if (this.richTooltip) {
        startPos = isLTR ? anchorRect.left - tooltipWidth : anchorRect.right;
        endPos = isLTR ? anchorRect.right : anchorRect.left - tooltipWidth;
        startTransformOrigin = isLTR ? strings35.RIGHT : strings35.LEFT;
        endTransformOrigin = isLTR ? strings35.LEFT : strings35.RIGHT;
      } else {
        startPos = isLTR ? anchorRect.left : anchorRect.right - tooltipWidth;
        endPos = isLTR ? anchorRect.right - tooltipWidth : anchorRect.left;
        centerPos = anchorRect.left + (anchorRect.width - tooltipWidth) / 2;
        startTransformOrigin = isLTR ? strings35.LEFT : strings35.RIGHT;
        endTransformOrigin = isLTR ? strings35.RIGHT : strings35.LEFT;
      }
      var positionOptions = this.richTooltip ? this.determineValidPositionOptions(startPos, endPos) : (
        // For plain tooltips, centerPos is defined
        this.determineValidPositionOptions(centerPos, startPos, endPos)
      );
      if (this.xTooltipPos === XPosition.START && positionOptions.has(startPos)) {
        return { distance: startPos, xTransformOrigin: startTransformOrigin };
      }
      if (this.xTooltipPos === XPosition.END && positionOptions.has(endPos)) {
        return { distance: endPos, xTransformOrigin: endTransformOrigin };
      }
      if (this.xTooltipPos === XPosition.CENTER && positionOptions.has(centerPos)) {
        return { distance: centerPos, xTransformOrigin: strings35.CENTER };
      }
      var possiblePositions = this.richTooltip ? [
        { distance: endPos, xTransformOrigin: endTransformOrigin },
        { distance: startPos, xTransformOrigin: startTransformOrigin }
      ] : [
        { distance: centerPos, xTransformOrigin: strings35.CENTER },
        { distance: startPos, xTransformOrigin: startTransformOrigin },
        { distance: endPos, xTransformOrigin: endTransformOrigin }
      ];
      var validPosition = possiblePositions.find(function(_a2) {
        var distance2 = _a2.distance;
        return positionOptions.has(distance2);
      });
      if (validPosition) {
        return validPosition;
      }
      if (anchorRect.left < 0) {
        return {
          distance: this.minViewportTooltipThreshold,
          xTransformOrigin: strings35.LEFT
        };
      } else {
        var viewportWidth = this.adapter.getViewportWidth();
        var distance = viewportWidth - (tooltipWidth + this.minViewportTooltipThreshold);
        return { distance, xTransformOrigin: strings35.RIGHT };
      }
    };
    MDCTooltipFoundation2.prototype.determineValidPositionOptions = function() {
      var e_3, _a2;
      var positions = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        positions[_i] = arguments[_i];
      }
      var posWithinThreshold = /* @__PURE__ */ new Set();
      var posWithinViewport = /* @__PURE__ */ new Set();
      try {
        for (var positions_1 = __values(positions), positions_1_1 = positions_1.next(); !positions_1_1.done; positions_1_1 = positions_1.next()) {
          var position = positions_1_1.value;
          if (this.positionHonorsViewportThreshold(position)) {
            posWithinThreshold.add(position);
          } else if (this.positionDoesntCollideWithViewport(position)) {
            posWithinViewport.add(position);
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (positions_1_1 && !positions_1_1.done && (_a2 = positions_1.return)) _a2.call(positions_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }
      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
    };
    MDCTooltipFoundation2.prototype.positionHonorsViewportThreshold = function(leftPos) {
      var viewportWidth = this.adapter.getViewportWidth();
      var tooltipWidth = this.adapter.getTooltipSize().width;
      return leftPos + tooltipWidth <= viewportWidth - this.minViewportTooltipThreshold && leftPos >= this.minViewportTooltipThreshold;
    };
    MDCTooltipFoundation2.prototype.positionDoesntCollideWithViewport = function(leftPos) {
      var viewportWidth = this.adapter.getViewportWidth();
      var tooltipWidth = this.adapter.getTooltipSize().width;
      return leftPos + tooltipWidth <= viewportWidth && leftPos >= 0;
    };
    MDCTooltipFoundation2.prototype.calculateYTooltipDistance = function(anchorRect, tooltipHeight) {
      var belowYPos = anchorRect.bottom + this.anchorGap;
      var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight);
      var yPositionOptions = this.determineValidYPositionOptions(aboveYPos, belowYPos);
      if (this.yTooltipPos === YPosition.ABOVE && yPositionOptions.has(aboveYPos)) {
        return { distance: aboveYPos, yTransformOrigin: strings35.BOTTOM };
      } else if (this.yTooltipPos === YPosition.BELOW && yPositionOptions.has(belowYPos)) {
        return { distance: belowYPos, yTransformOrigin: strings35.TOP };
      }
      if (yPositionOptions.has(belowYPos)) {
        return { distance: belowYPos, yTransformOrigin: strings35.TOP };
      }
      if (yPositionOptions.has(aboveYPos)) {
        return { distance: aboveYPos, yTransformOrigin: strings35.BOTTOM };
      }
      return { distance: belowYPos, yTransformOrigin: strings35.TOP };
    };
    MDCTooltipFoundation2.prototype.determineValidYPositionOptions = function(aboveAnchorPos, belowAnchorPos) {
      var posWithinThreshold = /* @__PURE__ */ new Set();
      var posWithinViewport = /* @__PURE__ */ new Set();
      if (this.yPositionHonorsViewportThreshold(aboveAnchorPos)) {
        posWithinThreshold.add(aboveAnchorPos);
      } else if (this.yPositionDoesntCollideWithViewport(aboveAnchorPos)) {
        posWithinViewport.add(aboveAnchorPos);
      }
      if (this.yPositionHonorsViewportThreshold(belowAnchorPos)) {
        posWithinThreshold.add(belowAnchorPos);
      } else if (this.yPositionDoesntCollideWithViewport(belowAnchorPos)) {
        posWithinViewport.add(belowAnchorPos);
      }
      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
    };
    MDCTooltipFoundation2.prototype.yPositionHonorsViewportThreshold = function(yPos) {
      var viewportHeight = this.adapter.getViewportHeight();
      var tooltipHeight = this.adapter.getTooltipSize().height;
      return yPos + tooltipHeight + this.minViewportTooltipThreshold <= viewportHeight && yPos >= this.minViewportTooltipThreshold;
    };
    MDCTooltipFoundation2.prototype.yPositionDoesntCollideWithViewport = function(yPos) {
      var viewportHeight = this.adapter.getViewportHeight();
      var tooltipHeight = this.adapter.getTooltipSize().height;
      return yPos + tooltipHeight <= viewportHeight && yPos >= 0;
    };
    MDCTooltipFoundation2.prototype.calculateTooltipWithCaretStyles = function(anchorRect) {
      this.adapter.clearTooltipCaretStyles();
      var caretSize = this.adapter.getTooltipCaretBoundingRect();
      if (!anchorRect || !caretSize) {
        return { position: PositionWithCaret.DETECTED, top: 0, left: 0 };
      }
      var caretWidth = caretSize.width / numbers13.ANIMATION_SCALE;
      var caretHeight = caretSize.height / numbers13.ANIMATION_SCALE / 2;
      var tooltipSize = this.adapter.getTooltipSize();
      var yOptions = this.calculateYWithCaretDistanceOptions(anchorRect, tooltipSize.height, { caretWidth, caretHeight });
      var xOptions = this.calculateXWithCaretDistanceOptions(anchorRect, tooltipSize.width, { caretWidth, caretHeight });
      var positionOptions = this.validateTooltipWithCaretDistances(yOptions, xOptions);
      if (positionOptions.size < 1) {
        positionOptions = this.generateBackupPositionOption(anchorRect, tooltipSize, { caretWidth, caretHeight });
      }
      var _a2 = this.determineTooltipWithCaretDistance(positionOptions), position = _a2.position, xDistance = _a2.xDistance, yDistance = _a2.yDistance;
      var _b = this.setCaretPositionStyles(position, { caretWidth, caretHeight }), yTransformOrigin = _b.yTransformOrigin, xTransformOrigin = _b.xTransformOrigin;
      return {
        yTransformOrigin,
        xTransformOrigin,
        top: yDistance,
        left: xDistance
      };
    };
    MDCTooltipFoundation2.prototype.calculateXWithCaretDistanceOptions = function(anchorRect, tooltipWidth, caretSize) {
      var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
      var isLTR = !this.adapter.isRTL();
      var anchorMidpoint = anchorRect.left + anchorRect.width / 2;
      var sideLeftAligned = anchorRect.left - (tooltipWidth + this.anchorGap + caretHeight);
      var sideRightAligned = anchorRect.right + this.anchorGap + caretHeight;
      var sideStartPos = isLTR ? sideLeftAligned : sideRightAligned;
      var sideEndPos = isLTR ? sideRightAligned : sideLeftAligned;
      var verticalLeftAligned = anchorMidpoint - (numbers13.CARET_INDENTATION + caretWidth / 2);
      var verticalRightAligned = anchorMidpoint - (tooltipWidth - numbers13.CARET_INDENTATION - caretWidth / 2);
      var verticalStartPos = isLTR ? verticalLeftAligned : verticalRightAligned;
      var verticalEndPos = isLTR ? verticalRightAligned : verticalLeftAligned;
      var verticalCenterPos = anchorMidpoint - tooltipWidth / 2;
      var possiblePositionsMap = /* @__PURE__ */ new Map([
        [XPositionWithCaret.START, verticalStartPos],
        [XPositionWithCaret.CENTER, verticalCenterPos],
        [XPositionWithCaret.END, verticalEndPos],
        [XPositionWithCaret.SIDE_END, sideEndPos],
        [XPositionWithCaret.SIDE_START, sideStartPos]
      ]);
      return possiblePositionsMap;
    };
    MDCTooltipFoundation2.prototype.calculateYWithCaretDistanceOptions = function(anchorRect, tooltipHeight, caretSize) {
      var caretWidth = caretSize.caretWidth, caretHeight = caretSize.caretHeight;
      var anchorMidpoint = anchorRect.top + anchorRect.height / 2;
      var belowYPos = anchorRect.bottom + this.anchorGap + caretHeight;
      var aboveYPos = anchorRect.top - (this.anchorGap + tooltipHeight + caretHeight);
      var sideTopYPos = anchorMidpoint - (numbers13.CARET_INDENTATION + caretWidth / 2);
      var sideCenterYPos = anchorMidpoint - tooltipHeight / 2;
      var sideBottomYPos = anchorMidpoint - (tooltipHeight - numbers13.CARET_INDENTATION - caretWidth / 2);
      var possiblePositionsMap = /* @__PURE__ */ new Map([
        [YPositionWithCaret.ABOVE, aboveYPos],
        [YPositionWithCaret.BELOW, belowYPos],
        [YPositionWithCaret.SIDE_TOP, sideTopYPos],
        [YPositionWithCaret.SIDE_CENTER, sideCenterYPos],
        [YPositionWithCaret.SIDE_BOTTOM, sideBottomYPos]
      ]);
      return possiblePositionsMap;
    };
    MDCTooltipFoundation2.prototype.repositionTooltipOnAnchorMove = function() {
      var newAnchorRect = this.adapter.getAnchorBoundingRect();
      if (!newAnchorRect || !this.anchorRect)
        return;
      if (newAnchorRect.top !== this.anchorRect.top || newAnchorRect.left !== this.anchorRect.left || newAnchorRect.height !== this.anchorRect.height || newAnchorRect.width !== this.anchorRect.width) {
        this.anchorRect = newAnchorRect;
        this.parentRect = this.adapter.getParentBoundingRect();
        this.richTooltip ? this.positionRichTooltip() : this.positionPlainTooltip();
      }
    };
    MDCTooltipFoundation2.prototype.validateTooltipWithCaretDistances = function(yOptions, xOptions) {
      var e_4, _a2, e_5, _b, e_6, _c;
      var posWithinThreshold = /* @__PURE__ */ new Map();
      var posWithinViewport = /* @__PURE__ */ new Map();
      var validMappings = /* @__PURE__ */ new Map([
        [
          YPositionWithCaret.ABOVE,
          [
            XPositionWithCaret.START,
            XPositionWithCaret.CENTER,
            XPositionWithCaret.END
          ]
        ],
        [
          YPositionWithCaret.BELOW,
          [
            XPositionWithCaret.START,
            XPositionWithCaret.CENTER,
            XPositionWithCaret.END
          ]
        ],
        [
          YPositionWithCaret.SIDE_TOP,
          [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
        ],
        [
          YPositionWithCaret.SIDE_CENTER,
          [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
        ],
        [
          YPositionWithCaret.SIDE_BOTTOM,
          [XPositionWithCaret.SIDE_START, XPositionWithCaret.SIDE_END]
        ]
      ]);
      try {
        for (var _d = __values(validMappings.keys()), _e = _d.next(); !_e.done; _e = _d.next()) {
          var y = _e.value;
          var yDistance = yOptions.get(y);
          if (this.yPositionHonorsViewportThreshold(yDistance)) {
            try {
              for (var _f = (e_5 = void 0, __values(validMappings.get(y))), _g = _f.next(); !_g.done; _g = _f.next()) {
                var x = _g.value;
                var xDistance = xOptions.get(x);
                if (this.positionHonorsViewportThreshold(xDistance)) {
                  var caretPositionName = this.caretPositionOptionsMapping(x, y);
                  posWithinThreshold.set(caretPositionName, { xDistance, yDistance });
                }
              }
            } catch (e_5_1) {
              e_5 = { error: e_5_1 };
            } finally {
              try {
                if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
              } finally {
                if (e_5) throw e_5.error;
              }
            }
          }
          if (this.yPositionDoesntCollideWithViewport(yDistance)) {
            try {
              for (var _h = (e_6 = void 0, __values(validMappings.get(y))), _j = _h.next(); !_j.done; _j = _h.next()) {
                var x = _j.value;
                var xDistance = xOptions.get(x);
                if (this.positionDoesntCollideWithViewport(xDistance)) {
                  var caretPositionName = this.caretPositionOptionsMapping(x, y);
                  posWithinViewport.set(caretPositionName, { xDistance, yDistance });
                }
              }
            } catch (e_6_1) {
              e_6 = { error: e_6_1 };
            } finally {
              try {
                if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
              } finally {
                if (e_6) throw e_6.error;
              }
            }
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_e && !_e.done && (_a2 = _d.return)) _a2.call(_d);
        } finally {
          if (e_4) throw e_4.error;
        }
      }
      return posWithinThreshold.size ? posWithinThreshold : posWithinViewport;
    };
    MDCTooltipFoundation2.prototype.generateBackupPositionOption = function(anchorRect, tooltipSize, caretSize) {
      var isLTR = !this.adapter.isRTL();
      var xDistance;
      var xPos;
      if (anchorRect.left < 0) {
        xDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
        xPos = isLTR ? XPositionWithCaret.END : XPositionWithCaret.START;
      } else {
        var viewportWidth = this.adapter.getViewportWidth();
        xDistance = viewportWidth - (tooltipSize.width + this.minViewportTooltipThreshold + caretSize.caretHeight);
        xPos = isLTR ? XPositionWithCaret.START : XPositionWithCaret.END;
      }
      var yDistance;
      var yPos;
      if (anchorRect.top < 0) {
        yDistance = this.minViewportTooltipThreshold + caretSize.caretHeight;
        yPos = YPositionWithCaret.BELOW;
      } else {
        var viewportHeight = this.adapter.getViewportHeight();
        yDistance = viewportHeight - (tooltipSize.height + this.minViewportTooltipThreshold + caretSize.caretHeight);
        yPos = YPositionWithCaret.ABOVE;
      }
      var caretPositionName = this.caretPositionOptionsMapping(xPos, yPos);
      return /* @__PURE__ */ new Map([[caretPositionName, { xDistance, yDistance }]]);
    };
    MDCTooltipFoundation2.prototype.determineTooltipWithCaretDistance = function(options) {
      if (options.has(this.tooltipPositionWithCaret)) {
        var tooltipPos = options.get(this.tooltipPositionWithCaret);
        return {
          position: this.tooltipPositionWithCaret,
          xDistance: tooltipPos.xDistance,
          yDistance: tooltipPos.yDistance
        };
      }
      var orderPref = [
        PositionWithCaret.ABOVE_START,
        PositionWithCaret.ABOVE_CENTER,
        PositionWithCaret.ABOVE_END,
        PositionWithCaret.TOP_SIDE_START,
        PositionWithCaret.CENTER_SIDE_START,
        PositionWithCaret.BOTTOM_SIDE_START,
        PositionWithCaret.TOP_SIDE_END,
        PositionWithCaret.CENTER_SIDE_END,
        PositionWithCaret.BOTTOM_SIDE_END,
        PositionWithCaret.BELOW_START,
        PositionWithCaret.BELOW_CENTER,
        PositionWithCaret.BELOW_END
      ];
      var validPosition = orderPref.find(function(pos2) {
        return options.has(pos2);
      });
      var pos = options.get(validPosition);
      return {
        position: validPosition,
        xDistance: pos.xDistance,
        yDistance: pos.yDistance
      };
    };
    MDCTooltipFoundation2.prototype.caretPositionOptionsMapping = function(xPos, yPos) {
      switch (yPos) {
        case YPositionWithCaret.ABOVE:
          if (xPos === XPositionWithCaret.START) {
            return PositionWithCaret.ABOVE_START;
          } else if (xPos === XPositionWithCaret.CENTER) {
            return PositionWithCaret.ABOVE_CENTER;
          } else if (xPos === XPositionWithCaret.END) {
            return PositionWithCaret.ABOVE_END;
          }
          break;
        case YPositionWithCaret.BELOW:
          if (xPos === XPositionWithCaret.START) {
            return PositionWithCaret.BELOW_START;
          } else if (xPos === XPositionWithCaret.CENTER) {
            return PositionWithCaret.BELOW_CENTER;
          } else if (xPos === XPositionWithCaret.END) {
            return PositionWithCaret.BELOW_END;
          }
          break;
        case YPositionWithCaret.SIDE_TOP:
          if (xPos === XPositionWithCaret.SIDE_START) {
            return PositionWithCaret.TOP_SIDE_START;
          } else if (xPos === XPositionWithCaret.SIDE_END) {
            return PositionWithCaret.TOP_SIDE_END;
          }
          break;
        case YPositionWithCaret.SIDE_CENTER:
          if (xPos === XPositionWithCaret.SIDE_START) {
            return PositionWithCaret.CENTER_SIDE_START;
          } else if (xPos === XPositionWithCaret.SIDE_END) {
            return PositionWithCaret.CENTER_SIDE_END;
          }
          break;
        case YPositionWithCaret.SIDE_BOTTOM:
          if (xPos === XPositionWithCaret.SIDE_START) {
            return PositionWithCaret.BOTTOM_SIDE_START;
          } else if (xPos === XPositionWithCaret.SIDE_END) {
            return PositionWithCaret.BOTTOM_SIDE_END;
          }
          break;
        default:
          break;
      }
      throw new Error("MDCTooltipFoundation: Invalid caret position of " + xPos + ", " + yPos);
    };
    MDCTooltipFoundation2.prototype.setCaretPositionStyles = function(position, caretSize) {
      var e_7, _a2;
      var values = this.calculateCaretPositionOnTooltip(position, caretSize);
      if (!values) {
        return { yTransformOrigin: 0, xTransformOrigin: 0 };
      }
      this.adapter.clearTooltipCaretStyles();
      this.adapter.setTooltipCaretStyle(values.yAlignment, values.yAxisPx);
      this.adapter.setTooltipCaretStyle(values.xAlignment, values.xAxisPx);
      var skewRadians = values.skew * (Math.PI / 180);
      var scaleX = Math.cos(skewRadians);
      this.adapter.setTooltipCaretStyle("transform", "rotate(" + values.rotation + "deg) skewY(" + values.skew + "deg) scaleX(" + scaleX + ")");
      this.adapter.setTooltipCaretStyle("transform-origin", values.xAlignment + " " + values.yAlignment);
      try {
        for (var _b = __values(values.caretCorners), _c = _b.next(); !_c.done; _c = _b.next()) {
          var corner = _c.value;
          this.adapter.setTooltipCaretStyle(corner, "0");
        }
      } catch (e_7_1) {
        e_7 = { error: e_7_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_7) throw e_7.error;
        }
      }
      return {
        yTransformOrigin: values.yTransformOrigin,
        xTransformOrigin: values.xTransformOrigin
      };
    };
    MDCTooltipFoundation2.prototype.calculateCaretPositionOnTooltip = function(tooltipPos, caretSize) {
      var isLTR = !this.adapter.isRTL();
      var tooltipWidth = this.adapter.getComputedStyleProperty("width");
      var tooltipHeight = this.adapter.getComputedStyleProperty("height");
      if (!tooltipWidth || !tooltipHeight || !caretSize) {
        return;
      }
      var midpointWidth = "calc((" + tooltipWidth + " - " + caretSize.caretWidth + "px) / 2)";
      var midpointHeight = "calc((" + tooltipHeight + " - " + caretSize.caretWidth + "px) / 2)";
      var flushWithEdge = "0";
      var indentedFromEdge = numbers13.CARET_INDENTATION + "px";
      var indentedFromWidth = "calc(" + tooltipWidth + " - " + indentedFromEdge + ")";
      var indentedFromHeight = "calc(" + tooltipHeight + " - " + indentedFromEdge + ")";
      var verticalRotation = 35;
      var horizontalRotation = Math.abs(90 - verticalRotation);
      var bottomRightTopLeftBorderRadius = ["border-bottom-right-radius", "border-top-left-radius"];
      var bottomLeftTopRightBorderRadius = ["border-bottom-left-radius", "border-top-right-radius"];
      var skewDeg = 20;
      switch (tooltipPos) {
        case PositionWithCaret.BELOW_CENTER:
          return {
            yAlignment: strings35.TOP,
            xAlignment: strings35.LEFT,
            yAxisPx: flushWithEdge,
            xAxisPx: midpointWidth,
            rotation: -1 * verticalRotation,
            skew: -1 * skewDeg,
            xTransformOrigin: midpointWidth,
            yTransformOrigin: flushWithEdge,
            caretCorners: bottomRightTopLeftBorderRadius
          };
        case PositionWithCaret.BELOW_END:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.RIGHT : strings35.LEFT,
            yAxisPx: flushWithEdge,
            xAxisPx: indentedFromEdge,
            rotation: isLTR ? verticalRotation : -1 * verticalRotation,
            skew: isLTR ? skewDeg : -1 * skewDeg,
            xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
            yTransformOrigin: flushWithEdge,
            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
          };
        case PositionWithCaret.BELOW_START:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.LEFT : strings35.RIGHT,
            yAxisPx: flushWithEdge,
            xAxisPx: indentedFromEdge,
            rotation: isLTR ? -1 * verticalRotation : verticalRotation,
            skew: isLTR ? -1 * skewDeg : skewDeg,
            xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
            yTransformOrigin: flushWithEdge,
            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
          };
        case PositionWithCaret.TOP_SIDE_END:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.LEFT : strings35.RIGHT,
            yAxisPx: indentedFromEdge,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
            skew: isLTR ? -1 * skewDeg : skewDeg,
            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
            yTransformOrigin: indentedFromEdge,
            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
          };
        case PositionWithCaret.CENTER_SIDE_END:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.LEFT : strings35.RIGHT,
            yAxisPx: midpointHeight,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
            skew: isLTR ? -1 * skewDeg : skewDeg,
            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
            yTransformOrigin: midpointHeight,
            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
          };
        case PositionWithCaret.BOTTOM_SIDE_END:
          return {
            yAlignment: strings35.BOTTOM,
            xAlignment: isLTR ? strings35.LEFT : strings35.RIGHT,
            yAxisPx: indentedFromEdge,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
            skew: isLTR ? skewDeg : -1 * skewDeg,
            xTransformOrigin: isLTR ? flushWithEdge : tooltipWidth,
            yTransformOrigin: indentedFromHeight,
            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
          };
        case PositionWithCaret.TOP_SIDE_START:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.RIGHT : strings35.LEFT,
            yAxisPx: indentedFromEdge,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
            skew: isLTR ? skewDeg : -1 * skewDeg,
            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
            yTransformOrigin: indentedFromEdge,
            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
          };
        case PositionWithCaret.CENTER_SIDE_START:
          return {
            yAlignment: strings35.TOP,
            xAlignment: isLTR ? strings35.RIGHT : strings35.LEFT,
            yAxisPx: midpointHeight,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? -1 * horizontalRotation : horizontalRotation,
            skew: isLTR ? skewDeg : -1 * skewDeg,
            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
            yTransformOrigin: midpointHeight,
            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
          };
        case PositionWithCaret.BOTTOM_SIDE_START:
          return {
            yAlignment: strings35.BOTTOM,
            xAlignment: isLTR ? strings35.RIGHT : strings35.LEFT,
            yAxisPx: indentedFromEdge,
            xAxisPx: flushWithEdge,
            rotation: isLTR ? horizontalRotation : -1 * horizontalRotation,
            skew: isLTR ? -1 * skewDeg : skewDeg,
            xTransformOrigin: isLTR ? tooltipWidth : flushWithEdge,
            yTransformOrigin: indentedFromHeight,
            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
          };
        case PositionWithCaret.ABOVE_CENTER:
          return {
            yAlignment: strings35.BOTTOM,
            xAlignment: strings35.LEFT,
            yAxisPx: flushWithEdge,
            xAxisPx: midpointWidth,
            rotation: verticalRotation,
            skew: skewDeg,
            xTransformOrigin: midpointWidth,
            yTransformOrigin: tooltipHeight,
            caretCorners: bottomLeftTopRightBorderRadius
          };
        case PositionWithCaret.ABOVE_END:
          return {
            yAlignment: strings35.BOTTOM,
            xAlignment: isLTR ? strings35.RIGHT : strings35.LEFT,
            yAxisPx: flushWithEdge,
            xAxisPx: indentedFromEdge,
            rotation: isLTR ? -1 * verticalRotation : verticalRotation,
            skew: isLTR ? -1 * skewDeg : skewDeg,
            xTransformOrigin: isLTR ? indentedFromWidth : indentedFromEdge,
            yTransformOrigin: tooltipHeight,
            caretCorners: isLTR ? bottomRightTopLeftBorderRadius : bottomLeftTopRightBorderRadius
          };
        default:
        case PositionWithCaret.ABOVE_START:
          return {
            yAlignment: strings35.BOTTOM,
            xAlignment: isLTR ? strings35.LEFT : strings35.RIGHT,
            yAxisPx: flushWithEdge,
            xAxisPx: indentedFromEdge,
            rotation: isLTR ? verticalRotation : -1 * verticalRotation,
            skew: isLTR ? skewDeg : -1 * skewDeg,
            xTransformOrigin: isLTR ? indentedFromEdge : indentedFromWidth,
            yTransformOrigin: tooltipHeight,
            caretCorners: isLTR ? bottomLeftTopRightBorderRadius : bottomRightTopLeftBorderRadius
          };
      }
    };
    MDCTooltipFoundation2.prototype.clearShowTimeout = function() {
      if (this.showTimeout) {
        clearTimeout(this.showTimeout);
        this.showTimeout = null;
      }
    };
    MDCTooltipFoundation2.prototype.clearHideTimeout = function() {
      if (this.hideTimeout) {
        clearTimeout(this.hideTimeout);
        this.hideTimeout = null;
      }
    };
    MDCTooltipFoundation2.prototype.attachScrollHandler = function(addEventListenerFn) {
      var _this = this;
      this.addAncestorScrollEventListeners.push(function() {
        addEventListenerFn("scroll", _this.windowScrollHandler);
      });
    };
    MDCTooltipFoundation2.prototype.removeScrollHandler = function(removeEventHandlerFn) {
      var _this = this;
      this.removeAncestorScrollEventListeners.push(function() {
        removeEventHandlerFn("scroll", _this.windowScrollHandler);
      });
    };
    MDCTooltipFoundation2.prototype.destroy = function() {
      var e_8, _a2;
      if (this.frameId) {
        cancelAnimationFrame(this.frameId);
        this.frameId = null;
      }
      this.clearHideTimeout();
      this.clearShowTimeout();
      this.adapter.removeClass(SHOWN);
      this.adapter.removeClass(SHOWING_TRANSITION);
      this.adapter.removeClass(SHOWING);
      this.adapter.removeClass(HIDE);
      this.adapter.removeClass(HIDE_TRANSITION);
      if (this.richTooltip) {
        this.adapter.deregisterEventHandler("focusout", this.richTooltipFocusOutHandler);
      }
      if (!this.persistentTooltip) {
        this.adapter.deregisterEventHandler("mouseenter", this.tooltipMouseEnterHandler);
        this.adapter.deregisterEventHandler("mouseleave", this.tooltipMouseLeaveHandler);
      }
      this.adapter.deregisterAnchorEventHandler("blur", this.anchorBlurHandler);
      this.adapter.deregisterDocumentEventHandler("click", this.documentClickHandler);
      this.adapter.deregisterDocumentEventHandler("keydown", this.documentKeydownHandler);
      this.adapter.deregisterWindowEventHandler("scroll", this.windowScrollHandler);
      this.adapter.deregisterWindowEventHandler("resize", this.windowResizeHandler);
      try {
        for (var _b = __values(this.removeAncestorScrollEventListeners), _c = _b.next(); !_c.done; _c = _b.next()) {
          var fn = _c.value;
          fn();
        }
      } catch (e_8_1) {
        e_8 = { error: e_8_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
        } finally {
          if (e_8) throw e_8.error;
        }
      }
      this.animFrame.cancelAll();
    };
    return MDCTooltipFoundation2;
  }(MDCFoundation)
);

// node_modules/@material/tooltip/component.js
var MDCTooltip = (
  /** @class */
  function(_super) {
    __extends(MDCTooltip2, _super);
    function MDCTooltip2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MDCTooltip2.attachTo = function(root) {
      return new MDCTooltip2(root);
    };
    MDCTooltip2.prototype.initialize = function() {
      var tooltipId = this.root.getAttribute("id");
      if (!tooltipId) {
        throw new Error("MDCTooltip: Tooltip component must have an id.");
      }
      var anchorElem = document.querySelector('[data-tooltip-id="' + tooltipId + '"]') || document.querySelector('[aria-describedby="' + tooltipId + '"]');
      if (!anchorElem) {
        throw new Error("MDCTooltip: Tooltip component requires an anchor element annotated with [aria-describedby] or [data-tooltip-id].");
      }
      this.anchorElem = anchorElem;
    };
    MDCTooltip2.prototype.initialSyncWithDOM = function() {
      var _this = this;
      this.isTooltipRich = this.foundation.isRich();
      this.isTooltipPersistent = this.foundation.isPersistent();
      this.handleMouseEnter = function() {
        _this.foundation.handleAnchorMouseEnter();
      };
      this.handleFocus = function(evt) {
        _this.foundation.handleAnchorFocus(evt);
      };
      this.handleMouseLeave = function() {
        _this.foundation.handleAnchorMouseLeave();
      };
      this.handleTransitionEnd = function() {
        _this.foundation.handleTransitionEnd();
      };
      this.handleClick = function() {
        _this.foundation.handleAnchorClick();
      };
      this.handleTouchstart = function() {
        _this.foundation.handleAnchorTouchstart();
      };
      this.handleTouchend = function() {
        _this.foundation.handleAnchorTouchend();
      };
      if (this.isTooltipRich && this.isTooltipPersistent) {
        this.anchorElem.addEventListener("click", this.handleClick);
      } else {
        this.anchorElem.addEventListener("mouseenter", this.handleMouseEnter);
        this.anchorElem.addEventListener("focus", this.handleFocus);
        this.anchorElem.addEventListener("mouseleave", this.handleMouseLeave);
        this.anchorElem.addEventListener("touchstart", this.handleTouchstart);
        this.anchorElem.addEventListener("touchend", this.handleTouchend);
      }
      this.listen("transitionend", this.handleTransitionEnd);
    };
    MDCTooltip2.prototype.destroy = function() {
      if (this.anchorElem) {
        if (this.isTooltipRich && this.isTooltipPersistent) {
          this.anchorElem.removeEventListener("click", this.handleClick);
        } else {
          this.anchorElem.removeEventListener("mouseenter", this.handleMouseEnter);
          this.anchorElem.removeEventListener("focus", this.handleFocus);
          this.anchorElem.removeEventListener("mouseleave", this.handleMouseLeave);
          this.anchorElem.removeEventListener("touchstart", this.handleTouchstart);
          this.anchorElem.removeEventListener("touchend", this.handleTouchend);
        }
      }
      this.unlisten("transitionend", this.handleTransitionEnd);
      _super.prototype.destroy.call(this);
    };
    MDCTooltip2.prototype.setTooltipPosition = function(position) {
      this.foundation.setTooltipPosition(position);
    };
    MDCTooltip2.prototype.setAnchorBoundaryType = function(type) {
      this.foundation.setAnchorBoundaryType(type);
    };
    MDCTooltip2.prototype.setShowDelay = function(delayMs) {
      this.foundation.setShowDelay(delayMs);
    };
    MDCTooltip2.prototype.setHideDelay = function(delayMs) {
      this.foundation.setHideDelay(delayMs);
    };
    MDCTooltip2.prototype.hide = function() {
      this.foundation.hide();
    };
    MDCTooltip2.prototype.isShown = function() {
      return this.foundation.isShown();
    };
    MDCTooltip2.prototype.attachScrollHandler = function(addEventListenerFn) {
      this.foundation.attachScrollHandler(addEventListenerFn);
    };
    MDCTooltip2.prototype.removeScrollHandler = function(removeEventHandlerFn) {
      this.foundation.removeScrollHandler(removeEventHandlerFn);
    };
    MDCTooltip2.prototype.getDefaultFoundation = function() {
      var _this = this;
      var adapter = {
        getAttribute: function(attr) {
          return _this.root.getAttribute(attr);
        },
        setAttribute: function(attr, value) {
          _this.root.setAttribute(attr, value);
        },
        removeAttribute: function(attr) {
          _this.root.removeAttribute(attr);
        },
        addClass: function(className) {
          _this.root.classList.add(className);
        },
        hasClass: function(className) {
          return _this.root.classList.contains(className);
        },
        removeClass: function(className) {
          _this.root.classList.remove(className);
        },
        getComputedStyleProperty: function(propertyName) {
          return window.getComputedStyle(_this.root).getPropertyValue(propertyName);
        },
        setStyleProperty: function(propertyName, value) {
          _this.root.style.setProperty(propertyName, value);
        },
        setSurfaceAnimationStyleProperty: function(propertyName, value) {
          var surface = _this.root.querySelector("." + CssClasses2.SURFACE_ANIMATION);
          surface === null || surface === void 0 ? void 0 : surface.style.setProperty(propertyName, value);
        },
        getViewportWidth: function() {
          return window.innerWidth;
        },
        getViewportHeight: function() {
          return window.innerHeight;
        },
        getTooltipSize: function() {
          return {
            width: _this.root.offsetWidth,
            height: _this.root.offsetHeight
          };
        },
        getAnchorBoundingRect: function() {
          return _this.anchorElem ? _this.anchorElem.getBoundingClientRect() : null;
        },
        getParentBoundingRect: function() {
          var _a2, _b;
          return (_b = (_a2 = _this.root.parentElement) === null || _a2 === void 0 ? void 0 : _a2.getBoundingClientRect()) !== null && _b !== void 0 ? _b : null;
        },
        getAnchorAttribute: function(attr) {
          return _this.anchorElem ? _this.anchorElem.getAttribute(attr) : null;
        },
        setAnchorAttribute: function(attr, value) {
          var _a2;
          (_a2 = _this.anchorElem) === null || _a2 === void 0 ? void 0 : _a2.setAttribute(attr, value);
        },
        isRTL: function() {
          return getComputedStyle(_this.root).direction === "rtl";
        },
        anchorContainsElement: function(element) {
          var _a2;
          return !!((_a2 = _this.anchorElem) === null || _a2 === void 0 ? void 0 : _a2.contains(element));
        },
        tooltipContainsElement: function(element) {
          return _this.root.contains(element);
        },
        focusAnchorElement: function() {
          var _a2;
          (_a2 = _this.anchorElem) === null || _a2 === void 0 ? void 0 : _a2.focus();
        },
        registerEventHandler: function(evt, handler) {
          if (_this.root instanceof HTMLElement) {
            _this.root.addEventListener(evt, handler);
          }
        },
        deregisterEventHandler: function(evt, handler) {
          if (_this.root instanceof HTMLElement) {
            _this.root.removeEventListener(evt, handler);
          }
        },
        registerAnchorEventHandler: function(evt, handler) {
          var _a2;
          (_a2 = _this.anchorElem) === null || _a2 === void 0 ? void 0 : _a2.addEventListener(evt, handler);
        },
        deregisterAnchorEventHandler: function(evt, handler) {
          var _a2;
          (_a2 = _this.anchorElem) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener(evt, handler);
        },
        registerDocumentEventHandler: function(evt, handler) {
          document.body.addEventListener(evt, handler);
        },
        deregisterDocumentEventHandler: function(evt, handler) {
          document.body.removeEventListener(evt, handler);
        },
        registerWindowEventHandler: function(evt, handler) {
          window.addEventListener(evt, handler);
        },
        deregisterWindowEventHandler: function(evt, handler) {
          window.removeEventListener(evt, handler);
        },
        notifyHidden: function() {
          _this.emit(events6.HIDDEN, {});
        },
        getTooltipCaretBoundingRect: function() {
          var caret = _this.root.querySelector("." + CssClasses2.TOOLTIP_CARET_TOP);
          if (!caret) {
            return null;
          }
          return caret.getBoundingClientRect();
        },
        setTooltipCaretStyle: function(propertyName, value) {
          var topCaret = _this.root.querySelector("." + CssClasses2.TOOLTIP_CARET_TOP);
          var bottomCaret = _this.root.querySelector("." + CssClasses2.TOOLTIP_CARET_BOTTOM);
          if (!topCaret || !bottomCaret) {
            return;
          }
          topCaret.style.setProperty(propertyName, value);
          bottomCaret.style.setProperty(propertyName, value);
        },
        clearTooltipCaretStyles: function() {
          var topCaret = _this.root.querySelector("." + CssClasses2.TOOLTIP_CARET_TOP);
          var bottomCaret = _this.root.querySelector("." + CssClasses2.TOOLTIP_CARET_BOTTOM);
          if (!topCaret || !bottomCaret) {
            return;
          }
          topCaret.removeAttribute("style");
          bottomCaret.removeAttribute("style");
        },
        getActiveElement: function() {
          return document.activeElement;
        }
      };
      return new MDCTooltipFoundation(adapter);
    };
    return MDCTooltip2;
  }(MDCComponent)
);

// node_modules/@aurelia-mdc-web/tooltip/dist/mdc-tooltip.html?raw
var mdc_tooltip_default = `<template class="mdc-tooltip
  \${rich ? 'mdc-tooltip--rich' : ''}
" role="tooltip" aria-hidden="true" transitionend.trigger="handleTransitionEnd()">
  <div class="mdc-tooltip__surface mdc-tooltip__surface-animation">
    <au-slot></au-slot>
  </div>
</template>
`;

// node_modules/@aurelia-mdc-web/tooltip/dist/mdc-tooltip.js
var MdcTooltip = (() => {
  let _classDecorators = [inject(Element, MdcDefaultTooltipConfiguration), customElement({ name: "mdc-tooltip", template: mdc_tooltip_default })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent34;
  let _anchorElem_decorators;
  let _anchorElem_initializers = [];
  let _anchorElem_extraInitializers = [];
  let _rich_decorators;
  let _rich_initializers = [];
  let _rich_extraInitializers = [];
  let _persistent_decorators;
  let _persistent_initializers = [];
  let _persistent_extraInitializers = [];
  let _xPosition_decorators;
  let _xPosition_initializers = [];
  let _xPosition_extraInitializers = [];
  let _yPosition_decorators;
  let _yPosition_initializers = [];
  let _yPosition_extraInitializers = [];
  let _withCaretPos_decorators;
  let _withCaretPos_initializers = [];
  let _withCaretPos_extraInitializers = [];
  let _boundaryType_decorators;
  let _boundaryType_initializers = [];
  let _boundaryType_extraInitializers = [];
  let _showDelay_decorators;
  let _showDelay_initializers = [];
  let _showDelay_extraInitializers = [];
  let _hideDelay_decorators;
  let _hideDelay_initializers = [];
  let _hideDelay_extraInitializers = [];
  let _scrollHost_decorators;
  let _scrollHost_initializers = [];
  let _scrollHost_extraInitializers = [];
  var MdcTooltip2 = _classThis = class extends _classSuper {
    constructor(root, defaultConfiguration) {
      super(root);
      this.defaultConfiguration = defaultConfiguration;
      this.anchorElem = __runInitializers(this, _anchorElem_initializers, void 0);
      this.rich = (__runInitializers(this, _anchorElem_extraInitializers), __runInitializers(this, _rich_initializers, void 0));
      this.persistent = (__runInitializers(this, _rich_extraInitializers), __runInitializers(this, _persistent_initializers, void 0));
      this.xPosition = (__runInitializers(this, _persistent_extraInitializers), __runInitializers(this, _xPosition_initializers, void 0));
      this.yPosition = (__runInitializers(this, _xPosition_extraInitializers), __runInitializers(this, _yPosition_initializers, void 0));
      this.withCaretPos = (__runInitializers(this, _yPosition_extraInitializers), __runInitializers(this, _withCaretPos_initializers, void 0));
      this.boundaryType = (__runInitializers(this, _withCaretPos_extraInitializers), __runInitializers(this, _boundaryType_initializers, void 0));
      this.showDelay = (__runInitializers(this, _boundaryType_extraInitializers), __runInitializers(this, _showDelay_initializers, this.defaultConfiguration.showDelay));
      this.hideDelay = (__runInitializers(this, _showDelay_extraInitializers), __runInitializers(this, _hideDelay_initializers, this.defaultConfiguration.hideDelay));
      this.scrollHost = (__runInitializers(this, _hideDelay_extraInitializers), __runInitializers(this, _scrollHost_initializers, this.defaultConfiguration.scrollHost));
      __runInitializers(this, _scrollHost_extraInitializers);
      this.defaultConfiguration = defaultConfiguration;
    }
    xPositionChanged() {
      var _a2;
      if (this.xPosition !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setTooltipPosition({ xPos: XPosition[this.xPosition] });
      }
    }
    yPositionChanged() {
      var _a2;
      if (this.yPosition !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setTooltipPosition({ yPos: YPosition[this.yPosition] });
      }
    }
    async withCaretPosChanged() {
      var _a2;
      if (this.withCaretPos !== void 0) {
        await this.initialised;
        (_a2 = this.foundation) == null ? void 0 : _a2.setTooltipPosition({ withCaretPos: PositionWithCaret[this.withCaretPos] });
      }
    }
    boundaryTypeChanged() {
      var _a2;
      if (this.boundaryType !== void 0) {
        (_a2 = this.foundation) == null ? void 0 : _a2.setAnchorBoundaryType(AnchorBoundaryType[this.boundaryType]);
      }
    }
    async showDelayChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setShowDelay(this.showDelay ?? numbers13.SHOW_DELAY_MS);
    }
    async hideDelayChanged() {
      var _a2;
      await this.initialised;
      (_a2 = this.foundation) == null ? void 0 : _a2.setHideDelay(this.hideDelay ?? numbers13.HIDE_DELAY_MS);
    }
    beforeFoundationCreated() {
      if (this.persistent) {
        this.root.setAttribute(attributes4.PERSISTENT, "true");
      }
    }
    initialSyncWithDOM() {
      var _a2, _b, _c, _d, _e, _f;
      this.xPositionChanged();
      this.yPositionChanged();
      this.boundaryTypeChanged();
      if (this.rich && this.persistent) {
        (_a2 = this.anchorElem) == null ? void 0 : _a2.addEventListener("click", this);
      } else {
        (_b = this.anchorElem) == null ? void 0 : _b.addEventListener("mouseenter", this);
        (_c = this.anchorElem) == null ? void 0 : _c.addEventListener("focus", this);
        (_d = this.anchorElem) == null ? void 0 : _d.addEventListener("mouseleave", this);
        (_e = this.anchorElem) == null ? void 0 : _e.addEventListener("touchstart", this);
        (_f = this.anchorElem) == null ? void 0 : _f.addEventListener("touchend", this);
      }
      if (typeof this.scrollHost === "string") {
        this.scrollHost = document.querySelector(this.scrollHost) ?? void 0;
      }
      if (this.scrollHost) {
        const scrollHost = this.scrollHost;
        this.foundation.attachScrollHandler((event, listener) => scrollHost.addEventListener(event, listener));
        this.foundation.removeScrollHandler((event, listener) => scrollHost.removeEventListener(event, listener));
      }
    }
    destroy() {
      if (!this.anchorElem) {
        return;
      }
      if (this.rich && this.persistent) {
        this.anchorElem.removeEventListener("click", this);
      } else {
        this.anchorElem.removeEventListener("mouseenter", this);
        this.anchorElem.removeEventListener("focus", this);
        this.anchorElem.removeEventListener("mouseleave", this);
        this.anchorElem.removeEventListener("touchstart", this);
        this.anchorElem.removeEventListener("touchend", this);
      }
    }
    handleEvent(evt) {
      switch (evt.type) {
        case "click":
          this.handleClick();
          break;
        case "mouseenter":
          this.handleMouseEnter();
          break;
        case "focus":
          this.handleFocus(evt);
          break;
        case "mouseleave":
          this.handleMouseLeave();
          break;
        case "touchstart":
          this.handleTouchstart();
          break;
        case "touchend":
          this.handleTouchend();
          break;
      }
    }
    handleMouseEnter() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorMouseEnter();
    }
    handleFocus(evt) {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorFocus(evt);
    }
    handleMouseLeave() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorMouseLeave();
    }
    handleTouchstart() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorTouchstart();
    }
    handleTouchend() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorTouchend();
    }
    handleClick() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleAnchorClick();
    }
    handleTransitionEnd() {
      var _a2;
      (_a2 = this.foundation) == null ? void 0 : _a2.handleTransitionEnd();
    }
    getDefaultFoundation() {
      const adapter = {
        getAttribute: (attr) => this.root.getAttribute(attr),
        setAttribute: (attr, value) => {
          this.root.setAttribute(attr, value);
        },
        removeAttribute: (attr) => {
          this.root.removeAttribute(attr);
        },
        addClass: (className) => {
          this.root.classList.add(className);
        },
        hasClass: (className) => this.root.classList.contains(className),
        removeClass: (className) => {
          this.root.classList.remove(className);
        },
        getComputedStyleProperty: (propertyName) => {
          return window.getComputedStyle(this.root).getPropertyValue(propertyName);
        },
        setStyleProperty: (propertyName, value) => {
          this.root.style.setProperty(propertyName, value);
        },
        setSurfaceAnimationStyleProperty: (propertyName, value) => {
          const surface = this.root.querySelector(`.${CssClasses2.SURFACE_ANIMATION}`);
          surface == null ? void 0 : surface.style.setProperty(propertyName, value);
        },
        getViewportWidth: () => window.innerWidth,
        getViewportHeight: () => window.innerHeight,
        getTooltipSize: () => {
          return {
            width: this.root.offsetWidth,
            height: this.root.offsetHeight
          };
        },
        getAnchorBoundingRect: () => {
          return this.anchorElem ? this.anchorElem.getBoundingClientRect() : null;
        },
        getParentBoundingRect: () => {
          var _a2;
          return ((_a2 = this.root.parentElement) == null ? void 0 : _a2.getBoundingClientRect()) ?? null;
        },
        getAnchorAttribute: (attr) => {
          return this.anchorElem ? this.anchorElem.getAttribute(attr) : null;
        },
        setAnchorAttribute: (attr, value) => {
          var _a2;
          (_a2 = this.anchorElem) == null ? void 0 : _a2.setAttribute(attr, value);
        },
        isRTL: () => getComputedStyle(this.root).direction === "rtl",
        anchorContainsElement: (element) => {
          var _a2;
          return !!((_a2 = this.anchorElem) == null ? void 0 : _a2.contains(element));
        },
        tooltipContainsElement: (element) => {
          return this.root.contains(element);
        },
        focusAnchorElement: () => {
          var _a2;
          (_a2 = this.anchorElem) == null ? void 0 : _a2.focus();
        },
        registerEventHandler: (evt, handler) => {
          if (this.root instanceof HTMLElement) {
            this.root.addEventListener(evt, handler);
          }
        },
        deregisterEventHandler: (evt, handler) => {
          if (this.root instanceof HTMLElement) {
            this.root.removeEventListener(evt, handler);
          }
        },
        registerAnchorEventHandler: (evt, handler) => {
          var _a2;
          (_a2 = this.anchorElem) == null ? void 0 : _a2.addEventListener(evt, handler);
        },
        deregisterAnchorEventHandler: (evt, handler) => {
          var _a2;
          (_a2 = this.anchorElem) == null ? void 0 : _a2.addEventListener(evt, handler);
        },
        registerDocumentEventHandler: (evt, handler) => {
          document.body.addEventListener(evt, handler);
        },
        deregisterDocumentEventHandler: (evt, handler) => {
          document.body.removeEventListener(evt, handler);
        },
        registerWindowEventHandler: (evt, handler) => {
          window.addEventListener(evt, handler);
        },
        deregisterWindowEventHandler: (evt, handler) => {
          window.removeEventListener(evt, handler);
        },
        notifyHidden: () => {
          this.emit(events6.HIDDEN, {});
        },
        getTooltipCaretBoundingRect: () => {
          const caret = this.root.querySelector(`.${CssClasses2.TOOLTIP_CARET_TOP}`);
          if (!caret) {
            return null;
          }
          return caret.getBoundingClientRect();
        },
        setTooltipCaretStyle: (propertyName, value) => {
          const topCaret = this.root.querySelector(`.${CssClasses2.TOOLTIP_CARET_TOP}`);
          const bottomCaret = this.root.querySelector(`.${CssClasses2.TOOLTIP_CARET_BOTTOM}`);
          if (!topCaret || !bottomCaret) {
            return;
          }
          topCaret.style.setProperty(propertyName, value);
          bottomCaret.style.setProperty(propertyName, value);
        },
        clearTooltipCaretStyles: () => {
          const topCaret = this.root.querySelector(`.${CssClasses2.TOOLTIP_CARET_TOP}`);
          const bottomCaret = this.root.querySelector(`.${CssClasses2.TOOLTIP_CARET_BOTTOM}`);
          if (!topCaret || !bottomCaret) {
            return;
          }
          topCaret.removeAttribute("style");
          bottomCaret.removeAttribute("style");
        },
        getActiveElement: () => {
          return document.activeElement;
        }
      };
      return new MDCTooltipFoundation(adapter);
    }
  };
  __setFunctionName(_classThis, "MdcTooltip");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _anchorElem_decorators = [bindable()];
    _rich_decorators = [bindable({ set: booleanAttr34 })];
    _persistent_decorators = [bindable({ set: booleanAttr34 })];
    _xPosition_decorators = [bindable()];
    _yPosition_decorators = [bindable()];
    _withCaretPos_decorators = [bindable()];
    _boundaryType_decorators = [bindable()];
    _showDelay_decorators = [bindable({ set: number34 })];
    _hideDelay_decorators = [bindable({ set: number34 })];
    _scrollHost_decorators = [bindable()];
    __esDecorate(null, null, _anchorElem_decorators, { kind: "field", name: "anchorElem", static: false, private: false, access: { has: (obj) => "anchorElem" in obj, get: (obj) => obj.anchorElem, set: (obj, value) => {
      obj.anchorElem = value;
    } }, metadata: _metadata }, _anchorElem_initializers, _anchorElem_extraInitializers);
    __esDecorate(null, null, _rich_decorators, { kind: "field", name: "rich", static: false, private: false, access: { has: (obj) => "rich" in obj, get: (obj) => obj.rich, set: (obj, value) => {
      obj.rich = value;
    } }, metadata: _metadata }, _rich_initializers, _rich_extraInitializers);
    __esDecorate(null, null, _persistent_decorators, { kind: "field", name: "persistent", static: false, private: false, access: { has: (obj) => "persistent" in obj, get: (obj) => obj.persistent, set: (obj, value) => {
      obj.persistent = value;
    } }, metadata: _metadata }, _persistent_initializers, _persistent_extraInitializers);
    __esDecorate(null, null, _xPosition_decorators, { kind: "field", name: "xPosition", static: false, private: false, access: { has: (obj) => "xPosition" in obj, get: (obj) => obj.xPosition, set: (obj, value) => {
      obj.xPosition = value;
    } }, metadata: _metadata }, _xPosition_initializers, _xPosition_extraInitializers);
    __esDecorate(null, null, _yPosition_decorators, { kind: "field", name: "yPosition", static: false, private: false, access: { has: (obj) => "yPosition" in obj, get: (obj) => obj.yPosition, set: (obj, value) => {
      obj.yPosition = value;
    } }, metadata: _metadata }, _yPosition_initializers, _yPosition_extraInitializers);
    __esDecorate(null, null, _withCaretPos_decorators, { kind: "field", name: "withCaretPos", static: false, private: false, access: { has: (obj) => "withCaretPos" in obj, get: (obj) => obj.withCaretPos, set: (obj, value) => {
      obj.withCaretPos = value;
    } }, metadata: _metadata }, _withCaretPos_initializers, _withCaretPos_extraInitializers);
    __esDecorate(null, null, _boundaryType_decorators, { kind: "field", name: "boundaryType", static: false, private: false, access: { has: (obj) => "boundaryType" in obj, get: (obj) => obj.boundaryType, set: (obj, value) => {
      obj.boundaryType = value;
    } }, metadata: _metadata }, _boundaryType_initializers, _boundaryType_extraInitializers);
    __esDecorate(null, null, _showDelay_decorators, { kind: "field", name: "showDelay", static: false, private: false, access: { has: (obj) => "showDelay" in obj, get: (obj) => obj.showDelay, set: (obj, value) => {
      obj.showDelay = value;
    } }, metadata: _metadata }, _showDelay_initializers, _showDelay_extraInitializers);
    __esDecorate(null, null, _hideDelay_decorators, { kind: "field", name: "hideDelay", static: false, private: false, access: { has: (obj) => "hideDelay" in obj, get: (obj) => obj.hideDelay, set: (obj, value) => {
      obj.hideDelay = value;
    } }, metadata: _metadata }, _hideDelay_initializers, _hideDelay_extraInitializers);
    __esDecorate(null, null, _scrollHost_decorators, { kind: "field", name: "scrollHost", static: false, private: false, access: { has: (obj) => "scrollHost" in obj, get: (obj) => obj.scrollHost, set: (obj, value) => {
      obj.scrollHost = value;
    } }, metadata: _metadata }, _scrollHost_initializers, _scrollHost_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTooltip2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTooltip2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tooltip/dist/mdc-tooltip-attribute.js
var import_dist1864 = __toESM(require_dist());
var import_dist1865 = __toESM(require_dist2());
var import_dist1866 = __toESM(require_dist3());
var MdcTooltipAttribute = (() => {
  let _classDecorators = [inject(Element, MdcDefaultTooltipConfiguration, IAurelia), customAttribute("mdc-tooltip")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _value_decorators;
  let _value_initializers = [];
  let _value_extraInitializers = [];
  let _rich_decorators;
  let _rich_initializers = [];
  let _rich_extraInitializers = [];
  let _persistent_decorators;
  let _persistent_initializers = [];
  let _persistent_extraInitializers = [];
  let _xPosition_decorators;
  let _xPosition_initializers = [];
  let _xPosition_extraInitializers = [];
  let _yPosition_decorators;
  let _yPosition_initializers = [];
  let _yPosition_extraInitializers = [];
  let _boundaryType_decorators;
  let _boundaryType_initializers = [];
  let _boundaryType_extraInitializers = [];
  let _showDelay_decorators;
  let _showDelay_initializers = [];
  let _showDelay_extraInitializers = [];
  let _hideDelay_decorators;
  let _hideDelay_initializers = [];
  let _hideDelay_extraInitializers = [];
  let _scrollHost_decorators;
  let _scrollHost_initializers = [];
  let _scrollHost_extraInitializers = [];
  var MdcTooltipAttribute2 = _classThis = class {
    constructor(root, defaultConfiguration, au) {
      this.defaultConfiguration = defaultConfiguration;
      this.au = au;
      this.value = __runInitializers(this, _value_initializers, void 0);
      this.rich = (__runInitializers(this, _value_extraInitializers), __runInitializers(this, _rich_initializers, void 0));
      this.persistent = (__runInitializers(this, _rich_extraInitializers), __runInitializers(this, _persistent_initializers, void 0));
      this.xPosition = (__runInitializers(this, _persistent_extraInitializers), __runInitializers(this, _xPosition_initializers, void 0));
      this.yPosition = (__runInitializers(this, _xPosition_extraInitializers), __runInitializers(this, _yPosition_initializers, void 0));
      this.boundaryType = (__runInitializers(this, _yPosition_extraInitializers), __runInitializers(this, _boundaryType_initializers, void 0));
      this.showDelay = (__runInitializers(this, _boundaryType_extraInitializers), __runInitializers(this, _showDelay_initializers, void 0));
      this.hideDelay = (__runInitializers(this, _showDelay_extraInitializers), __runInitializers(this, _hideDelay_initializers, void 0));
      this.scrollHost = (__runInitializers(this, _hideDelay_extraInitializers), __runInitializers(this, _scrollHost_initializers, this.defaultConfiguration.scrollHost));
      this.tooltip = __runInitializers(this, _scrollHost_extraInitializers);
      this.root = root;
    }
    valueChanged() {
      this.context.value = this.value;
    }
    richChanged() {
      this.context.rich = this.rich;
    }
    persistenthanged() {
      this.context.persistent = this.persistent;
    }
    xPositionChanged() {
      this.context.xPosition = this.xPosition;
    }
    yPositionChanged() {
      this.context.yPosition = this.yPosition;
    }
    boundaryTypeChanged() {
      this.context.boundaryType = this.boundaryType;
    }
    showDelayChanged() {
      this.context.showDelay = this.showDelay;
    }
    hideDelayChanged() {
      this.context.hideDelay = this.hideDelay;
    }
    scrollHostChanged() {
      this.context.scrollHost = this.scrollHost;
    }
    async attached() {
      this.tooltip = document.createElement("div");
      this.tooltip.innerHTML = '<mdc-tooltip anchor-elem.bind="root" x-position.bind="xPosition" y-position.bind="yPosition" boundary-type.bind="boundaryType" rich.bind="rich" persistent.bind="persistent" show-delay.bind="showDelay" hide-delay.bind="hideDelay" scroll-host.bind="scrollHost">${value}</mdc-tooltip>';
      this.context = {
        root: this.root,
        value: this.value,
        rich: this.rich,
        persistent: this.persistent,
        xPosition: this.xPosition,
        yPosition: this.yPosition,
        boundaryType: this.boundaryType,
        showDelay: this.showDelay,
        hideDelay: this.hideDelay,
        scrollHost: this.scrollHost
      };
      this.controller = await this.au.enhance({
        component: this.context,
        host: this.tooltip
      });
      document.body.appendChild(this.tooltip);
    }
    detached() {
      this.controller.deactivate();
      this.tooltip.remove();
    }
  };
  __setFunctionName(_classThis, "MdcTooltipAttribute");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _value_decorators = [bindable({ primary: true })];
    _rich_decorators = [bindable({ set: booleanAttr34 })];
    _persistent_decorators = [bindable({ set: booleanAttr34 })];
    _xPosition_decorators = [bindable()];
    _yPosition_decorators = [bindable()];
    _boundaryType_decorators = [bindable()];
    _showDelay_decorators = [bindable({ set: number34 })];
    _hideDelay_decorators = [bindable({ set: number34 })];
    _scrollHost_decorators = [bindable()];
    __esDecorate(null, null, _value_decorators, { kind: "field", name: "value", static: false, private: false, access: { has: (obj) => "value" in obj, get: (obj) => obj.value, set: (obj, value) => {
      obj.value = value;
    } }, metadata: _metadata }, _value_initializers, _value_extraInitializers);
    __esDecorate(null, null, _rich_decorators, { kind: "field", name: "rich", static: false, private: false, access: { has: (obj) => "rich" in obj, get: (obj) => obj.rich, set: (obj, value) => {
      obj.rich = value;
    } }, metadata: _metadata }, _rich_initializers, _rich_extraInitializers);
    __esDecorate(null, null, _persistent_decorators, { kind: "field", name: "persistent", static: false, private: false, access: { has: (obj) => "persistent" in obj, get: (obj) => obj.persistent, set: (obj, value) => {
      obj.persistent = value;
    } }, metadata: _metadata }, _persistent_initializers, _persistent_extraInitializers);
    __esDecorate(null, null, _xPosition_decorators, { kind: "field", name: "xPosition", static: false, private: false, access: { has: (obj) => "xPosition" in obj, get: (obj) => obj.xPosition, set: (obj, value) => {
      obj.xPosition = value;
    } }, metadata: _metadata }, _xPosition_initializers, _xPosition_extraInitializers);
    __esDecorate(null, null, _yPosition_decorators, { kind: "field", name: "yPosition", static: false, private: false, access: { has: (obj) => "yPosition" in obj, get: (obj) => obj.yPosition, set: (obj, value) => {
      obj.yPosition = value;
    } }, metadata: _metadata }, _yPosition_initializers, _yPosition_extraInitializers);
    __esDecorate(null, null, _boundaryType_decorators, { kind: "field", name: "boundaryType", static: false, private: false, access: { has: (obj) => "boundaryType" in obj, get: (obj) => obj.boundaryType, set: (obj, value) => {
      obj.boundaryType = value;
    } }, metadata: _metadata }, _boundaryType_initializers, _boundaryType_extraInitializers);
    __esDecorate(null, null, _showDelay_decorators, { kind: "field", name: "showDelay", static: false, private: false, access: { has: (obj) => "showDelay" in obj, get: (obj) => obj.showDelay, set: (obj, value) => {
      obj.showDelay = value;
    } }, metadata: _metadata }, _showDelay_initializers, _showDelay_extraInitializers);
    __esDecorate(null, null, _hideDelay_decorators, { kind: "field", name: "hideDelay", static: false, private: false, access: { has: (obj) => "hideDelay" in obj, get: (obj) => obj.hideDelay, set: (obj, value) => {
      obj.hideDelay = value;
    } }, metadata: _metadata }, _hideDelay_initializers, _hideDelay_extraInitializers);
    __esDecorate(null, null, _scrollHost_decorators, { kind: "field", name: "scrollHost", static: false, private: false, access: { has: (obj) => "scrollHost" in obj, get: (obj) => obj.scrollHost, set: (obj, value) => {
      obj.scrollHost = value;
    } }, metadata: _metadata }, _scrollHost_initializers, _scrollHost_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTooltipAttribute2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTooltipAttribute2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tooltip/dist/index.js
var registered29 = false;
var TooltipConfiguration = {
  register(container) {
    if (registered29) {
      return container;
    } else {
      registered29 = true;
      return container.register(MdcTooltip, MdcTooltipAttribute);
    }
  },
  customize(optionsProvider) {
    return {
      register(container) {
        const options = container.get(MdcDefaultTooltipConfiguration);
        optionsProvider(options);
        return TooltipConfiguration.register(container);
      }
    };
  }
};

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1888 = __toESM(require_dist());
var import_dist1889 = __toESM(require_dist2());
var import_dist1890 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1873 = __toESM(require_dist());
var import_dist1874 = __toESM(require_dist2());
var import_dist1875 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1870 = __toESM(require_dist());
var import_dist1871 = __toESM(require_dist2());
var import_dist1872 = __toESM(require_dist3());
function booleanAttr35(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap35 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr35 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr35 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr35 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1876 = __toESM(require_dist());
var import_dist1877 = __toESM(require_dist2());
var import_dist1878 = __toESM(require_dist3());
var MdcPromisifyReference35 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1879 = __toESM(require_dist());
var import_dist1880 = __toESM(require_dist2());
var import_dist1881 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1882 = __toESM(require_dist());
var import_dist1883 = __toESM(require_dist2());
var import_dist1884 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1885 = __toESM(require_dist());
var import_dist1886 = __toESM(require_dist2());
var import_dist1887 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/all/node_modules/@aurelia-mdc-web/base/dist/index.js
var registered30 = false;
var BaseConfiguration = {
  register(container) {
    if (registered30) {
      return container;
    } else {
      registered30 = true;
      return container.register(MdcPromisifyReference35, MdcFocusTrap35);
    }
  }
};

// node_modules/@aurelia-mdc-web/tree-view/dist/index.js
var import_dist1930 = __toESM(require_dist());
var import_dist1931 = __toESM(require_dist2());
var import_dist1932 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/dist/mdc-tree-view.js
var import_dist1918 = __toESM(require_dist());
var import_dist1919 = __toESM(require_dist2());
var import_dist1920 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/index.js
var import_dist1909 = __toESM(require_dist());
var import_dist1910 = __toESM(require_dist2());
var import_dist1911 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var import_dist1894 = __toESM(require_dist());
var import_dist1895 = __toESM(require_dist2());
var import_dist1896 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/interceptors.js
var import_dist1891 = __toESM(require_dist());
var import_dist1892 = __toESM(require_dist2());
var import_dist1893 = __toESM(require_dist3());
function booleanAttr36(val) {
  return val || val === "" ? true : false;
}

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/attributes/mdc-focus-trap.js
var MdcFocusTrap36 = (() => {
  let _classDecorators = [customAttribute("mdc-focus-trap"), inject(Element)];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _delay_decorators;
  let _delay_initializers = [];
  let _delay_extraInitializers = [];
  let _initialFocusEl_decorators;
  let _initialFocusEl_initializers = [];
  let _initialFocusEl_extraInitializers = [];
  let _skipInitialFocus_decorators;
  let _skipInitialFocus_initializers = [];
  let _skipInitialFocus_extraInitializers = [];
  let _skipRestoreFocus_decorators;
  let _skipRestoreFocus_initializers = [];
  let _skipRestoreFocus_extraInitializers = [];
  var MdcFocusTrap37 = _classThis = class {
    constructor(root) {
      this.root = root;
      this.delay = __runInitializers(this, _delay_initializers, void 0);
      this.initialFocusEl = (__runInitializers(this, _delay_extraInitializers), __runInitializers(this, _initialFocusEl_initializers, void 0));
      this.skipInitialFocus = (__runInitializers(this, _initialFocusEl_extraInitializers), __runInitializers(this, _skipInitialFocus_initializers, void 0));
      this.skipRestoreFocus = (__runInitializers(this, _skipInitialFocus_extraInitializers), __runInitializers(this, _skipRestoreFocus_initializers, void 0));
      __runInitializers(this, _skipRestoreFocus_extraInitializers);
      this.root = root;
    }
    attached() {
      if (!this.delay) {
        this.create();
      }
    }
    create() {
      const el = this.initialFocusEl instanceof HTMLElement || this.initialFocusEl === void 0 ? this.initialFocusEl : this.initialFocusEl();
      this.focusTrap = new FocusTrap(this.root, { initialFocusEl: el, skipInitialFocus: this.skipInitialFocus, skipRestoreFocus: this.skipRestoreFocus });
    }
    trapFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.trapFocus();
    }
    releaseFocus() {
      var _a2;
      (_a2 = this.focusTrap) == null ? void 0 : _a2.releaseFocus();
    }
  };
  __setFunctionName(_classThis, "MdcFocusTrap");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _delay_decorators = [bindable({ set: booleanAttr36 })];
    _initialFocusEl_decorators = [bindable()];
    _skipInitialFocus_decorators = [bindable({ set: booleanAttr36 })];
    _skipRestoreFocus_decorators = [bindable({ set: booleanAttr36 })];
    __esDecorate(null, null, _delay_decorators, { kind: "field", name: "delay", static: false, private: false, access: { has: (obj) => "delay" in obj, get: (obj) => obj.delay, set: (obj, value) => {
      obj.delay = value;
    } }, metadata: _metadata }, _delay_initializers, _delay_extraInitializers);
    __esDecorate(null, null, _initialFocusEl_decorators, { kind: "field", name: "initialFocusEl", static: false, private: false, access: { has: (obj) => "initialFocusEl" in obj, get: (obj) => obj.initialFocusEl, set: (obj, value) => {
      obj.initialFocusEl = value;
    } }, metadata: _metadata }, _initialFocusEl_initializers, _initialFocusEl_extraInitializers);
    __esDecorate(null, null, _skipInitialFocus_decorators, { kind: "field", name: "skipInitialFocus", static: false, private: false, access: { has: (obj) => "skipInitialFocus" in obj, get: (obj) => obj.skipInitialFocus, set: (obj, value) => {
      obj.skipInitialFocus = value;
    } }, metadata: _metadata }, _skipInitialFocus_initializers, _skipInitialFocus_extraInitializers);
    __esDecorate(null, null, _skipRestoreFocus_decorators, { kind: "field", name: "skipRestoreFocus", static: false, private: false, access: { has: (obj) => "skipRestoreFocus" in obj, get: (obj) => obj.skipRestoreFocus, set: (obj, value) => {
      obj.skipRestoreFocus = value;
    } }, metadata: _metadata }, _skipRestoreFocus_initializers, _skipRestoreFocus_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcFocusTrap37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcFocusTrap37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/elements/mdc-promisify-reference.js
var import_dist1897 = __toESM(require_dist());
var import_dist1898 = __toESM(require_dist2());
var import_dist1899 = __toESM(require_dist3());
var MdcPromisifyReference36 = (() => {
  let _classDecorators = [customElement({ name: "mdc-promisify-reference" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _promiseRef_decorators;
  let _promiseRef_initializers = [];
  let _promiseRef_extraInitializers = [];
  let _reference_decorators;
  let _reference_initializers = [];
  let _reference_extraInitializers = [];
  var MdcPromisifyReference37 = _classThis = class {
    referenceChanged() {
      if (this.reference) {
        this.resolve(this.reference);
      }
    }
    attached() {
      this.promiseRef = new Promise((r) => this.resolve = r);
    }
    constructor() {
      this.promiseRef = __runInitializers(this, _promiseRef_initializers, void 0);
      this.reference = (__runInitializers(this, _promiseRef_extraInitializers), __runInitializers(this, _reference_initializers, void 0));
      __runInitializers(this, _reference_extraInitializers);
    }
  };
  __setFunctionName(_classThis, "MdcPromisifyReference");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    _promiseRef_decorators = [bindable({ mode: BindingMode.fromView })];
    _reference_decorators = [bindable({ mode: BindingMode.toView })];
    __esDecorate(null, null, _promiseRef_decorators, { kind: "field", name: "promiseRef", static: false, private: false, access: { has: (obj) => "promiseRef" in obj, get: (obj) => obj.promiseRef, set: (obj, value) => {
      obj.promiseRef = value;
    } }, metadata: _metadata }, _promiseRef_initializers, _promiseRef_extraInitializers);
    __esDecorate(null, null, _reference_decorators, { kind: "field", name: "reference", static: false, private: false, access: { has: (obj) => "reference" in obj, get: (obj) => obj.reference, set: (obj, value) => {
      obj.reference = value;
    } }, metadata: _metadata }, _reference_initializers, _reference_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcPromisifyReference37 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcPromisifyReference37 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/mdc-component.js
var import_dist1900 = __toESM(require_dist());
var import_dist1901 = __toESM(require_dist2());
var import_dist1902 = __toESM(require_dist3());
var MdcComponent36 = class {
  constructor(root) {
    this.root = root;
    this.initialised = this.createInitiliasedPromise();
  }
  async createInitiliasedPromise() {
    return new Promise((r) => this.initialisedResolve = r);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initialSyncWithDOM() {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  beforeFoundationCreated() {
  }
  attached() {
    this.beforeFoundationCreated();
    this.foundation = this.getDefaultFoundation();
    this.foundation.init();
    this.initialisedResolve();
    this.initialSyncWithDOM();
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  destroy() {
  }
  detaching() {
    var _a2;
    this.destroy();
    (_a2 = this.foundation) == null ? void 0 : _a2.destroy();
    this.foundation = void 0;
    this.initialised = this.createInitiliasedPromise();
  }
  listen(evtType, handler, options) {
    this.root.addEventListener(evtType, handler, options);
  }
  unlisten(evtType, handler, options) {
    this.root.removeEventListener(evtType, handler, options);
  }
  /**
   * @hidden
   * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.
   */
  emit(evtType, evtData, shouldBubble = false) {
    let evt;
    if (typeof CustomEvent === "function") {
      evt = new CustomEvent(evtType, {
        bubbles: shouldBubble,
        detail: evtData
      });
    } else {
      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(evtType, shouldBubble, false, evtData);
    }
    this.root.dispatchEvent(evt);
  }
};

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/material-palette.js
var import_dist1903 = __toESM(require_dist());
var import_dist1904 = __toESM(require_dist2());
var import_dist1905 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/node_modules/@aurelia-mdc-web/base/dist/next-element.js
var import_dist1906 = __toESM(require_dist());
var import_dist1907 = __toESM(require_dist2());
var import_dist1908 = __toESM(require_dist3());

// node_modules/@material/base/index.js
var import_dist1915 = __toESM(require_dist());
var import_dist1916 = __toESM(require_dist2());
var import_dist1917 = __toESM(require_dist3());

// node_modules/@material/base/types.js
var import_dist1912 = __toESM(require_dist());
var import_dist1913 = __toESM(require_dist2());
var import_dist1914 = __toESM(require_dist3());

// node_modules/@aurelia-mdc-web/tree-view/dist/mdc-tree-view.html?raw
var mdc_tree_view_default = `<template class="mdc-tree-view">
  <ul class="mdc-tree-view__list">
    <li repeat.for="$node of nodes | nodeFilter:filter" class="mdc-tree-view__list-item">
      <let $tree.bind="element"></let>
      <let $tree-vm.bind="$parent"></let>
      <div class="mdc-tree-view__node \${$node.selected ? 'mdc-tree-view__node--selected' : ''}"
        click.trigger="nodeClicked($node)" mdc-ripple="no-class.bind: true;">
        <div class="mdc-tree-view__node__ripple"></div>
        <let filtered-children.bind="$node.children | nodeFilter:filter"></let>
        <button mdc-icon-button if.bind="filteredChildren.length" type="fab" size="small"
          class="mdc-tree-view__expander" on.bind="$node.expanded">
          <mdc-icon-button-icon class="material-icons">chevron_right</mdc-icon-button-icon>
          <mdc-icon-button-icon class="material-icons" on>expand_more</mdc-icon-button-icon>
        </button>
        <div else class="mdc-tree-view__leaf-padding"></div>
        <div class="mdc-tree-node">
          <au-compose containerless template.bind="nodeTemplate" model.bind="$node"></au-compose>
        </div>
      </div>
      <mdc-promisify-reference if.bind="$node.children" reference.bind="treeView"
        promise-ref.bind="$node.childTreeViewPromise">
      </mdc-promisify-reference>
      <mdc-tree-view if.bind="filteredChildren.length && $node.expanded" nodes.bind="filteredChildren"
        root-binding-context.bind="rootBindingContext" component.ref="treeView" filter.bind="filter"
        mdctree:node-selected.trigger="childNodeSelected($event.detail.node)" node-template.bind="nodeTemplate">
      </mdc-tree-view>
    </li>
  </ul>
  <span repeat.for="o of onTest">\${o}</span>
</template>
`;

// node_modules/@aurelia-mdc-web/tree-view/dist/mdc-tree-view.js
var id4 = 0;
var templateLookup = {};
var getNextNodeTemplateId = () => ++id4;
var NODE_SELECTED_EVENT = "mdctree:node-selected";
var MDCTreeViewFoundation = class extends MDCFoundation {
};
var MdcTreeView = (() => {
  let _classDecorators = [inject(Element), customElement({ name: "mdc-tree-view", template: mdc_tree_view_default }), processContent(function processContent2(node) {
    const element = node;
    const treeNode = element.querySelector("mdc-tree-node");
    if (treeNode) {
      const nodeTemplateId = getNextNodeTemplateId();
      element.setAttribute("data-template-id", nodeTemplateId.toString());
      templateLookup[nodeTemplateId] = treeNode.innerHTML;
    }
    element.innerHTML = "";
    return false;
  })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  let _classSuper = MdcComponent36;
  let _nodeTemplate_decorators;
  let _nodeTemplate_initializers = [];
  let _nodeTemplate_extraInitializers = [];
  let _nodes_decorators;
  let _nodes_initializers = [];
  let _nodes_extraInitializers = [];
  let _filter_decorators;
  let _filter_initializers = [];
  let _filter_extraInitializers = [];
  let _rootBindingContext_decorators;
  let _rootBindingContext_initializers = [];
  let _rootBindingContext_extraInitializers = [];
  var MdcTreeView2 = _classThis = class extends _classSuper {
    getDefaultFoundation() {
      return new MDCTreeViewFoundation();
    }
    constructor(root) {
      super(root);
      this.nodeTemplate = __runInitializers(this, _nodeTemplate_initializers, void 0);
      this.nodes = (__runInitializers(this, _nodeTemplate_extraInitializers), __runInitializers(this, _nodes_initializers, void 0));
      this.onTest = (__runInitializers(this, _nodes_extraInitializers), []);
      this.filter = __runInitializers(this, _filter_initializers, () => true);
      this.rootBindingContext = (__runInitializers(this, _filter_extraInitializers), __runInitializers(this, _rootBindingContext_initializers, void 0));
      __runInitializers(this, _rootBindingContext_extraInitializers);
      const templateId = root.getAttribute("data-template-id");
      if (templateId !== null) {
        this.nodeTemplate = templateLookup[templateId];
      }
    }
    bind(bindingContext) {
      this.rootBindingContext = this.rootBindingContext ?? bindingContext;
    }
    toggleExpanded(n, e) {
      n.expanded = !n.expanded;
      e.stopPropagation();
      return false;
    }
    nodeClicked(n) {
      if (this.selectedNode) {
        this.selectedNode.selected = false;
      }
      if (n) {
        n.selected = true;
      }
      this.selectedNode = n;
      this.root.dispatchEvent(new CustomEvent(NODE_SELECTED_EVENT, { detail: { node: n }, bubbles: true }));
      return true;
    }
    childNodeSelected(n) {
      if (this.selectedNode && this.selectedNode !== n) {
        this.selectedNode.selected = false;
      }
      this.selectedNode = n;
    }
    findPath(nodes, predicate) {
      const path = [];
      for (let i = 0; i < nodes.length; ++i) {
        if (predicate(nodes[i])) {
          return [i];
        }
        if (!nodes[i].children) {
          continue;
        }
        const childPath = this.findPath(nodes[i].children, predicate);
        if (childPath.length) {
          return [i, ...childPath];
        }
      }
      return path;
    }
    async expandPath(path) {
      const filteredNodes = this.nodes.filter((x) => this.filter(x));
      if (path.length === 1) {
        this.nodeClicked(filteredNodes[path[0]]);
        this.root.querySelectorAll(".mdc-tree-view__node")[path[0]].scrollIntoView();
      } else {
        filteredNodes[path[0]].expanded = true;
        await this.initialised;
        const childTreeView = await filteredNodes[path[0]].childTreeViewPromise;
        await (childTreeView == null ? void 0 : childTreeView.expandPath(path.slice(1)));
      }
    }
    async find(predicate) {
      const filteredNodes = this.nodes.filter((x) => this.filter(x));
      const path = this.findPath(filteredNodes, predicate);
      if (path.length) {
        await this.expandPath(path);
      }
    }
    dispatchEvent(type, node) {
      this.root.dispatchEvent(new CustomEvent(type, { bubbles: true, detail: { node } }));
    }
  };
  __setFunctionName(_classThis, "MdcTreeView");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
    _nodeTemplate_decorators = [bindable()];
    _nodes_decorators = [bindable()];
    _filter_decorators = [bindable()];
    _rootBindingContext_decorators = [bindable()];
    __esDecorate(null, null, _nodeTemplate_decorators, { kind: "field", name: "nodeTemplate", static: false, private: false, access: { has: (obj) => "nodeTemplate" in obj, get: (obj) => obj.nodeTemplate, set: (obj, value) => {
      obj.nodeTemplate = value;
    } }, metadata: _metadata }, _nodeTemplate_initializers, _nodeTemplate_extraInitializers);
    __esDecorate(null, null, _nodes_decorators, { kind: "field", name: "nodes", static: false, private: false, access: { has: (obj) => "nodes" in obj, get: (obj) => obj.nodes, set: (obj, value) => {
      obj.nodes = value;
    } }, metadata: _metadata }, _nodes_initializers, _nodes_extraInitializers);
    __esDecorate(null, null, _filter_decorators, { kind: "field", name: "filter", static: false, private: false, access: { has: (obj) => "filter" in obj, get: (obj) => obj.filter, set: (obj, value) => {
      obj.filter = value;
    } }, metadata: _metadata }, _filter_initializers, _filter_extraInitializers);
    __esDecorate(null, null, _rootBindingContext_decorators, { kind: "field", name: "rootBindingContext", static: false, private: false, access: { has: (obj) => "rootBindingContext" in obj, get: (obj) => obj.rootBindingContext, set: (obj, value) => {
      obj.rootBindingContext = value;
    } }, metadata: _metadata }, _rootBindingContext_initializers, _rootBindingContext_extraInitializers);
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTreeView2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTreeView2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tree-view/dist/mdc-tree-node-meta.js
var import_dist1921 = __toESM(require_dist());
var import_dist1922 = __toESM(require_dist2());
var import_dist1923 = __toESM(require_dist3());
var MdcTreeViewNodeMeta = (() => {
  let _classDecorators = [inject(Element), customAttribute("mdc-tree-node-meta")];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTreeViewNodeMeta2 = _classThis = class {
    constructor(root) {
      this.root = root;
    }
    attached() {
      this.root.classList.add("mdc-tree-node__meta");
    }
  };
  __setFunctionName(_classThis, "MdcTreeViewNodeMeta");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTreeViewNodeMeta2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTreeViewNodeMeta2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tree-view/dist/mdc-tree-node.js
var import_dist1924 = __toESM(require_dist());
var import_dist1925 = __toESM(require_dist2());
var import_dist1926 = __toESM(require_dist3());
var MdcTreeNode = (() => {
  let _classDecorators = [customElement({ name: "mdc-tree-node", template: "<au-slot></au-slot>" })];
  let _classDescriptor;
  let _classExtraInitializers = [];
  let _classThis;
  var MdcTreeNode2 = _classThis = class {
  };
  __setFunctionName(_classThis, "MdcTreeNode");
  (() => {
    const _metadata = typeof Symbol === "function" && Symbol.metadata ? /* @__PURE__ */ Object.create(null) : void 0;
    __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
    MdcTreeNode2 = _classThis = _classDescriptor.value;
    if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
    __runInitializers(_classThis, _classExtraInitializers);
  })();
  return MdcTreeNode2 = _classThis;
})();

// node_modules/@aurelia-mdc-web/tree-view/dist/node-filter.js
var import_dist1927 = __toESM(require_dist());
var import_dist1928 = __toESM(require_dist2());
var import_dist1929 = __toESM(require_dist3());
var NodeFilterValueConverter = class {
  toView(nodes, filter) {
    if (!filter) {
      return nodes;
    }
    return nodes == null ? void 0 : nodes.filter((x) => filter(x));
  }
};

// node_modules/@aurelia-mdc-web/tree-view/dist/index.js
var registered31 = false;
var TreeViewConfiguration = {
  register(container) {
    if (registered31) {
      return container;
    } else {
      registered31 = true;
      return container.register(IconButtonConfiguration, MdcTreeView, MdcTreeViewNodeMeta, MdcTreeNode, NodeFilterValueConverter);
    }
  }
};

// node_modules/@aurelia-mdc-web/all/dist/index.js
var registered32 = false;
var AllConfiguration = {
  /**
   * Apply this configuration to the provided container.
   */
  register(container) {
    if (registered32) {
      return container;
    } else {
      registered32 = true;
      return container.register(BaseConfiguration, BannerConfiguration, ButtonConfiguration, CardConfiguration, CheckboxConfiguration, ChipsConfiguration, CircularProgressConfiguration, DataTableConfiguration, DialogConfiguration, DrawerConfiguration, ElevationConfiguration, ExpandableConfiguration, FabConfiguration, FloatingLabelConfiguration, FormFieldConfiguration, IconButtonConfiguration, IconConfiguration, ImageListConfiguration, LayoutGridConfiguration, LineRippleConfiguration, LinearProgressConfiguration, ListConfiguration, LookupConfiguration, MenuConfiguration, MenuSurfaceConfiguration, NotchedOutlineConfiguration, RadioConfiguration, RippleConfiguration, SegmentedButtonConfiguration, SelectConfiguration, SliderConfiguration, SnackbarConfiguration, SwitchConfiguration, TabBarConfiguration, TextFieldConfiguration, TooltipConfiguration, TopAppBarConfiguration, TreeViewConfiguration, TypographyConfiguration);
    }
  }
  /**
   * Create a new container with this configuration applied to it.
   */
  // createContainer(): IContainer {
  //   return this.register(DI.createContainer());
  // }
};
export {
  AllConfiguration
};
/*! Bundled license information:

@material/banner/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/banner/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/banner/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/banner/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/banner/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/checkbox/adapter.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/animation/util.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/checkbox/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/checkbox/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/checkbox/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/checkbox/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/adapter.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/ripple/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/animation/animationframe.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/component-ripple.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/primary-foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/trailing-foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/action/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dom/announce.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/chip-set/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/trailingaction/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/chip-set/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/deprecated/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/chips/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/circular-progress/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/circular-progress/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/circular-progress/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/circular-progress/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/circular-progress/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/adapter.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/constants.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/constants.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/foundation.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/component.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/data-table/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/util.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/dialog/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/floating-label/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/floating-label/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/floating-label/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/floating-label/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/floating-label/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/form-field/adapter.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/form-field/constants.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/form-field/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/form-field/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/form-field/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/icon-button/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/line-ripple/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/line-ripple/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/line-ripple/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/line-ripple/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/line-ripple/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/list/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/list/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/list/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/notched-outline/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/notched-outline/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/notched-outline/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/notched-outline/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/notched-outline/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/radio/adapter.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/radio/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/radio/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/radio/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/radio/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segmented-button/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segmented-button/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segmented-button/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segment/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segment/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segment/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segmented-button/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segmented-button/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segment/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/segment/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/segmented-button/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/helper-text/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/helper-text/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/helper-text/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/icon/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/icon/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/icon/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/helper-text/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/helper-text/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/icon/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/icon/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/select/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@aurelia-mdc-web/select/dist/mdc-select-foundation-aurelia.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/util.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/snackbar/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/rtl-scroller.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/rtl-default-scroller.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/rtl-negative-scroller.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/rtl-reverse-scroller.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/util.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/fading-foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/sliding-foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-bar/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/types.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-scroller/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tab-indicator/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/character-counter/constants.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/character-counter/foundation.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/character-counter/component.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/foundation.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/helper-text/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/helper-text/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/helper-text/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/icon/constants.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/icon/foundation.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/icon/component.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/component.js:
  (**
   * @license
   * Copyright 2016 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/character-counter/adapter.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/character-counter/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/helper-text/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/helper-text/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/icon/adapter.js:
  (**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/icon/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/textfield/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/menu-surface/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/adapter.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/types.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/linear-progress/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/types.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/slider/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/deprecated/adapter.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/deprecated/constants.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/deprecated/foundation.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/deprecated/component.js:
  (**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/deprecated/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/adapter.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/constants.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/observer.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/observer-foundation.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/foundation.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/component.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/switch/index.js:
  (**
   * @license
   * Copyright 2021 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tooltip/adapter.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tooltip/constants.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tooltip/foundation.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tooltip/component.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/tooltip/index.js:
  (**
   * @license
   * Copyright 2020 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/types.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@material/base/index.js:
  (**
   * @license
   * Copyright 2019 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)
*/
//# sourceMappingURL=@aurelia-mdc-web_all.js.map
